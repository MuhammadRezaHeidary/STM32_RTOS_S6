
RTOS_S6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007298  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08007428  08007428  00017428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007630  08007630  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08007630  08007630  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007630  08007630  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007630  08007630  00017630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007634  08007634  00017634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000015e4  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001644  20001644  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cb5c  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d9d  00000000  00000000  0003cc2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017f8  00000000  00000000  000409d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012c3  00000000  00000000  000421c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020fe5  00000000  00000000  0004348b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fc7a  00000000  00000000  00064470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c52b5  00000000  00000000  000840ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006a6c  00000000  00000000  001493a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0014fe0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007410 	.word	0x08007410

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007410 	.word	0x08007410

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4a07      	ldr	r2, [pc, #28]	; (80002ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	2000007c 	.word	0x2000007c
 80002b0:	2000011c 	.word	0x2000011c

080002b4 <Send_UART>:
void HPT_TASK_Start(void *args);
void MPT_TASK_Start(void *args);
void LPT_TASK_Start(void *args);

/********************* Other Functions *********************/
void Send_UART(char *str) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(SimpleMutexHandler, portMAX_DELAY);
 80002bc:	4b10      	ldr	r3, [pc, #64]	; (8000300 <Send_UART+0x4c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f04f 31ff 	mov.w	r1, #4294967295
 80002c4:	4618      	mov	r0, r3
 80002c6:	f004 fd77 	bl	8004db8 <xQueueSemaphoreTake>
//	xSemaphoreTake(SimpleBinarySemaphoreHandler, portMAX_DELAY);
	HAL_Delay(5000); // for binary semaphore
 80002ca:	f241 3088 	movw	r0, #5000	; 0x1388
 80002ce:	f000 fdb1 	bl	8000e34 <HAL_Delay>
	HAL_UART_Transmit(&huart1, str, strlen(str), HAL_MAX_DELAY);
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	f7ff ff7c 	bl	80001d0 <strlen>
 80002d8:	4603      	mov	r3, r0
 80002da:	b29a      	uxth	r2, r3
 80002dc:	f04f 33ff 	mov.w	r3, #4294967295
 80002e0:	6879      	ldr	r1, [r7, #4]
 80002e2:	4808      	ldr	r0, [pc, #32]	; (8000304 <Send_UART+0x50>)
 80002e4:	f003 fabe 	bl	8003864 <HAL_UART_Transmit>
//	HAL_Delay(2000); // for mutex
	xSemaphoreGive(SimpleMutexHandler);
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <Send_UART+0x4c>)
 80002ea:	6818      	ldr	r0, [r3, #0]
 80002ec:	2300      	movs	r3, #0
 80002ee:	2200      	movs	r2, #0
 80002f0:	2100      	movs	r1, #0
 80002f2:	f004 fc63 	bl	8004bbc <xQueueGenericSend>
//	xSemaphoreGive(SimpleBinarySemaphoreHandler);

}
 80002f6:	bf00      	nop
 80002f8:	3708      	adds	r7, #8
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	20000748 	.word	0x20000748
 8000304:	200003d4 	.word	0x200003d4

08000308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b09c      	sub	sp, #112	; 0x70
 800030c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030e:	f000 fd5b 	bl	8000dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000312:	f000 f8af 	bl	8000474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000316:	f000 f9e1 	bl	80006dc <MX_GPIO_Init>
  MX_I2C1_Init();
 800031a:	f000 f90f 	bl	800053c <MX_I2C1_Init>
  MX_SPI1_Init();
 800031e:	f000 f94d 	bl	80005bc <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000322:	f000 f9b9 	bl	8000698 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 8000326:	f000 f987 	bl	8000638 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /********************* Create Mutex *********************/
  SimpleMutexHandler = xSemaphoreCreateMutex();
 800032a:	2001      	movs	r0, #1
 800032c:	f004 fc2d 	bl	8004b8a <xQueueCreateMutex>
 8000330:	4603      	mov	r3, r0
 8000332:	4a40      	ldr	r2, [pc, #256]	; (8000434 <main+0x12c>)
 8000334:	6013      	str	r3, [r2, #0]
  // Check Mutex is created successfully or not!
  if(SimpleMutexHandler != NULL) {
 8000336:	4b3f      	ldr	r3, [pc, #252]	; (8000434 <main+0x12c>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d011      	beq.n	8000362 <main+0x5a>
	  uint8_t mutex_data[100];
	  sprintf(mutex_data, "Mutex created!\r\n\r\n");
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	493d      	ldr	r1, [pc, #244]	; (8000438 <main+0x130>)
 8000342:	4618      	mov	r0, r3
 8000344:	f006 fb6a 	bl	8006a1c <siprintf>
	  HAL_UART_Transmit(&huart1, mutex_data, strlen(mutex_data), HAL_MAX_DELAY);
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	4618      	mov	r0, r3
 800034c:	f7ff ff40 	bl	80001d0 <strlen>
 8000350:	4603      	mov	r3, r0
 8000352:	b29a      	uxth	r2, r3
 8000354:	1d39      	adds	r1, r7, #4
 8000356:	f04f 33ff 	mov.w	r3, #4294967295
 800035a:	4838      	ldr	r0, [pc, #224]	; (800043c <main+0x134>)
 800035c:	f003 fa82 	bl	8003864 <HAL_UART_Transmit>
 8000360:	e010      	b.n	8000384 <main+0x7c>
  }
  else {
	  uint8_t mutex_data[100];
	  sprintf(mutex_data, "Unable to create Mutex!\r\n\r\n");
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4936      	ldr	r1, [pc, #216]	; (8000440 <main+0x138>)
 8000366:	4618      	mov	r0, r3
 8000368:	f006 fb58 	bl	8006a1c <siprintf>
	  HAL_UART_Transmit(&huart1, mutex_data, strlen(mutex_data), HAL_MAX_DELAY);
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff2e 	bl	80001d0 <strlen>
 8000374:	4603      	mov	r3, r0
 8000376:	b29a      	uxth	r2, r3
 8000378:	1d39      	adds	r1, r7, #4
 800037a:	f04f 33ff 	mov.w	r3, #4294967295
 800037e:	482f      	ldr	r0, [pc, #188]	; (800043c <main+0x134>)
 8000380:	f003 fa70 	bl	8003864 <HAL_UART_Transmit>
  }

  /********************* Create Binary Semaphore *********************/
  SimpleBinarySemaphoreHandler = xSemaphoreCreateBinary();
 8000384:	2203      	movs	r2, #3
 8000386:	2100      	movs	r1, #0
 8000388:	2001      	movs	r0, #1
 800038a:	f004 fb87 	bl	8004a9c <xQueueGenericCreate>
 800038e:	4603      	mov	r3, r0
 8000390:	4a2c      	ldr	r2, [pc, #176]	; (8000444 <main+0x13c>)
 8000392:	6013      	str	r3, [r2, #0]
  // Check Mutex is created successfully or not!
  if(SimpleBinarySemaphoreHandler != NULL) {
 8000394:	4b2b      	ldr	r3, [pc, #172]	; (8000444 <main+0x13c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d011      	beq.n	80003c0 <main+0xb8>
	  uint8_t binsem_data[100];
	  sprintf(binsem_data, "Binary semaphore created!\r\n\r\n");
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	492a      	ldr	r1, [pc, #168]	; (8000448 <main+0x140>)
 80003a0:	4618      	mov	r0, r3
 80003a2:	f006 fb3b 	bl	8006a1c <siprintf>
	  HAL_UART_Transmit(&huart1, binsem_data, strlen(binsem_data), HAL_MAX_DELAY);
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ff11 	bl	80001d0 <strlen>
 80003ae:	4603      	mov	r3, r0
 80003b0:	b29a      	uxth	r2, r3
 80003b2:	1d39      	adds	r1, r7, #4
 80003b4:	f04f 33ff 	mov.w	r3, #4294967295
 80003b8:	4820      	ldr	r0, [pc, #128]	; (800043c <main+0x134>)
 80003ba:	f003 fa53 	bl	8003864 <HAL_UART_Transmit>
 80003be:	e010      	b.n	80003e2 <main+0xda>
  }
  else {
	  uint8_t binsem_data[100];
	  sprintf(binsem_data, "Unable to create binary semaphore!\r\n\r\n");
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	4922      	ldr	r1, [pc, #136]	; (800044c <main+0x144>)
 80003c4:	4618      	mov	r0, r3
 80003c6:	f006 fb29 	bl	8006a1c <siprintf>
	  HAL_UART_Transmit(&huart1, binsem_data, strlen(binsem_data), HAL_MAX_DELAY);
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff feff 	bl	80001d0 <strlen>
 80003d2:	4603      	mov	r3, r0
 80003d4:	b29a      	uxth	r2, r3
 80003d6:	1d39      	adds	r1, r7, #4
 80003d8:	f04f 33ff 	mov.w	r3, #4294967295
 80003dc:	4817      	ldr	r0, [pc, #92]	; (800043c <main+0x134>)
 80003de:	f003 fa41 	bl	8003864 <HAL_UART_Transmit>
  }
  // Binary semaphore must be given before being taken!
  xSemaphoreGive(SimpleBinarySemaphoreHandler);
 80003e2:	4b18      	ldr	r3, [pc, #96]	; (8000444 <main+0x13c>)
 80003e4:	6818      	ldr	r0, [r3, #0]
 80003e6:	2300      	movs	r3, #0
 80003e8:	2200      	movs	r2, #0
 80003ea:	2100      	movs	r1, #0
 80003ec:	f004 fbe6 	bl	8004bbc <xQueueGenericSend>

  /********************* Create Tasks *********************/
  xTaskCreate(HPT_TASK_Start, "HPT", 128, NULL, 3, &HPT_Task_Handler);
 80003f0:	4b17      	ldr	r3, [pc, #92]	; (8000450 <main+0x148>)
 80003f2:	9301      	str	r3, [sp, #4]
 80003f4:	2303      	movs	r3, #3
 80003f6:	9300      	str	r3, [sp, #0]
 80003f8:	2300      	movs	r3, #0
 80003fa:	2280      	movs	r2, #128	; 0x80
 80003fc:	4915      	ldr	r1, [pc, #84]	; (8000454 <main+0x14c>)
 80003fe:	4816      	ldr	r0, [pc, #88]	; (8000458 <main+0x150>)
 8000400:	f004 ff44 	bl	800528c <xTaskCreate>
  xTaskCreate(MPT_TASK_Start, "MPT", 128, NULL, 2, &MPT_Task_Handler);
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <main+0x154>)
 8000406:	9301      	str	r3, [sp, #4]
 8000408:	2302      	movs	r3, #2
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	2300      	movs	r3, #0
 800040e:	2280      	movs	r2, #128	; 0x80
 8000410:	4913      	ldr	r1, [pc, #76]	; (8000460 <main+0x158>)
 8000412:	4814      	ldr	r0, [pc, #80]	; (8000464 <main+0x15c>)
 8000414:	f004 ff3a 	bl	800528c <xTaskCreate>
  xTaskCreate(LPT_TASK_Start, "LPT", 128, NULL, 1, &LPT_Task_Handler);
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <main+0x160>)
 800041a:	9301      	str	r3, [sp, #4]
 800041c:	2301      	movs	r3, #1
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2300      	movs	r3, #0
 8000422:	2280      	movs	r2, #128	; 0x80
 8000424:	4911      	ldr	r1, [pc, #68]	; (800046c <main+0x164>)
 8000426:	4812      	ldr	r0, [pc, #72]	; (8000470 <main+0x168>)
 8000428:	f004 ff30 	bl	800528c <xTaskCreate>

  /********************* Scheduler *********************/
  vTaskStartScheduler();
 800042c:	f005 f8a8 	bl	8005580 <vTaskStartScheduler>
  /* USER CODE END 2 */


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000430:	e7fe      	b.n	8000430 <main+0x128>
 8000432:	bf00      	nop
 8000434:	20000748 	.word	0x20000748
 8000438:	08007428 	.word	0x08007428
 800043c:	200003d4 	.word	0x200003d4
 8000440:	0800743c 	.word	0x0800743c
 8000444:	2000074c 	.word	0x2000074c
 8000448:	08007458 	.word	0x08007458
 800044c:	08007478 	.word	0x08007478
 8000450:	20000750 	.word	0x20000750
 8000454:	080074a0 	.word	0x080074a0
 8000458:	080007d9 	.word	0x080007d9
 800045c:	20000754 	.word	0x20000754
 8000460:	080074a4 	.word	0x080074a4
 8000464:	08000855 	.word	0x08000855
 8000468:	20000758 	.word	0x20000758
 800046c:	080074a8 	.word	0x080074a8
 8000470:	08000889 	.word	0x08000889

08000474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b09e      	sub	sp, #120	; 0x78
 8000478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800047e:	2228      	movs	r2, #40	; 0x28
 8000480:	2100      	movs	r1, #0
 8000482:	4618      	mov	r0, r3
 8000484:	f006 faea 	bl	8006a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000488:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
 8000496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000498:	463b      	mov	r3, r7
 800049a:	223c      	movs	r2, #60	; 0x3c
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f006 fadc 	bl	8006a5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80004a4:	2303      	movs	r3, #3
 80004a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80004ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b2:	2301      	movs	r3, #1
 80004b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b6:	2310      	movs	r3, #16
 80004b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ba:	2302      	movs	r3, #2
 80004bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004c2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004c8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004ce:	4618      	mov	r0, r3
 80004d0:	f001 f9b8 	bl	8001844 <HAL_RCC_OscConfig>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004da:	f000 fa25 	bl	8000928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004de:	230f      	movs	r3, #15
 80004e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e2:	2302      	movs	r3, #2
 80004e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f0:	2300      	movs	r3, #0
 80004f2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004f8:	2101      	movs	r1, #1
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 f9e0 	bl	80028c0 <HAL_RCC_ClockConfig>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000506:	f000 fa0f 	bl	8000928 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <SystemClock_Config+0xc4>)
 800050c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000512:	2300      	movs	r3, #0
 8000514:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000516:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800051a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800051c:	463b      	mov	r3, r7
 800051e:	4618      	mov	r0, r3
 8000520:	f002 fc36 	bl	8002d90 <HAL_RCCEx_PeriphCLKConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800052a:	f000 f9fd 	bl	8000928 <Error_Handler>
  }
}
 800052e:	bf00      	nop
 8000530:	3778      	adds	r7, #120	; 0x78
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	00020021 	.word	0x00020021

0800053c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000542:	4a1c      	ldr	r2, [pc, #112]	; (80005b4 <MX_I2C1_Init+0x78>)
 8000544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000548:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <MX_I2C1_Init+0x7c>)
 800054a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <MX_I2C1_Init+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000554:	2201      	movs	r2, #1
 8000556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <MX_I2C1_Init+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_I2C1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000576:	480e      	ldr	r0, [pc, #56]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000578:	f000 ff6c 	bl	8001454 <HAL_I2C_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000582:	f000 f9d1 	bl	8000928 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000586:	2100      	movs	r1, #0
 8000588:	4809      	ldr	r0, [pc, #36]	; (80005b0 <MX_I2C1_Init+0x74>)
 800058a:	f000 fff2 	bl	8001572 <HAL_I2CEx_ConfigAnalogFilter>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000594:	f000 f9c8 	bl	8000928 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000598:	2100      	movs	r1, #0
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_I2C1_Init+0x74>)
 800059c:	f001 f834 	bl	8001608 <HAL_I2CEx_ConfigDigitalFilter>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005a6:	f000 f9bf 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	2000031c 	.word	0x2000031c
 80005b4:	40005400 	.word	0x40005400
 80005b8:	2000090e 	.word	0x2000090e

080005bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <MX_SPI1_Init+0x74>)
 80005c2:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <MX_SPI1_Init+0x78>)
 80005c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005c6:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <MX_SPI1_Init+0x74>)
 80005c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_SPI1_Init+0x74>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <MX_SPI1_Init+0x74>)
 80005d6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80005da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_SPI1_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005e2:	4b13      	ldr	r3, [pc, #76]	; (8000630 <MX_SPI1_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_SPI1_Init+0x74>)
 80005ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_SPI1_Init+0x74>)
 80005f2:	2208      	movs	r2, #8
 80005f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_SPI1_Init+0x74>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_SPI1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <MX_SPI1_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_SPI1_Init+0x74>)
 800060a:	2207      	movs	r2, #7
 800060c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <MX_SPI1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_SPI1_Init+0x74>)
 8000616:	2208      	movs	r2, #8
 8000618:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_SPI1_Init+0x74>)
 800061c:	f002 fd68 	bl	80030f0 <HAL_SPI_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000626:	f000 f97f 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000370 	.word	0x20000370
 8000634:	40013000 	.word	0x40013000

08000638 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_USART1_UART_Init+0x58>)
 800063e:	4a15      	ldr	r2, [pc, #84]	; (8000694 <MX_USART1_UART_Init+0x5c>)
 8000640:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_USART1_UART_Init+0x58>)
 8000644:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000648:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_USART1_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_USART1_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_USART1_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_USART1_UART_Init+0x58>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_USART1_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_USART1_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_USART1_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_USART1_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_USART1_UART_Init+0x58>)
 800067c:	f003 f8a4 	bl	80037c8 <HAL_UART_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000686:	f000 f94f 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200003d4 	.word	0x200003d4
 8000694:	40013800 	.word	0x40013800

08000698 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <MX_USB_PCD_Init+0x3c>)
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <MX_USB_PCD_Init+0x40>)
 80006a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_USB_PCD_Init+0x3c>)
 80006a4:	2208      	movs	r2, #8
 80006a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MX_USB_PCD_Init+0x3c>)
 80006aa:	2202      	movs	r2, #2
 80006ac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_USB_PCD_Init+0x3c>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <MX_USB_PCD_Init+0x3c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_USB_PCD_Init+0x3c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_USB_PCD_Init+0x3c>)
 80006c2:	f000 ffed 	bl	80016a0 <HAL_PCD_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80006cc:	f000 f92c 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000045c 	.word	0x2000045c
 80006d8:	40005c00 	.word	0x40005c00

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f2:	4b37      	ldr	r3, [pc, #220]	; (80007d0 <MX_GPIO_Init+0xf4>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	4a36      	ldr	r2, [pc, #216]	; (80007d0 <MX_GPIO_Init+0xf4>)
 80006f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006fc:	6153      	str	r3, [r2, #20]
 80006fe:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <MX_GPIO_Init+0xf4>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	4b31      	ldr	r3, [pc, #196]	; (80007d0 <MX_GPIO_Init+0xf4>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a30      	ldr	r2, [pc, #192]	; (80007d0 <MX_GPIO_Init+0xf4>)
 8000710:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <MX_GPIO_Init+0xf4>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000722:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <MX_GPIO_Init+0xf4>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a2a      	ldr	r2, [pc, #168]	; (80007d0 <MX_GPIO_Init+0xf4>)
 8000728:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <MX_GPIO_Init+0xf4>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <MX_GPIO_Init+0xf4>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a24      	ldr	r2, [pc, #144]	; (80007d0 <MX_GPIO_Init+0xf4>)
 8000740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000744:	6153      	str	r3, [r2, #20]
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <MX_GPIO_Init+0xf4>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_GPIO_Init+0xf4>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a1e      	ldr	r2, [pc, #120]	; (80007d0 <MX_GPIO_Init+0xf4>)
 8000758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_GPIO_Init+0xf4>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800076a:	2200      	movs	r2, #0
 800076c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000770:	4818      	ldr	r0, [pc, #96]	; (80007d4 <MX_GPIO_Init+0xf8>)
 8000772:	f000 fe57 	bl	8001424 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000776:	2337      	movs	r3, #55	; 0x37
 8000778:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800077a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	4812      	ldr	r0, [pc, #72]	; (80007d4 <MX_GPIO_Init+0xf8>)
 800078c:	f000 fcd0 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000790:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000794:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	480a      	ldr	r0, [pc, #40]	; (80007d4 <MX_GPIO_Init+0xf8>)
 80007aa:	f000 fcc1 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ae:	2301      	movs	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c4:	f000 fcb4 	bl	8001130 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	; 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40021000 	.word	0x40021000
 80007d4:	48001000 	.word	0x48001000

080007d8 <HPT_TASK_Start>:

/* USER CODE BEGIN 4 */
void HPT_TASK_Start(void *args) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09c      	sub	sp, #112	; 0x70
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	char* str2send = "In HPT ****************************************\r\n";
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <HPT_TASK_Start+0x6c>)
 80007e2:	66fb      	str	r3, [r7, #108]	; 0x6c

	while(1) {
		uint8_t data[100];
		sprintf(data, "Entered HPT Task\r\n about to take Mutex\r\n");
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	4917      	ldr	r1, [pc, #92]	; (8000848 <HPT_TASK_Start+0x70>)
 80007ea:	4618      	mov	r0, r3
 80007ec:	f006 f916 	bl	8006a1c <siprintf>
//		sprintf(data, "Entered HPT Task\r\n about to take Binsem\r\n");
		HAL_UART_Transmit(&huart1, data, strlen(data), HAL_MAX_DELAY);
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fceb 	bl	80001d0 <strlen>
 80007fa:	4603      	mov	r3, r0
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	f107 0108 	add.w	r1, r7, #8
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	4811      	ldr	r0, [pc, #68]	; (800084c <HPT_TASK_Start+0x74>)
 8000808:	f003 f82c 	bl	8003864 <HAL_UART_Transmit>

		Send_UART(str2send);
 800080c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800080e:	f7ff fd51 	bl	80002b4 <Send_UART>

		sprintf(data, "Leaving HPT\r\n\r\n");
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	490e      	ldr	r1, [pc, #56]	; (8000850 <HPT_TASK_Start+0x78>)
 8000818:	4618      	mov	r0, r3
 800081a:	f006 f8ff 	bl	8006a1c <siprintf>
		HAL_UART_Transmit(&huart1, data, strlen(data), HAL_MAX_DELAY);
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fcd4 	bl	80001d0 <strlen>
 8000828:	4603      	mov	r3, r0
 800082a:	b29a      	uxth	r2, r3
 800082c:	f107 0108 	add.w	r1, r7, #8
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <HPT_TASK_Start+0x74>)
 8000836:	f003 f815 	bl	8003864 <HAL_UART_Transmit>

//		vTaskDelay(1500);
		vTaskDelay(750);
 800083a:	f240 20ee 	movw	r0, #750	; 0x2ee
 800083e:	f004 fe6b 	bl	8005518 <vTaskDelay>
	while(1) {
 8000842:	e7cf      	b.n	80007e4 <HPT_TASK_Start+0xc>
 8000844:	080074ac 	.word	0x080074ac
 8000848:	080074e0 	.word	0x080074e0
 800084c:	200003d4 	.word	0x200003d4
 8000850:	0800750c 	.word	0x0800750c

08000854 <MPT_TASK_Start>:
		vTaskDelay(2000);
	}
}
*/

void MPT_TASK_Start(void *args) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	char* str2send = "In MPT ########################################\r\n";
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MPT_TASK_Start+0x2c>)
 800085e:	60fb      	str	r3, [r7, #12]

	while(1) {
		HAL_UART_Transmit(&huart1, str2send, strlen(str2send), HAL_MAX_DELAY);
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	f7ff fcb5 	bl	80001d0 <strlen>
 8000866:	4603      	mov	r3, r0
 8000868:	b29a      	uxth	r2, r3
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	68f9      	ldr	r1, [r7, #12]
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MPT_TASK_Start+0x30>)
 8000872:	f002 fff7 	bl	8003864 <HAL_UART_Transmit>
		vTaskDelay(2000);
 8000876:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800087a:	f004 fe4d 	bl	8005518 <vTaskDelay>
		HAL_UART_Transmit(&huart1, str2send, strlen(str2send), HAL_MAX_DELAY);
 800087e:	e7ef      	b.n	8000860 <MPT_TASK_Start+0xc>
 8000880:	0800751c 	.word	0x0800751c
 8000884:	200003d4 	.word	0x200003d4

08000888 <LPT_TASK_Start>:
	}
}



void LPT_TASK_Start(void *args) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b09c      	sub	sp, #112	; 0x70
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	char* str2send = "In LPT ------------------------------------\r\n";
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <LPT_TASK_Start+0x6c>)
 8000892:	66fb      	str	r3, [r7, #108]	; 0x6c

	while(1) {
		uint8_t data[100];
		sprintf(data, "Entered LPT Task\r\n about to take Mutex\r\n");
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	4917      	ldr	r1, [pc, #92]	; (80008f8 <LPT_TASK_Start+0x70>)
 800089a:	4618      	mov	r0, r3
 800089c:	f006 f8be 	bl	8006a1c <siprintf>
//		sprintf(data, "Entered LPT Task\r\n about to take Binsem\r\n");
		HAL_UART_Transmit(&huart1, data, strlen(data), HAL_MAX_DELAY);
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fc93 	bl	80001d0 <strlen>
 80008aa:	4603      	mov	r3, r0
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	f107 0108 	add.w	r1, r7, #8
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	4811      	ldr	r0, [pc, #68]	; (80008fc <LPT_TASK_Start+0x74>)
 80008b8:	f002 ffd4 	bl	8003864 <HAL_UART_Transmit>

		Send_UART(str2send);
 80008bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80008be:	f7ff fcf9 	bl	80002b4 <Send_UART>

		sprintf(data, "Leaving LPT\r\n\r\n");
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	490e      	ldr	r1, [pc, #56]	; (8000900 <LPT_TASK_Start+0x78>)
 80008c8:	4618      	mov	r0, r3
 80008ca:	f006 f8a7 	bl	8006a1c <siprintf>
		HAL_UART_Transmit(&huart1, data, strlen(data), HAL_MAX_DELAY);
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fc7c 	bl	80001d0 <strlen>
 80008d8:	4603      	mov	r3, r0
 80008da:	b29a      	uxth	r2, r3
 80008dc:	f107 0108 	add.w	r1, r7, #8
 80008e0:	f04f 33ff 	mov.w	r3, #4294967295
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <LPT_TASK_Start+0x74>)
 80008e6:	f002 ffbd 	bl	8003864 <HAL_UART_Transmit>

		vTaskDelay(2000);
 80008ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008ee:	f004 fe13 	bl	8005518 <vTaskDelay>
	while(1) {
 80008f2:	e7cf      	b.n	8000894 <LPT_TASK_Start+0xc>
 80008f4:	08007550 	.word	0x08007550
 80008f8:	08007580 	.word	0x08007580
 80008fc:	200003d4 	.word	0x200003d4
 8000900:	080075ac 	.word	0x080075ac

08000904 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d101      	bne.n	800091a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000916:	f000 fa6d 	bl	8000df4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40012c00 	.word	0x40012c00

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	e7fe      	b.n	8000930 <Error_Handler+0x8>
	...

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_MspInit+0x4c>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a10      	ldr	r2, [pc, #64]	; (8000980 <HAL_MspInit+0x4c>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <HAL_MspInit+0x4c>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <HAL_MspInit+0x4c>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	61d3      	str	r3, [r2, #28]
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_MspInit+0x4c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	210f      	movs	r1, #15
 800096e:	f06f 0001 	mvn.w	r0, #1
 8000972:	f000 fb3b 	bl	8000fec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <HAL_I2C_MspInit+0x7c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d127      	bne.n	80009f6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_I2C_MspInit+0x80>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	4a16      	ldr	r2, [pc, #88]	; (8000a04 <HAL_I2C_MspInit+0x80>)
 80009ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b0:	6153      	str	r3, [r2, #20]
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_I2C_MspInit+0x80>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80009be:	23c0      	movs	r3, #192	; 0xc0
 80009c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c2:	2312      	movs	r3, #18
 80009c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ce:	2304      	movs	r3, #4
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	480b      	ldr	r0, [pc, #44]	; (8000a08 <HAL_I2C_MspInit+0x84>)
 80009da:	f000 fba9 	bl	8001130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_I2C_MspInit+0x80>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_I2C_MspInit+0x80>)
 80009e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e8:	61d3      	str	r3, [r2, #28]
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_I2C_MspInit+0x80>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009f6:	bf00      	nop
 80009f8:	3728      	adds	r7, #40	; 0x28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40005400 	.word	0x40005400
 8000a04:	40021000 	.word	0x40021000
 8000a08:	48000400 	.word	0x48000400

08000a0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a17      	ldr	r2, [pc, #92]	; (8000a88 <HAL_SPI_MspInit+0x7c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d128      	bne.n	8000a80 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <HAL_SPI_MspInit+0x80>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4a16      	ldr	r2, [pc, #88]	; (8000a8c <HAL_SPI_MspInit+0x80>)
 8000a34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a38:	6193      	str	r3, [r2, #24]
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <HAL_SPI_MspInit+0x80>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_SPI_MspInit+0x80>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <HAL_SPI_MspInit+0x80>)
 8000a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a50:	6153      	str	r3, [r2, #20]
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_SPI_MspInit+0x80>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000a5e:	23e0      	movs	r3, #224	; 0xe0
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a6e:	2305      	movs	r3, #5
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7c:	f000 fb58 	bl	8001130 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40013000 	.word	0x40013000
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <HAL_UART_MspInit+0x8c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d12f      	bne.n	8000b12 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <HAL_UART_MspInit+0x90>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	4a1a      	ldr	r2, [pc, #104]	; (8000b20 <HAL_UART_MspInit+0x90>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6193      	str	r3, [r2, #24]
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <HAL_UART_MspInit+0x90>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_UART_MspInit+0x90>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <HAL_UART_MspInit+0x90>)
 8000ad0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ad4:	6153      	str	r3, [r2, #20]
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_UART_MspInit+0x90>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ae2:	2330      	movs	r3, #48	; 0x30
 8000ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000af2:	2307      	movs	r3, #7
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4809      	ldr	r0, [pc, #36]	; (8000b24 <HAL_UART_MspInit+0x94>)
 8000afe:	f000 fb17 	bl	8001130 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2105      	movs	r1, #5
 8000b06:	2025      	movs	r0, #37	; 0x25
 8000b08:	f000 fa70 	bl	8000fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b0c:	2025      	movs	r0, #37	; 0x25
 8000b0e:	f000 fa89 	bl	8001024 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	; 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40013800 	.word	0x40013800
 8000b20:	40021000 	.word	0x40021000
 8000b24:	48000800 	.word	0x48000800

08000b28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <HAL_PCD_MspInit+0x80>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d129      	bne.n	8000b9e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_PCD_MspInit+0x84>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <HAL_PCD_MspInit+0x84>)
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b54:	6153      	str	r3, [r2, #20]
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_PCD_MspInit+0x84>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000b62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000b74:	230e      	movs	r3, #14
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f000 fad5 	bl	8001130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_PCD_MspInit+0x84>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_PCD_MspInit+0x84>)
 8000b8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b90:	61d3      	str	r3, [r2, #28]
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_PCD_MspInit+0x84>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40005c00 	.word	0x40005c00
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bc0:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <HAL_InitTick+0xcc>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a2d      	ldr	r2, [pc, #180]	; (8000c7c <HAL_InitTick+0xcc>)
 8000bc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <HAL_InitTick+0xcc>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bd8:	f107 020c 	add.w	r2, r7, #12
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f002 f8a2 	bl	8002d2c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000be8:	f002 f87e 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 8000bec:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf0:	4a23      	ldr	r2, [pc, #140]	; (8000c80 <HAL_InitTick+0xd0>)
 8000bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf6:	0c9b      	lsrs	r3, r3, #18
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bfc:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <HAL_InitTick+0xd4>)
 8000bfe:	4a22      	ldr	r2, [pc, #136]	; (8000c88 <HAL_InitTick+0xd8>)
 8000c00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <HAL_InitTick+0xd4>)
 8000c04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c08:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c0a:	4a1e      	ldr	r2, [pc, #120]	; (8000c84 <HAL_InitTick+0xd4>)
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <HAL_InitTick+0xd4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c16:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <HAL_InitTick+0xd4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <HAL_InitTick+0xd4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c22:	4818      	ldr	r0, [pc, #96]	; (8000c84 <HAL_InitTick+0xd4>)
 8000c24:	f002 fb0f 	bl	8003246 <HAL_TIM_Base_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d11b      	bne.n	8000c6e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c36:	4813      	ldr	r0, [pc, #76]	; (8000c84 <HAL_InitTick+0xd4>)
 8000c38:	f002 fb66 	bl	8003308 <HAL_TIM_Base_Start_IT>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d111      	bne.n	8000c6e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c4a:	2019      	movs	r0, #25
 8000c4c:	f000 f9ea 	bl	8001024 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b0f      	cmp	r3, #15
 8000c54:	d808      	bhi.n	8000c68 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000c56:	2200      	movs	r2, #0
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	2019      	movs	r0, #25
 8000c5c:	f000 f9c6 	bl	8000fec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c60:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <HAL_InitTick+0xdc>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e002      	b.n	8000c6e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3730      	adds	r7, #48	; 0x30
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	431bde83 	.word	0x431bde83
 8000c84:	2000075c 	.word	0x2000075c
 8000c88:	40012c00 	.word	0x40012c00
 8000c8c:	20000004 	.word	0x20000004

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000cc2:	f002 fb8b 	bl	80033dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000075c 	.word	0x2000075c

08000cd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <USART1_IRQHandler+0x10>)
 8000cd6:	f002 fe4f 	bl	8003978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200003d4 	.word	0x200003d4

08000ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cec:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <_sbrk+0x5c>)
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <_sbrk+0x60>)
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <_sbrk+0x64>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <_sbrk+0x68>)
 8000d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <_sbrk+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d207      	bcs.n	8000d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d14:	f005 ff00 	bl	8006b18 <__errno>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	e009      	b.n	8000d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <_sbrk+0x64>)
 8000d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	2000a000 	.word	0x2000a000
 8000d44:	00000400 	.word	0x00000400
 8000d48:	200007a8 	.word	0x200007a8
 8000d4c:	20001648 	.word	0x20001648

08000d50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <SystemInit+0x20>)
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <SystemInit+0x20>)
 8000d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d78:	f7ff ffea 	bl	8000d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d7c:	480c      	ldr	r0, [pc, #48]	; (8000db0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d7e:	490d      	ldr	r1, [pc, #52]	; (8000db4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d80:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <LoopForever+0xe>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d94:	4c0a      	ldr	r4, [pc, #40]	; (8000dc0 <LoopForever+0x16>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da2:	f005 febf 	bl	8006b24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000da6:	f7ff faaf 	bl	8000308 <main>

08000daa <LoopForever>:

LoopForever:
    b LoopForever
 8000daa:	e7fe      	b.n	8000daa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dac:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000db8:	08007638 	.word	0x08007638
  ldr r2, =_sbss
 8000dbc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000dc0:	20001644 	.word	0x20001644

08000dc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC1_2_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_Init+0x28>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_Init+0x28>)
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f8fc 	bl	8000fd6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	200f      	movs	r0, #15
 8000de0:	f7ff fee6 	bl	8000bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de4:	f7ff fda6 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40022000 	.word	0x40022000

08000df4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000008 	.word	0x20000008
 8000e18:	200007ac 	.word	0x200007ac

08000e1c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	200007ac 	.word	0x200007ac

08000e34 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e3c:	f7ff ffee 	bl	8000e1c <HAL_GetTick>
 8000e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4c:	d005      	beq.n	8000e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_Delay+0x44>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e5a:	bf00      	nop
 8000e5c:	f7ff ffde 	bl	8000e1c <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d8f7      	bhi.n	8000e5c <HAL_Delay+0x28>
  {
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008

08000e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eae:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	60d3      	str	r3, [r2, #12]
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <__NVIC_GetPriorityGrouping+0x18>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	0a1b      	lsrs	r3, r3, #8
 8000ece:	f003 0307 	and.w	r3, r3, #7
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	db0b      	blt.n	8000f0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f003 021f 	and.w	r2, r3, #31
 8000ef8:	4907      	ldr	r1, [pc, #28]	; (8000f18 <__NVIC_EnableIRQ+0x38>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	095b      	lsrs	r3, r3, #5
 8000f00:	2001      	movs	r0, #1
 8000f02:	fa00 f202 	lsl.w	r2, r0, r2
 8000f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000e100 	.word	0xe000e100

08000f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db0a      	blt.n	8000f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	490c      	ldr	r1, [pc, #48]	; (8000f68 <__NVIC_SetPriority+0x4c>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f44:	e00a      	b.n	8000f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4908      	ldr	r1, [pc, #32]	; (8000f6c <__NVIC_SetPriority+0x50>)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	3b04      	subs	r3, #4
 8000f54:	0112      	lsls	r2, r2, #4
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	440b      	add	r3, r1
 8000f5a:	761a      	strb	r2, [r3, #24]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000e100 	.word	0xe000e100
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f1c3 0307 	rsb	r3, r3, #7
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	bf28      	it	cs
 8000f8e:	2304      	movcs	r3, #4
 8000f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3304      	adds	r3, #4
 8000f96:	2b06      	cmp	r3, #6
 8000f98:	d902      	bls.n	8000fa0 <NVIC_EncodePriority+0x30>
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3b03      	subs	r3, #3
 8000f9e:	e000      	b.n	8000fa2 <NVIC_EncodePriority+0x32>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	43d9      	mvns	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	4313      	orrs	r3, r2
         );
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3724      	adds	r7, #36	; 0x24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ff4c 	bl	8000e7c <__NVIC_SetPriorityGrouping>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffe:	f7ff ff61 	bl	8000ec4 <__NVIC_GetPriorityGrouping>
 8001002:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	68b9      	ldr	r1, [r7, #8]
 8001008:	6978      	ldr	r0, [r7, #20]
 800100a:	f7ff ffb1 	bl	8000f70 <NVIC_EncodePriority>
 800100e:	4602      	mov	r2, r0
 8001010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001014:	4611      	mov	r1, r2
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff80 	bl	8000f1c <__NVIC_SetPriority>
}
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ff54 	bl	8000ee0 <__NVIC_EnableIRQ>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800104e:	2b02      	cmp	r3, #2
 8001050:	d008      	beq.n	8001064 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2204      	movs	r2, #4
 8001056:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e020      	b.n	80010a6 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 020e 	bic.w	r2, r2, #14
 8001072:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0201 	bic.w	r2, r2, #1
 8001082:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800108c:	2101      	movs	r1, #1
 800108e:	fa01 f202 	lsl.w	r2, r1, r2
 8001092:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d005      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2204      	movs	r2, #4
 80010cc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	e027      	b.n	8001124 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 020e 	bic.w	r2, r2, #14
 80010e2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0201 	bic.w	r2, r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fc:	2101      	movs	r1, #1
 80010fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001102:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	4798      	blx	r3
    } 
  }
  return status;
 8001124:	7bfb      	ldrb	r3, [r7, #15]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001130:	b480      	push	{r7}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113e:	e154      	b.n	80013ea <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2101      	movs	r1, #1
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	4013      	ands	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8146 	beq.w	80013e4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b01      	cmp	r3, #1
 8001162:	d005      	beq.n	8001170 <HAL_GPIO_Init+0x40>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d130      	bne.n	80011d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a6:	2201      	movs	r2, #1
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	091b      	lsrs	r3, r3, #4
 80011bc:	f003 0201 	and.w	r2, r3, #1
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d017      	beq.n	800120e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d123      	bne.n	8001262 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	08da      	lsrs	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3208      	adds	r2, #8
 8001222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	6939      	ldr	r1, [r7, #16]
 800125e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	2203      	movs	r2, #3
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0203 	and.w	r2, r3, #3
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 80a0 	beq.w	80013e4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a4:	4b58      	ldr	r3, [pc, #352]	; (8001408 <HAL_GPIO_Init+0x2d8>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a57      	ldr	r2, [pc, #348]	; (8001408 <HAL_GPIO_Init+0x2d8>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b55      	ldr	r3, [pc, #340]	; (8001408 <HAL_GPIO_Init+0x2d8>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012bc:	4a53      	ldr	r2, [pc, #332]	; (800140c <HAL_GPIO_Init+0x2dc>)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	220f      	movs	r2, #15
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012e6:	d019      	beq.n	800131c <HAL_GPIO_Init+0x1ec>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a49      	ldr	r2, [pc, #292]	; (8001410 <HAL_GPIO_Init+0x2e0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d013      	beq.n	8001318 <HAL_GPIO_Init+0x1e8>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a48      	ldr	r2, [pc, #288]	; (8001414 <HAL_GPIO_Init+0x2e4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d00d      	beq.n	8001314 <HAL_GPIO_Init+0x1e4>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a47      	ldr	r2, [pc, #284]	; (8001418 <HAL_GPIO_Init+0x2e8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d007      	beq.n	8001310 <HAL_GPIO_Init+0x1e0>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a46      	ldr	r2, [pc, #280]	; (800141c <HAL_GPIO_Init+0x2ec>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d101      	bne.n	800130c <HAL_GPIO_Init+0x1dc>
 8001308:	2304      	movs	r3, #4
 800130a:	e008      	b.n	800131e <HAL_GPIO_Init+0x1ee>
 800130c:	2305      	movs	r3, #5
 800130e:	e006      	b.n	800131e <HAL_GPIO_Init+0x1ee>
 8001310:	2303      	movs	r3, #3
 8001312:	e004      	b.n	800131e <HAL_GPIO_Init+0x1ee>
 8001314:	2302      	movs	r3, #2
 8001316:	e002      	b.n	800131e <HAL_GPIO_Init+0x1ee>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <HAL_GPIO_Init+0x1ee>
 800131c:	2300      	movs	r3, #0
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	f002 0203 	and.w	r2, r2, #3
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	4093      	lsls	r3, r2
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800132e:	4937      	ldr	r1, [pc, #220]	; (800140c <HAL_GPIO_Init+0x2dc>)
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800133c:	4b38      	ldr	r3, [pc, #224]	; (8001420 <HAL_GPIO_Init+0x2f0>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001360:	4a2f      	ldr	r2, [pc, #188]	; (8001420 <HAL_GPIO_Init+0x2f0>)
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001366:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <HAL_GPIO_Init+0x2f0>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	43db      	mvns	r3, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800138a:	4a25      	ldr	r2, [pc, #148]	; (8001420 <HAL_GPIO_Init+0x2f0>)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001390:	4b23      	ldr	r3, [pc, #140]	; (8001420 <HAL_GPIO_Init+0x2f0>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013b4:	4a1a      	ldr	r2, [pc, #104]	; (8001420 <HAL_GPIO_Init+0x2f0>)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_GPIO_Init+0x2f0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013de:	4a10      	ldr	r2, [pc, #64]	; (8001420 <HAL_GPIO_Init+0x2f0>)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	fa22 f303 	lsr.w	r3, r2, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f47f aea3 	bne.w	8001140 <HAL_GPIO_Init+0x10>
  }
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	371c      	adds	r7, #28
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40021000 	.word	0x40021000
 800140c:	40010000 	.word	0x40010000
 8001410:	48000400 	.word	0x48000400
 8001414:	48000800 	.word	0x48000800
 8001418:	48000c00 	.word	0x48000c00
 800141c:	48001000 	.word	0x48001000
 8001420:	40010400 	.word	0x40010400

08001424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
 8001430:	4613      	mov	r3, r2
 8001432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001434:	787b      	ldrb	r3, [r7, #1]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800143a:	887a      	ldrh	r2, [r7, #2]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001440:	e002      	b.n	8001448 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e081      	b.n	800156a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d106      	bne.n	8001480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fa82 	bl	8000984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2224      	movs	r2, #36	; 0x24
 8001484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0201 	bic.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d107      	bne.n	80014ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	e006      	b.n	80014dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80014da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d104      	bne.n	80014ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001500:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001510:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691a      	ldr	r2, [r3, #16]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69d9      	ldr	r1, [r3, #28]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1a      	ldr	r2, [r3, #32]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0201 	orr.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2220      	movs	r2, #32
 8001556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b20      	cmp	r3, #32
 8001586:	d138      	bne.n	80015fa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001592:	2302      	movs	r3, #2
 8001594:	e032      	b.n	80015fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2224      	movs	r2, #36	; 0x24
 80015a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0201 	bic.w	r2, r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015c4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6819      	ldr	r1, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0201 	orr.w	r2, r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2220      	movs	r2, #32
 80015ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015fa:	2302      	movs	r3, #2
  }
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b20      	cmp	r3, #32
 800161c:	d139      	bne.n	8001692 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001628:	2302      	movs	r3, #2
 800162a:	e033      	b.n	8001694 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2224      	movs	r2, #36	; 0x24
 8001638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0201 	bic.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800165a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	4313      	orrs	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0201 	orr.w	r2, r2, #1
 800167c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2220      	movs	r2, #32
 8001682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	e000      	b.n	8001694 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001692:	2302      	movs	r3, #2
  }
}
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a2:	b08b      	sub	sp, #44	; 0x2c
 80016a4:	af06      	add	r7, sp, #24
 80016a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e0c4      	b.n	800183c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d106      	bne.n	80016cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fa2e 	bl	8000b28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2203      	movs	r2, #3
 80016d0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f003 f886 	bl	80047ea <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016de:	2300      	movs	r3, #0
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	e040      	b.n	8001766 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	440b      	add	r3, r1
 80016f4:	3301      	adds	r3, #1
 80016f6:	2201      	movs	r2, #1
 80016f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	440b      	add	r3, r1
 800170a:	7bfa      	ldrb	r2, [r7, #15]
 800170c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	3303      	adds	r3, #3
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	3338      	adds	r3, #56	; 0x38
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001738:	7bfa      	ldrb	r2, [r7, #15]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	440b      	add	r3, r1
 8001746:	333c      	adds	r3, #60	; 0x3c
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	440b      	add	r3, r1
 800175a:	3340      	adds	r3, #64	; 0x40
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	3301      	adds	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	d3b9      	bcc.n	80016e4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	e044      	b.n	8001800 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001776:	7bfa      	ldrb	r2, [r7, #15]
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	440b      	add	r3, r1
 8001784:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800178c:	7bfa      	ldrb	r2, [r7, #15]
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	440b      	add	r3, r1
 800179a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800179e:	7bfa      	ldrb	r2, [r7, #15]
 80017a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017a2:	7bfa      	ldrb	r2, [r7, #15]
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	440b      	add	r3, r1
 80017b0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017b8:	7bfa      	ldrb	r2, [r7, #15]
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	440b      	add	r3, r1
 80017c6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017ce:	7bfa      	ldrb	r2, [r7, #15]
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	440b      	add	r3, r1
 80017dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017e4:	7bfa      	ldrb	r2, [r7, #15]
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	440b      	add	r3, r1
 80017f2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	3301      	adds	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	429a      	cmp	r2, r3
 8001808:	d3b5      	bcc.n	8001776 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	687e      	ldr	r6, [r7, #4]
 8001812:	466d      	mov	r5, sp
 8001814:	f106 0410 	add.w	r4, r6, #16
 8001818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	602b      	str	r3, [r5, #0]
 8001820:	1d33      	adds	r3, r6, #4
 8001822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001824:	6838      	ldr	r0, [r7, #0]
 8001826:	f002 fffb 	bl	8004820 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800184a:	af00      	add	r7, sp, #0
 800184c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001850:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001854:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	f001 b823 	b.w	80028b0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 817d 	beq.w	8001b7a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001880:	4bbc      	ldr	r3, [pc, #752]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 030c 	and.w	r3, r3, #12
 8001888:	2b04      	cmp	r3, #4
 800188a:	d00c      	beq.n	80018a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800188c:	4bb9      	ldr	r3, [pc, #740]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b08      	cmp	r3, #8
 8001896:	d15c      	bne.n	8001952 <HAL_RCC_OscConfig+0x10e>
 8001898:	4bb6      	ldr	r3, [pc, #728]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a4:	d155      	bne.n	8001952 <HAL_RCC_OscConfig+0x10e>
 80018a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018aa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018be:	fab3 f383 	clz	r3, r3
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	095b      	lsrs	r3, r3, #5
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d102      	bne.n	80018d8 <HAL_RCC_OscConfig+0x94>
 80018d2:	4ba8      	ldr	r3, [pc, #672]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	e015      	b.n	8001904 <HAL_RCC_OscConfig+0xc0>
 80018d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018dc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80018e4:	fa93 f3a3 	rbit	r3, r3
 80018e8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80018ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80018f4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001900:	4b9c      	ldr	r3, [pc, #624]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001908:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800190c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001910:	fa92 f2a2 	rbit	r2, r2
 8001914:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001918:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800191c:	fab2 f282 	clz	r2, r2
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	f042 0220 	orr.w	r2, r2, #32
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	f002 021f 	and.w	r2, r2, #31
 800192c:	2101      	movs	r1, #1
 800192e:	fa01 f202 	lsl.w	r2, r1, r2
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 811f 	beq.w	8001b78 <HAL_RCC_OscConfig+0x334>
 800193a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f040 8116 	bne.w	8001b78 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	f000 bfaf 	b.w	80028b0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001956:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001962:	d106      	bne.n	8001972 <HAL_RCC_OscConfig+0x12e>
 8001964:	4b83      	ldr	r3, [pc, #524]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a82      	ldr	r2, [pc, #520]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 800196a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e036      	b.n	80019e0 <HAL_RCC_OscConfig+0x19c>
 8001972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001976:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0x158>
 8001982:	4b7c      	ldr	r3, [pc, #496]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a7b      	ldr	r2, [pc, #492]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 8001988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b79      	ldr	r3, [pc, #484]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a78      	ldr	r2, [pc, #480]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 8001994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e021      	b.n	80019e0 <HAL_RCC_OscConfig+0x19c>
 800199c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ac:	d10c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x184>
 80019ae:	4b71      	ldr	r3, [pc, #452]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a70      	ldr	r2, [pc, #448]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 80019b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b6e      	ldr	r3, [pc, #440]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a6d      	ldr	r2, [pc, #436]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e00b      	b.n	80019e0 <HAL_RCC_OscConfig+0x19c>
 80019c8:	4b6a      	ldr	r3, [pc, #424]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a69      	ldr	r2, [pc, #420]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 80019ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b67      	ldr	r3, [pc, #412]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a66      	ldr	r2, [pc, #408]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 80019da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019de:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019e0:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	f023 020f 	bic.w	r2, r3, #15
 80019e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	495f      	ldr	r1, [pc, #380]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d059      	beq.n	8001abe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fa07 	bl	8000e1c <HAL_GetTick>
 8001a0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	e00a      	b.n	8001a2a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff fa02 	bl	8000e1c <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b64      	cmp	r3, #100	; 0x64
 8001a22:	d902      	bls.n	8001a2a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	f000 bf43 	b.w	80028b0 <HAL_RCC_OscConfig+0x106c>
 8001a2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a2e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a36:	fa93 f3a3 	rbit	r3, r3
 8001a3a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a3e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	fab3 f383 	clz	r3, r3
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	095b      	lsrs	r3, r3, #5
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d102      	bne.n	8001a5c <HAL_RCC_OscConfig+0x218>
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	e015      	b.n	8001a88 <HAL_RCC_OscConfig+0x244>
 8001a5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a60:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a74:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a78:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001a7c:	fa93 f3a3 	rbit	r3, r3
 8001a80:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001a84:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a8c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001a90:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a94:	fa92 f2a2 	rbit	r2, r2
 8001a98:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001a9c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001aa0:	fab2 f282 	clz	r2, r2
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	f042 0220 	orr.w	r2, r2, #32
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	f002 021f 	and.w	r2, r2, #31
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0ab      	beq.n	8001a14 <HAL_RCC_OscConfig+0x1d0>
 8001abc:	e05d      	b.n	8001b7a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abe:	f7ff f9ad 	bl	8000e1c <HAL_GetTick>
 8001ac2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac8:	f7ff f9a8 	bl	8000e1c <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b64      	cmp	r3, #100	; 0x64
 8001ad6:	d902      	bls.n	8001ade <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	f000 bee9 	b.w	80028b0 <HAL_RCC_OscConfig+0x106c>
 8001ade:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001af2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	095b      	lsrs	r3, r3, #5
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d102      	bne.n	8001b10 <HAL_RCC_OscConfig+0x2cc>
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	e015      	b.n	8001b3c <HAL_RCC_OscConfig+0x2f8>
 8001b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b14:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b18:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b1c:	fa93 f3a3 	rbit	r3, r3
 8001b20:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b28:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b2c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <HAL_RCC_OscConfig+0x330>)
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b40:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b44:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b48:	fa92 f2a2 	rbit	r2, r2
 8001b4c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b50:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b54:	fab2 f282 	clz	r2, r2
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	f042 0220 	orr.w	r2, r2, #32
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	f002 021f 	and.w	r2, r2, #31
 8001b64:	2101      	movs	r1, #1
 8001b66:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1ab      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x284>
 8001b70:	e003      	b.n	8001b7a <HAL_RCC_OscConfig+0x336>
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 817d 	beq.w	8001e8a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b90:	4ba6      	ldr	r3, [pc, #664]	; (8001e2c <HAL_RCC_OscConfig+0x5e8>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00b      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b9c:	4ba3      	ldr	r3, [pc, #652]	; (8001e2c <HAL_RCC_OscConfig+0x5e8>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d172      	bne.n	8001c8e <HAL_RCC_OscConfig+0x44a>
 8001ba8:	4ba0      	ldr	r3, [pc, #640]	; (8001e2c <HAL_RCC_OscConfig+0x5e8>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d16c      	bne.n	8001c8e <HAL_RCC_OscConfig+0x44a>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001bc6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	095b      	lsrs	r3, r3, #5
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d102      	bne.n	8001be4 <HAL_RCC_OscConfig+0x3a0>
 8001bde:	4b93      	ldr	r3, [pc, #588]	; (8001e2c <HAL_RCC_OscConfig+0x5e8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	e013      	b.n	8001c0c <HAL_RCC_OscConfig+0x3c8>
 8001be4:	2302      	movs	r3, #2
 8001be6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001bfc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c08:	4b88      	ldr	r3, [pc, #544]	; (8001e2c <HAL_RCC_OscConfig+0x5e8>)
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c12:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c16:	fa92 f2a2 	rbit	r2, r2
 8001c1a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c1e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c22:	fab2 f282 	clz	r2, r2
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	f042 0220 	orr.w	r2, r2, #32
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	f002 021f 	and.w	r2, r2, #31
 8001c32:	2101      	movs	r1, #1
 8001c34:	fa01 f202 	lsl.w	r2, r1, r2
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00a      	beq.n	8001c54 <HAL_RCC_OscConfig+0x410>
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d002      	beq.n	8001c54 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f000 be2e 	b.w	80028b0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c54:	4b75      	ldr	r3, [pc, #468]	; (8001e2c <HAL_RCC_OscConfig+0x5e8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	21f8      	movs	r1, #248	; 0xf8
 8001c6a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c72:	fa91 f1a1 	rbit	r1, r1
 8001c76:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001c7a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001c7e:	fab1 f181 	clz	r1, r1
 8001c82:	b2c9      	uxtb	r1, r1
 8001c84:	408b      	lsls	r3, r1
 8001c86:	4969      	ldr	r1, [pc, #420]	; (8001e2c <HAL_RCC_OscConfig+0x5e8>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8c:	e0fd      	b.n	8001e8a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 8088 	beq.w	8001db0 <HAL_RCC_OscConfig+0x56c>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001cb2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	2301      	movs	r3, #1
 8001cca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f8a6 	bl	8000e1c <HAL_GetTick>
 8001cd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	e00a      	b.n	8001cec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd6:	f7ff f8a1 	bl	8000e1c <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d902      	bls.n	8001cec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	f000 bde2 	b.w	80028b0 <HAL_RCC_OscConfig+0x106c>
 8001cec:	2302      	movs	r3, #2
 8001cee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001cfe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d02:	fab3 f383 	clz	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	095b      	lsrs	r3, r3, #5
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d102      	bne.n	8001d1c <HAL_RCC_OscConfig+0x4d8>
 8001d16:	4b45      	ldr	r3, [pc, #276]	; (8001e2c <HAL_RCC_OscConfig+0x5e8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	e013      	b.n	8001d44 <HAL_RCC_OscConfig+0x500>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d2e:	2302      	movs	r3, #2
 8001d30:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d34:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d40:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <HAL_RCC_OscConfig+0x5e8>)
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	2202      	movs	r2, #2
 8001d46:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d4a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d4e:	fa92 f2a2 	rbit	r2, r2
 8001d52:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001d56:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d5a:	fab2 f282 	clz	r2, r2
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	f042 0220 	orr.w	r2, r2, #32
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	f002 021f 	and.w	r2, r2, #31
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0af      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d76:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <HAL_RCC_OscConfig+0x5e8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	21f8      	movs	r1, #248	; 0xf8
 8001d8c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d94:	fa91 f1a1 	rbit	r1, r1
 8001d98:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001d9c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001da0:	fab1 f181 	clz	r1, r1
 8001da4:	b2c9      	uxtb	r1, r1
 8001da6:	408b      	lsls	r3, r1
 8001da8:	4920      	ldr	r1, [pc, #128]	; (8001e2c <HAL_RCC_OscConfig+0x5e8>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
 8001dae:	e06c      	b.n	8001e8a <HAL_RCC_OscConfig+0x646>
 8001db0:	2301      	movs	r3, #1
 8001db2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001dba:	fa93 f3a3 	rbit	r3, r3
 8001dbe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001dc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	2300      	movs	r3, #0
 8001dda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7ff f81e 	bl	8000e1c <HAL_GetTick>
 8001de0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de6:	f7ff f819 	bl	8000e1c <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d902      	bls.n	8001dfc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	f000 bd5a 	b.w	80028b0 <HAL_RCC_OscConfig+0x106c>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	095b      	lsrs	r3, r3, #5
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d104      	bne.n	8001e30 <HAL_RCC_OscConfig+0x5ec>
 8001e26:	4b01      	ldr	r3, [pc, #4]	; (8001e2c <HAL_RCC_OscConfig+0x5e8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	e015      	b.n	8001e58 <HAL_RCC_OscConfig+0x614>
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	2302      	movs	r3, #2
 8001e32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e42:	2302      	movs	r3, #2
 8001e44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e54:	4bc8      	ldr	r3, [pc, #800]	; (8002178 <HAL_RCC_OscConfig+0x934>)
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	2202      	movs	r2, #2
 8001e5a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001e5e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e62:	fa92 f2a2 	rbit	r2, r2
 8001e66:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001e6a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e6e:	fab2 f282 	clz	r2, r2
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	f042 0220 	orr.w	r2, r2, #32
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	f002 021f 	and.w	r2, r2, #31
 8001e7e:	2101      	movs	r1, #1
 8001e80:	fa01 f202 	lsl.w	r2, r1, r2
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1ad      	bne.n	8001de6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8110 	beq.w	80020c0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d079      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x760>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4bab      	ldr	r3, [pc, #684]	; (800217c <HAL_RCC_OscConfig+0x938>)
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eda:	f7fe ff9f 	bl	8000e1c <HAL_GetTick>
 8001ede:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee4:	f7fe ff9a 	bl	8000e1c <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d902      	bls.n	8001efa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	f000 bcdb 	b.w	80028b0 <HAL_RCC_OscConfig+0x106c>
 8001efa:	2302      	movs	r3, #2
 8001efc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f04:	fa93 f3a3 	rbit	r3, r3
 8001f08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f10:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f14:	2202      	movs	r2, #2
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	fa93 f2a3 	rbit	r2, r3
 8001f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f38:	2202      	movs	r2, #2
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	fa93 f2a3 	rbit	r2, r3
 8001f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f52:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f54:	4b88      	ldr	r3, [pc, #544]	; (8002178 <HAL_RCC_OscConfig+0x934>)
 8001f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f60:	2102      	movs	r1, #2
 8001f62:	6019      	str	r1, [r3, #0]
 8001f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	fa93 f1a3 	rbit	r1, r3
 8001f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f7a:	6019      	str	r1, [r3, #0]
  return result;
 8001f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f80:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	2101      	movs	r1, #1
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0a0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x6a0>
 8001fa2:	e08d      	b.n	80020c0 <HAL_RCC_OscConfig+0x87c>
 8001fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	fa93 f2a3 	rbit	r2, r3
 8001fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001fc6:	601a      	str	r2, [r3, #0]
  return result;
 8001fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fcc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001fd0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b68      	ldr	r3, [pc, #416]	; (800217c <HAL_RCC_OscConfig+0x938>)
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe6:	f7fe ff19 	bl	8000e1c <HAL_GetTick>
 8001fea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff0:	f7fe ff14 	bl	8000e1c <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d902      	bls.n	8002006 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	f000 bc55 	b.w	80028b0 <HAL_RCC_OscConfig+0x106c>
 8002006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800200e:	2202      	movs	r2, #2
 8002010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002016:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	fa93 f2a3 	rbit	r2, r3
 8002020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002024:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002032:	2202      	movs	r2, #2
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	fa93 f2a3 	rbit	r2, r3
 8002044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002048:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002056:	2202      	movs	r2, #2
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	fa93 f2a3 	rbit	r2, r3
 8002068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002070:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002072:	4b41      	ldr	r3, [pc, #260]	; (8002178 <HAL_RCC_OscConfig+0x934>)
 8002074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800207e:	2102      	movs	r1, #2
 8002080:	6019      	str	r1, [r3, #0]
 8002082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002086:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	fa93 f1a3 	rbit	r1, r3
 8002090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002094:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002098:	6019      	str	r1, [r3, #0]
  return result;
 800209a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	fab3 f383 	clz	r3, r3
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	2101      	movs	r1, #1
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d197      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 81a1 	beq.w	8002418 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020dc:	4b26      	ldr	r3, [pc, #152]	; (8002178 <HAL_RCC_OscConfig+0x934>)
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d116      	bne.n	8002116 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e8:	4b23      	ldr	r3, [pc, #140]	; (8002178 <HAL_RCC_OscConfig+0x934>)
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	4a22      	ldr	r2, [pc, #136]	; (8002178 <HAL_RCC_OscConfig+0x934>)
 80020ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f2:	61d3      	str	r3, [r2, #28]
 80020f4:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_RCC_OscConfig+0x934>)
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80020fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002100:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800210e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002110:	2301      	movs	r3, #1
 8002112:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <HAL_RCC_OscConfig+0x93c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d11a      	bne.n	8002158 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002122:	4b17      	ldr	r3, [pc, #92]	; (8002180 <HAL_RCC_OscConfig+0x93c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a16      	ldr	r2, [pc, #88]	; (8002180 <HAL_RCC_OscConfig+0x93c>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212e:	f7fe fe75 	bl	8000e1c <HAL_GetTick>
 8002132:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002136:	e009      	b.n	800214c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002138:	f7fe fe70 	bl	8000e1c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b64      	cmp	r3, #100	; 0x64
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e3b1      	b.n	80028b0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <HAL_RCC_OscConfig+0x93c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0ef      	beq.n	8002138 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d10d      	bne.n	8002184 <HAL_RCC_OscConfig+0x940>
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_RCC_OscConfig+0x934>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4a02      	ldr	r2, [pc, #8]	; (8002178 <HAL_RCC_OscConfig+0x934>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6213      	str	r3, [r2, #32]
 8002174:	e03c      	b.n	80021f0 <HAL_RCC_OscConfig+0x9ac>
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
 800217c:	10908120 	.word	0x10908120
 8002180:	40007000 	.word	0x40007000
 8002184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002188:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10c      	bne.n	80021ae <HAL_RCC_OscConfig+0x96a>
 8002194:	4bc1      	ldr	r3, [pc, #772]	; (800249c <HAL_RCC_OscConfig+0xc58>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4ac0      	ldr	r2, [pc, #768]	; (800249c <HAL_RCC_OscConfig+0xc58>)
 800219a:	f023 0301 	bic.w	r3, r3, #1
 800219e:	6213      	str	r3, [r2, #32]
 80021a0:	4bbe      	ldr	r3, [pc, #760]	; (800249c <HAL_RCC_OscConfig+0xc58>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4abd      	ldr	r2, [pc, #756]	; (800249c <HAL_RCC_OscConfig+0xc58>)
 80021a6:	f023 0304 	bic.w	r3, r3, #4
 80021aa:	6213      	str	r3, [r2, #32]
 80021ac:	e020      	b.n	80021f0 <HAL_RCC_OscConfig+0x9ac>
 80021ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b05      	cmp	r3, #5
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x994>
 80021be:	4bb7      	ldr	r3, [pc, #732]	; (800249c <HAL_RCC_OscConfig+0xc58>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4ab6      	ldr	r2, [pc, #728]	; (800249c <HAL_RCC_OscConfig+0xc58>)
 80021c4:	f043 0304 	orr.w	r3, r3, #4
 80021c8:	6213      	str	r3, [r2, #32]
 80021ca:	4bb4      	ldr	r3, [pc, #720]	; (800249c <HAL_RCC_OscConfig+0xc58>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4ab3      	ldr	r2, [pc, #716]	; (800249c <HAL_RCC_OscConfig+0xc58>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6213      	str	r3, [r2, #32]
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0x9ac>
 80021d8:	4bb0      	ldr	r3, [pc, #704]	; (800249c <HAL_RCC_OscConfig+0xc58>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4aaf      	ldr	r2, [pc, #700]	; (800249c <HAL_RCC_OscConfig+0xc58>)
 80021de:	f023 0301 	bic.w	r3, r3, #1
 80021e2:	6213      	str	r3, [r2, #32]
 80021e4:	4bad      	ldr	r3, [pc, #692]	; (800249c <HAL_RCC_OscConfig+0xc58>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4aac      	ldr	r2, [pc, #688]	; (800249c <HAL_RCC_OscConfig+0xc58>)
 80021ea:	f023 0304 	bic.w	r3, r3, #4
 80021ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 8081 	beq.w	8002304 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002202:	f7fe fe0b 	bl	8000e1c <HAL_GetTick>
 8002206:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220a:	e00b      	b.n	8002224 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220c:	f7fe fe06 	bl	8000e1c <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	; 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e345      	b.n	80028b0 <HAL_RCC_OscConfig+0x106c>
 8002224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002228:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800222c:	2202      	movs	r2, #2
 800222e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002234:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	fa93 f2a3 	rbit	r2, r3
 800223e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002242:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002250:	2202      	movs	r2, #2
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002258:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	fa93 f2a3 	rbit	r2, r3
 8002262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002266:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800226a:	601a      	str	r2, [r3, #0]
  return result;
 800226c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002270:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002274:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	b2db      	uxtb	r3, r3
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d102      	bne.n	8002290 <HAL_RCC_OscConfig+0xa4c>
 800228a:	4b84      	ldr	r3, [pc, #528]	; (800249c <HAL_RCC_OscConfig+0xc58>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	e013      	b.n	80022b8 <HAL_RCC_OscConfig+0xa74>
 8002290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002294:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002298:	2202      	movs	r2, #2
 800229a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	fa93 f2a3 	rbit	r2, r3
 80022aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	4b79      	ldr	r3, [pc, #484]	; (800249c <HAL_RCC_OscConfig+0xc58>)
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80022c0:	2102      	movs	r1, #2
 80022c2:	6011      	str	r1, [r2, #0]
 80022c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	fa92 f1a2 	rbit	r1, r2
 80022d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022d6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022da:	6011      	str	r1, [r2, #0]
  return result;
 80022dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022e0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	fab2 f282 	clz	r2, r2
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	f002 021f 	and.w	r2, r2, #31
 80022f6:	2101      	movs	r1, #1
 80022f8:	fa01 f202 	lsl.w	r2, r1, r2
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d084      	beq.n	800220c <HAL_RCC_OscConfig+0x9c8>
 8002302:	e07f      	b.n	8002404 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002304:	f7fe fd8a 	bl	8000e1c <HAL_GetTick>
 8002308:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230c:	e00b      	b.n	8002326 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7fe fd85 	bl	8000e1c <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	; 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e2c4      	b.n	80028b0 <HAL_RCC_OscConfig+0x106c>
 8002326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800232e:	2202      	movs	r2, #2
 8002330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002336:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	fa93 f2a3 	rbit	r2, r3
 8002340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002344:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002352:	2202      	movs	r2, #2
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	fa93 f2a3 	rbit	r2, r3
 8002364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002368:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800236c:	601a      	str	r2, [r3, #0]
  return result;
 800236e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002372:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002376:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002378:	fab3 f383 	clz	r3, r3
 800237c:	b2db      	uxtb	r3, r3
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	b2db      	uxtb	r3, r3
 8002382:	f043 0302 	orr.w	r3, r3, #2
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d102      	bne.n	8002392 <HAL_RCC_OscConfig+0xb4e>
 800238c:	4b43      	ldr	r3, [pc, #268]	; (800249c <HAL_RCC_OscConfig+0xc58>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	e013      	b.n	80023ba <HAL_RCC_OscConfig+0xb76>
 8002392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002396:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800239a:	2202      	movs	r2, #2
 800239c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	fa93 f2a3 	rbit	r2, r3
 80023ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	4b39      	ldr	r3, [pc, #228]	; (800249c <HAL_RCC_OscConfig+0xc58>)
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80023c2:	2102      	movs	r1, #2
 80023c4:	6011      	str	r1, [r2, #0]
 80023c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	fa92 f1a2 	rbit	r1, r2
 80023d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023d8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80023dc:	6011      	str	r1, [r2, #0]
  return result;
 80023de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023e2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	fab2 f282 	clz	r2, r2
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	f002 021f 	and.w	r2, r2, #31
 80023f8:	2101      	movs	r1, #1
 80023fa:	fa01 f202 	lsl.w	r2, r1, r2
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d184      	bne.n	800230e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002404:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002408:	2b01      	cmp	r3, #1
 800240a:	d105      	bne.n	8002418 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240c:	4b23      	ldr	r3, [pc, #140]	; (800249c <HAL_RCC_OscConfig+0xc58>)
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	4a22      	ldr	r2, [pc, #136]	; (800249c <HAL_RCC_OscConfig+0xc58>)
 8002412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002416:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 8242 	beq.w	80028ae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800242a:	4b1c      	ldr	r3, [pc, #112]	; (800249c <HAL_RCC_OscConfig+0xc58>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b08      	cmp	r3, #8
 8002434:	f000 8213 	beq.w	800285e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	2b02      	cmp	r3, #2
 8002446:	f040 8162 	bne.w	800270e <HAL_RCC_OscConfig+0xeca>
 800244a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002452:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	fa93 f2a3 	rbit	r2, r3
 8002466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800246e:	601a      	str	r2, [r3, #0]
  return result;
 8002470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002474:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002478:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002484:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	461a      	mov	r2, r3
 800248c:	2300      	movs	r3, #0
 800248e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7fe fcc4 	bl	8000e1c <HAL_GetTick>
 8002494:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002498:	e00c      	b.n	80024b4 <HAL_RCC_OscConfig+0xc70>
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a0:	f7fe fcbc 	bl	8000e1c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e1fd      	b.n	80028b0 <HAL_RCC_OscConfig+0x106c>
 80024b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	fa93 f2a3 	rbit	r2, r3
 80024d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024d8:	601a      	str	r2, [r3, #0]
  return result;
 80024da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024de:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e4:	fab3 f383 	clz	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d102      	bne.n	80024fe <HAL_RCC_OscConfig+0xcba>
 80024f8:	4bb0      	ldr	r3, [pc, #704]	; (80027bc <HAL_RCC_OscConfig+0xf78>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	e027      	b.n	800254e <HAL_RCC_OscConfig+0xd0a>
 80024fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002502:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002506:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800250a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002510:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	fa93 f2a3 	rbit	r2, r3
 800251a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002528:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800252c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	fa93 f2a3 	rbit	r2, r3
 8002540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002544:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	4b9c      	ldr	r3, [pc, #624]	; (80027bc <HAL_RCC_OscConfig+0xf78>)
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002552:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002556:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800255a:	6011      	str	r1, [r2, #0]
 800255c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002560:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	fa92 f1a2 	rbit	r1, r2
 800256a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800256e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002572:	6011      	str	r1, [r2, #0]
  return result;
 8002574:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002578:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	fab2 f282 	clz	r2, r2
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	f042 0220 	orr.w	r2, r2, #32
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	f002 021f 	and.w	r2, r2, #31
 800258e:	2101      	movs	r1, #1
 8002590:	fa01 f202 	lsl.w	r2, r1, r2
 8002594:	4013      	ands	r3, r2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d182      	bne.n	80024a0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800259a:	4b88      	ldr	r3, [pc, #544]	; (80027bc <HAL_RCC_OscConfig+0xf78>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	430b      	orrs	r3, r1
 80025bc:	497f      	ldr	r1, [pc, #508]	; (80027bc <HAL_RCC_OscConfig+0xf78>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
 80025c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80025ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	fa93 f2a3 	rbit	r2, r3
 80025de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80025e6:	601a      	str	r2, [r3, #0]
  return result;
 80025e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80025f0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	461a      	mov	r2, r3
 8002604:	2301      	movs	r3, #1
 8002606:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe fc08 	bl	8000e1c <HAL_GetTick>
 800260c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002610:	e009      	b.n	8002626 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002612:	f7fe fc03 	bl	8000e1c <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e144      	b.n	80028b0 <HAL_RCC_OscConfig+0x106c>
 8002626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800262e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002638:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	fa93 f2a3 	rbit	r2, r3
 8002642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002646:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800264a:	601a      	str	r2, [r3, #0]
  return result;
 800264c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002650:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002654:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b01      	cmp	r3, #1
 8002668:	d102      	bne.n	8002670 <HAL_RCC_OscConfig+0xe2c>
 800266a:	4b54      	ldr	r3, [pc, #336]	; (80027bc <HAL_RCC_OscConfig+0xf78>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	e027      	b.n	80026c0 <HAL_RCC_OscConfig+0xe7c>
 8002670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002674:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002678:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800267c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002682:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	fa93 f2a3 	rbit	r2, r3
 800268c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002690:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800269e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	fa93 f2a3 	rbit	r2, r3
 80026b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	4b3f      	ldr	r3, [pc, #252]	; (80027bc <HAL_RCC_OscConfig+0xf78>)
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026c4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80026c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026cc:	6011      	str	r1, [r2, #0]
 80026ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026d2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	fa92 f1a2 	rbit	r1, r2
 80026dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026e0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80026e4:	6011      	str	r1, [r2, #0]
  return result;
 80026e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026ea:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	fab2 f282 	clz	r2, r2
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f042 0220 	orr.w	r2, r2, #32
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f002 021f 	and.w	r2, r2, #31
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d082      	beq.n	8002612 <HAL_RCC_OscConfig+0xdce>
 800270c:	e0cf      	b.n	80028ae <HAL_RCC_OscConfig+0x106a>
 800270e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002712:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002716:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800271a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002720:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	fa93 f2a3 	rbit	r2, r3
 800272a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002732:	601a      	str	r2, [r3, #0]
  return result;
 8002734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002738:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800273c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002748:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	461a      	mov	r2, r3
 8002750:	2300      	movs	r3, #0
 8002752:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002754:	f7fe fb62 	bl	8000e1c <HAL_GetTick>
 8002758:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275c:	e009      	b.n	8002772 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275e:	f7fe fb5d 	bl	8000e1c <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e09e      	b.n	80028b0 <HAL_RCC_OscConfig+0x106c>
 8002772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002776:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800277a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800277e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002784:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	fa93 f2a3 	rbit	r2, r3
 800278e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002792:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002796:	601a      	str	r2, [r3, #0]
  return result;
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80027a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d104      	bne.n	80027c0 <HAL_RCC_OscConfig+0xf7c>
 80027b6:	4b01      	ldr	r3, [pc, #4]	; (80027bc <HAL_RCC_OscConfig+0xf78>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	e029      	b.n	8002810 <HAL_RCC_OscConfig+0xfcc>
 80027bc:	40021000 	.word	0x40021000
 80027c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	fa93 f2a3 	rbit	r2, r3
 80027dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80027ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	fa93 f2a3 	rbit	r2, r3
 8002802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002806:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <HAL_RCC_OscConfig+0x1078>)
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002814:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002818:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800281c:	6011      	str	r1, [r2, #0]
 800281e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002822:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	fa92 f1a2 	rbit	r1, r2
 800282c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002830:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002834:	6011      	str	r1, [r2, #0]
  return result;
 8002836:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800283a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	fab2 f282 	clz	r2, r2
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	f042 0220 	orr.w	r2, r2, #32
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	f002 021f 	and.w	r2, r2, #31
 8002850:	2101      	movs	r1, #1
 8002852:	fa01 f202 	lsl.w	r2, r1, r2
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d180      	bne.n	800275e <HAL_RCC_OscConfig+0xf1a>
 800285c:	e027      	b.n	80028ae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e01e      	b.n	80028b0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002872:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_RCC_OscConfig+0x1078>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800287a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800287e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002886:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	429a      	cmp	r2, r3
 8002890:	d10b      	bne.n	80028aa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002892:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002896:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000

080028c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b09e      	sub	sp, #120	; 0x78
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e162      	b.n	8002b9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b90      	ldr	r3, [pc, #576]	; (8002b1c <HAL_RCC_ClockConfig+0x25c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d910      	bls.n	8002908 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b8d      	ldr	r3, [pc, #564]	; (8002b1c <HAL_RCC_ClockConfig+0x25c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 0207 	bic.w	r2, r3, #7
 80028ee:	498b      	ldr	r1, [pc, #556]	; (8002b1c <HAL_RCC_ClockConfig+0x25c>)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b89      	ldr	r3, [pc, #548]	; (8002b1c <HAL_RCC_ClockConfig+0x25c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e14a      	b.n	8002b9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002914:	4b82      	ldr	r3, [pc, #520]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	497f      	ldr	r1, [pc, #508]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 80dc 	beq.w	8002aec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d13c      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xf6>
 800293c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002940:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800294a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b01      	cmp	r3, #1
 800295e:	d102      	bne.n	8002966 <HAL_RCC_ClockConfig+0xa6>
 8002960:	4b6f      	ldr	r3, [pc, #444]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	e00f      	b.n	8002986 <HAL_RCC_ClockConfig+0xc6>
 8002966:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800296a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	667b      	str	r3, [r7, #100]	; 0x64
 8002974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002978:	663b      	str	r3, [r7, #96]	; 0x60
 800297a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002982:	4b67      	ldr	r3, [pc, #412]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800298a:	65ba      	str	r2, [r7, #88]	; 0x58
 800298c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800298e:	fa92 f2a2 	rbit	r2, r2
 8002992:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002994:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002996:	fab2 f282 	clz	r2, r2
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	f042 0220 	orr.w	r2, r2, #32
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	f002 021f 	and.w	r2, r2, #31
 80029a6:	2101      	movs	r1, #1
 80029a8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d17b      	bne.n	8002aaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e0f3      	b.n	8002b9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d13c      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x178>
 80029be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c6:	fa93 f3a3 	rbit	r3, r3
 80029ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	095b      	lsrs	r3, r3, #5
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d102      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x128>
 80029e2:	4b4f      	ldr	r3, [pc, #316]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	e00f      	b.n	8002a08 <HAL_RCC_ClockConfig+0x148>
 80029e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	647b      	str	r3, [r7, #68]	; 0x44
 80029f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029fa:	643b      	str	r3, [r7, #64]	; 0x40
 80029fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a04:	4b46      	ldr	r3, [pc, #280]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a10:	fa92 f2a2 	rbit	r2, r2
 8002a14:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a18:	fab2 f282 	clz	r2, r2
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	f042 0220 	orr.w	r2, r2, #32
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	f002 021f 	and.w	r2, r2, #31
 8002a28:	2101      	movs	r1, #1
 8002a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d13a      	bne.n	8002aaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0b2      	b.n	8002b9e <HAL_RCC_ClockConfig+0x2de>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	095b      	lsrs	r3, r3, #5
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d102      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x1a0>
 8002a5a:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	e00d      	b.n	8002a7c <HAL_RCC_ClockConfig+0x1bc>
 8002a60:	2302      	movs	r3, #2
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	623b      	str	r3, [r7, #32]
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	4b29      	ldr	r3, [pc, #164]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	61ba      	str	r2, [r7, #24]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	fa92 f2a2 	rbit	r2, r2
 8002a86:	617a      	str	r2, [r7, #20]
  return result;
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	fab2 f282 	clz	r2, r2
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	f042 0220 	orr.w	r2, r2, #32
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	f002 021f 	and.w	r2, r2, #31
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e079      	b.n	8002b9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f023 0203 	bic.w	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	491a      	ldr	r1, [pc, #104]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002abc:	f7fe f9ae 	bl	8000e1c <HAL_GetTick>
 8002ac0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac4:	f7fe f9aa 	bl	8000e1c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e061      	b.n	8002b9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 020c 	and.w	r2, r3, #12
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d1eb      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCC_ClockConfig+0x25c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d214      	bcs.n	8002b24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <HAL_RCC_ClockConfig+0x25c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 0207 	bic.w	r2, r3, #7
 8002b02:	4906      	ldr	r1, [pc, #24]	; (8002b1c <HAL_RCC_ClockConfig+0x25c>)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <HAL_RCC_ClockConfig+0x25c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e040      	b.n	8002b9e <HAL_RCC_ClockConfig+0x2de>
 8002b1c:	40022000 	.word	0x40022000
 8002b20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b30:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	491a      	ldr	r1, [pc, #104]	; (8002ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b4e:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4912      	ldr	r1, [pc, #72]	; (8002ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b62:	f000 f829 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 8002b66:	4601      	mov	r1, r0
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b70:	22f0      	movs	r2, #240	; 0xf0
 8002b72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	fa92 f2a2 	rbit	r2, r2
 8002b7a:	60fa      	str	r2, [r7, #12]
  return result;
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	fab2 f282 	clz	r2, r2
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	40d3      	lsrs	r3, r2
 8002b86:	4a09      	ldr	r2, [pc, #36]	; (8002bac <HAL_RCC_ClockConfig+0x2ec>)
 8002b88:	5cd3      	ldrb	r3, [r2, r3]
 8002b8a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b8e:	4a08      	ldr	r2, [pc, #32]	; (8002bb0 <HAL_RCC_ClockConfig+0x2f0>)
 8002b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b92:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <HAL_RCC_ClockConfig+0x2f4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe f80a 	bl	8000bb0 <HAL_InitTick>
  
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3778      	adds	r7, #120	; 0x78
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	080075c4 	.word	0x080075c4
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	20000004 	.word	0x20000004

08002bb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b08b      	sub	sp, #44	; 0x2c
 8002bbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61bb      	str	r3, [r7, #24]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002bd2:	4b29      	ldr	r3, [pc, #164]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d002      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x30>
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d003      	beq.n	8002bee <HAL_RCC_GetSysClockFreq+0x36>
 8002be6:	e03c      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002be8:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bea:	623b      	str	r3, [r7, #32]
      break;
 8002bec:	e03c      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002bf4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002bf8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	fa92 f2a2 	rbit	r2, r2
 8002c00:	607a      	str	r2, [r7, #4]
  return result;
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	fab2 f282 	clz	r2, r2
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	40d3      	lsrs	r3, r2
 8002c0c:	4a1c      	ldr	r2, [pc, #112]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c0e:	5cd3      	ldrb	r3, [r2, r3]
 8002c10:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c12:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	220f      	movs	r2, #15
 8002c1c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	fa92 f2a2 	rbit	r2, r2
 8002c24:	60fa      	str	r2, [r7, #12]
  return result;
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	fab2 f282 	clz	r2, r2
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	40d3      	lsrs	r3, r2
 8002c30:	4a14      	ldr	r2, [pc, #80]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c32:	5cd3      	ldrb	r3, [r2, r3]
 8002c34:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c40:	4a0e      	ldr	r2, [pc, #56]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c50:	e004      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	4a0c      	ldr	r2, [pc, #48]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	623b      	str	r3, [r7, #32]
      break;
 8002c60:	e002      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c62:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c64:	623b      	str	r3, [r7, #32]
      break;
 8002c66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c68:	6a3b      	ldr	r3, [r7, #32]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	372c      	adds	r7, #44	; 0x2c
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	007a1200 	.word	0x007a1200
 8002c80:	080075dc 	.word	0x080075dc
 8002c84:	080075ec 	.word	0x080075ec
 8002c88:	003d0900 	.word	0x003d0900

08002c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000000 	.word	0x20000000

08002ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002caa:	f7ff ffef 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cae:	4601      	mov	r1, r0
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cb8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002cbc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	fa92 f2a2 	rbit	r2, r2
 8002cc4:	603a      	str	r2, [r7, #0]
  return result;
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	fab2 f282 	clz	r2, r2
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	40d3      	lsrs	r3, r2
 8002cd0:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002cd2:	5cd3      	ldrb	r3, [r2, r3]
 8002cd4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	080075d4 	.word	0x080075d4

08002ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002cee:	f7ff ffcd 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cf2:	4601      	mov	r1, r0
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002cfc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002d00:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	fa92 f2a2 	rbit	r2, r2
 8002d08:	603a      	str	r2, [r7, #0]
  return result;
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	fab2 f282 	clz	r2, r2
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	40d3      	lsrs	r3, r2
 8002d14:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d16:	5cd3      	ldrb	r3, [r2, r3]
 8002d18:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000
 8002d28:	080075d4 	.word	0x080075d4

08002d2c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	220f      	movs	r2, #15
 8002d3a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d3c:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <HAL_RCC_GetClockConfig+0x5c>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0203 	and.w	r2, r3, #3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002d48:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <HAL_RCC_GetClockConfig+0x5c>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <HAL_RCC_GetClockConfig+0x5c>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d60:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <HAL_RCC_GetClockConfig+0x5c>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	08db      	lsrs	r3, r3, #3
 8002d66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002d6e:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <HAL_RCC_GetClockConfig+0x60>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0207 	and.w	r2, r3, #7
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	601a      	str	r2, [r3, #0]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40022000 	.word	0x40022000

08002d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b092      	sub	sp, #72	; 0x48
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002da0:	2300      	movs	r3, #0
 8002da2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 80d4 	beq.w	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db4:	4b4e      	ldr	r3, [pc, #312]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10e      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc0:	4b4b      	ldr	r3, [pc, #300]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	4a4a      	ldr	r2, [pc, #296]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dca:	61d3      	str	r3, [r2, #28]
 8002dcc:	4b48      	ldr	r3, [pc, #288]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dde:	4b45      	ldr	r3, [pc, #276]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d118      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dea:	4b42      	ldr	r3, [pc, #264]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a41      	ldr	r2, [pc, #260]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df6:	f7fe f811 	bl	8000e1c <HAL_GetTick>
 8002dfa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfc:	e008      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfe:	f7fe f80d 	bl	8000e1c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b64      	cmp	r3, #100	; 0x64
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e169      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	4b38      	ldr	r3, [pc, #224]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e1c:	4b34      	ldr	r3, [pc, #208]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e24:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8084 	beq.w	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d07c      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e3c:	4b2c      	ldr	r3, [pc, #176]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	461a      	mov	r2, r3
 8002e66:	2301      	movs	r3, #1
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e8e:	4a18      	ldr	r2, [pc, #96]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e92:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d04b      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9e:	f7fd ffbd 	bl	8000e1c <HAL_GetTick>
 8002ea2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea6:	f7fd ffb9 	bl	8000e1c <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e113      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec2:	fa93 f3a3 	rbit	r3, r3
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec8:	2302      	movs	r3, #2
 8002eca:	623b      	str	r3, [r7, #32]
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	61fb      	str	r3, [r7, #28]
  return result;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	095b      	lsrs	r3, r3, #5
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d108      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002eea:	4b01      	ldr	r3, [pc, #4]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	e00d      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40007000 	.word	0x40007000
 8002ef8:	10908100 	.word	0x10908100
 8002efc:	2302      	movs	r3, #2
 8002efe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	4b78      	ldr	r3, [pc, #480]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	613a      	str	r2, [r7, #16]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	fa92 f2a2 	rbit	r2, r2
 8002f16:	60fa      	str	r2, [r7, #12]
  return result;
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	fab2 f282 	clz	r2, r2
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	f002 021f 	and.w	r2, r2, #31
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0b7      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f36:	4b6d      	ldr	r3, [pc, #436]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	496a      	ldr	r1, [pc, #424]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f50:	4b66      	ldr	r3, [pc, #408]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	4a65      	ldr	r2, [pc, #404]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f68:	4b60      	ldr	r3, [pc, #384]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	f023 0203 	bic.w	r2, r3, #3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	495d      	ldr	r1, [pc, #372]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f86:	4b59      	ldr	r3, [pc, #356]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	4956      	ldr	r1, [pc, #344]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fa4:	4b51      	ldr	r3, [pc, #324]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	494e      	ldr	r1, [pc, #312]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0320 	and.w	r3, r3, #32
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d008      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fc2:	4b4a      	ldr	r3, [pc, #296]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f023 0210 	bic.w	r2, r3, #16
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	4947      	ldr	r1, [pc, #284]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002fe0:	4b42      	ldr	r3, [pc, #264]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	493f      	ldr	r1, [pc, #252]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d008      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ffe:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	f023 0220 	bic.w	r2, r3, #32
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	4938      	ldr	r1, [pc, #224]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800300c:	4313      	orrs	r3, r2
 800300e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800301c:	4b33      	ldr	r3, [pc, #204]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	4930      	ldr	r1, [pc, #192]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800302a:	4313      	orrs	r3, r2
 800302c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b00      	cmp	r3, #0
 8003038:	d008      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800303a:	4b2c      	ldr	r3, [pc, #176]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	4929      	ldr	r1, [pc, #164]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003048:	4313      	orrs	r3, r2
 800304a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003058:	4b24      	ldr	r3, [pc, #144]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	4921      	ldr	r1, [pc, #132]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003066:	4313      	orrs	r3, r2
 8003068:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003076:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	491a      	ldr	r1, [pc, #104]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003084:	4313      	orrs	r3, r2
 8003086:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003094:	4b15      	ldr	r3, [pc, #84]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	4912      	ldr	r1, [pc, #72]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030b2:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	490b      	ldr	r1, [pc, #44]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030dc:	4903      	ldr	r1, [pc, #12]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3748      	adds	r7, #72	; 0x48
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000

080030f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e09d      	b.n	800323e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2b00      	cmp	r3, #0
 8003108:	d108      	bne.n	800311c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003112:	d009      	beq.n	8003128 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	61da      	str	r2, [r3, #28]
 800311a:	e005      	b.n	8003128 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fd fc62 	bl	8000a0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800315e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003168:	d902      	bls.n	8003170 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	e002      	b.n	8003176 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003174:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800317e:	d007      	beq.n	8003190 <HAL_SPI_Init+0xa0>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003188:	d002      	beq.n	8003190 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d2:	ea42 0103 	orr.w	r1, r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	0c1b      	lsrs	r3, r3, #16
 80031ec:	f003 0204 	and.w	r2, r3, #4
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800320c:	ea42 0103 	orr.w	r1, r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800322c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e049      	b.n	80032ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d106      	bne.n	8003272 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f841 	bl	80032f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2202      	movs	r2, #2
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3304      	adds	r3, #4
 8003282:	4619      	mov	r1, r3
 8003284:	4610      	mov	r0, r2
 8003286:	f000 f9f1 	bl	800366c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d001      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e04a      	b.n	80033b6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a21      	ldr	r2, [pc, #132]	; (80033c4 <HAL_TIM_Base_Start_IT+0xbc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d018      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x6c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334a:	d013      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x6c>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1d      	ldr	r2, [pc, #116]	; (80033c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00e      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x6c>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <HAL_TIM_Base_Start_IT+0xc4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x6c>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1a      	ldr	r2, [pc, #104]	; (80033d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x6c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a19      	ldr	r2, [pc, #100]	; (80033d4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d115      	bne.n	80033a0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	4b17      	ldr	r3, [pc, #92]	; (80033d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800337c:	4013      	ands	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b06      	cmp	r3, #6
 8003384:	d015      	beq.n	80033b2 <HAL_TIM_Base_Start_IT+0xaa>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338c:	d011      	beq.n	80033b2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0201 	orr.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339e:	e008      	b.n	80033b2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	e000      	b.n	80033b4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40012c00 	.word	0x40012c00
 80033c8:	40000400 	.word	0x40000400
 80033cc:	40000800 	.word	0x40000800
 80033d0:	40013400 	.word	0x40013400
 80033d4:	40014000 	.word	0x40014000
 80033d8:	00010007 	.word	0x00010007

080033dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d122      	bne.n	8003438 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d11b      	bne.n	8003438 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0202 	mvn.w	r2, #2
 8003408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f905 	bl	800362e <HAL_TIM_IC_CaptureCallback>
 8003424:	e005      	b.n	8003432 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f8f7 	bl	800361a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f908 	bl	8003642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b04      	cmp	r3, #4
 8003444:	d122      	bne.n	800348c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b04      	cmp	r3, #4
 8003452:	d11b      	bne.n	800348c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0204 	mvn.w	r2, #4
 800345c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2202      	movs	r2, #2
 8003462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f8db 	bl	800362e <HAL_TIM_IC_CaptureCallback>
 8003478:	e005      	b.n	8003486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f8cd 	bl	800361a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f8de 	bl	8003642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b08      	cmp	r3, #8
 8003498:	d122      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d11b      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0208 	mvn.w	r2, #8
 80034b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2204      	movs	r2, #4
 80034b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f8b1 	bl	800362e <HAL_TIM_IC_CaptureCallback>
 80034cc:	e005      	b.n	80034da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f8a3 	bl	800361a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f8b4 	bl	8003642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b10      	cmp	r3, #16
 80034ec:	d122      	bne.n	8003534 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b10      	cmp	r3, #16
 80034fa:	d11b      	bne.n	8003534 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0210 	mvn.w	r2, #16
 8003504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2208      	movs	r2, #8
 800350a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f887 	bl	800362e <HAL_TIM_IC_CaptureCallback>
 8003520:	e005      	b.n	800352e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f879 	bl	800361a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f88a 	bl	8003642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d10e      	bne.n	8003560 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b01      	cmp	r3, #1
 800354e:	d107      	bne.n	8003560 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0201 	mvn.w	r2, #1
 8003558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fd f9d2 	bl	8000904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356a:	2b80      	cmp	r3, #128	; 0x80
 800356c:	d10e      	bne.n	800358c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003578:	2b80      	cmp	r3, #128	; 0x80
 800357a:	d107      	bne.n	800358c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f90a 	bl	80037a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800359a:	d10e      	bne.n	80035ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a6:	2b80      	cmp	r3, #128	; 0x80
 80035a8:	d107      	bne.n	80035ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f8fd 	bl	80037b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	d10e      	bne.n	80035e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b40      	cmp	r3, #64	; 0x40
 80035d4:	d107      	bne.n	80035e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f838 	bl	8003656 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d10e      	bne.n	8003612 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f003 0320 	and.w	r3, r3, #32
 80035fe:	2b20      	cmp	r3, #32
 8003600:	d107      	bne.n	8003612 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f06f 0220 	mvn.w	r2, #32
 800360a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f8bd 	bl	800378c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a3c      	ldr	r2, [pc, #240]	; (8003770 <TIM_Base_SetConfig+0x104>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00f      	beq.n	80036a4 <TIM_Base_SetConfig+0x38>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368a:	d00b      	beq.n	80036a4 <TIM_Base_SetConfig+0x38>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a39      	ldr	r2, [pc, #228]	; (8003774 <TIM_Base_SetConfig+0x108>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d007      	beq.n	80036a4 <TIM_Base_SetConfig+0x38>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a38      	ldr	r2, [pc, #224]	; (8003778 <TIM_Base_SetConfig+0x10c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d003      	beq.n	80036a4 <TIM_Base_SetConfig+0x38>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a37      	ldr	r2, [pc, #220]	; (800377c <TIM_Base_SetConfig+0x110>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d108      	bne.n	80036b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a2d      	ldr	r2, [pc, #180]	; (8003770 <TIM_Base_SetConfig+0x104>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01b      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c4:	d017      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a2a      	ldr	r2, [pc, #168]	; (8003774 <TIM_Base_SetConfig+0x108>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a29      	ldr	r2, [pc, #164]	; (8003778 <TIM_Base_SetConfig+0x10c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00f      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a28      	ldr	r2, [pc, #160]	; (800377c <TIM_Base_SetConfig+0x110>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00b      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a27      	ldr	r2, [pc, #156]	; (8003780 <TIM_Base_SetConfig+0x114>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d007      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a26      	ldr	r2, [pc, #152]	; (8003784 <TIM_Base_SetConfig+0x118>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d003      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a25      	ldr	r2, [pc, #148]	; (8003788 <TIM_Base_SetConfig+0x11c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d108      	bne.n	8003708 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a10      	ldr	r2, [pc, #64]	; (8003770 <TIM_Base_SetConfig+0x104>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00f      	beq.n	8003754 <TIM_Base_SetConfig+0xe8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a11      	ldr	r2, [pc, #68]	; (800377c <TIM_Base_SetConfig+0x110>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00b      	beq.n	8003754 <TIM_Base_SetConfig+0xe8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a10      	ldr	r2, [pc, #64]	; (8003780 <TIM_Base_SetConfig+0x114>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d007      	beq.n	8003754 <TIM_Base_SetConfig+0xe8>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a0f      	ldr	r2, [pc, #60]	; (8003784 <TIM_Base_SetConfig+0x118>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <TIM_Base_SetConfig+0xe8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a0e      	ldr	r2, [pc, #56]	; (8003788 <TIM_Base_SetConfig+0x11c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d103      	bne.n	800375c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	615a      	str	r2, [r3, #20]
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40000400 	.word	0x40000400
 8003778:	40000800 	.word	0x40000800
 800377c:	40013400 	.word	0x40013400
 8003780:	40014000 	.word	0x40014000
 8003784:	40014400 	.word	0x40014400
 8003788:	40014800 	.word	0x40014800

0800378c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e040      	b.n	800385c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd f950 	bl	8000a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2224      	movs	r2, #36	; 0x24
 80037f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0201 	bic.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fbbc 	bl	8003f84 <UART_SetConfig>
 800380c:	4603      	mov	r3, r0
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e022      	b.n	800385c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fd84 	bl	800432c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003832:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003842:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fe0b 	bl	8004470 <UART_CheckIdleState>
 800385a:	4603      	mov	r3, r0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08a      	sub	sp, #40	; 0x28
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	4613      	mov	r3, r2
 8003872:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003878:	2b20      	cmp	r3, #32
 800387a:	d178      	bne.n	800396e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_UART_Transmit+0x24>
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e071      	b.n	8003970 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2221      	movs	r2, #33	; 0x21
 8003898:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800389a:	f7fd fabf 	bl	8000e1c <HAL_GetTick>
 800389e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	88fa      	ldrh	r2, [r7, #6]
 80038a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	88fa      	ldrh	r2, [r7, #6]
 80038ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b8:	d108      	bne.n	80038cc <HAL_UART_Transmit+0x68>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d104      	bne.n	80038cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	e003      	b.n	80038d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038d4:	e030      	b.n	8003938 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2200      	movs	r2, #0
 80038de:	2180      	movs	r1, #128	; 0x80
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 fe6d 	bl	80045c0 <UART_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d004      	beq.n	80038f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e03c      	b.n	8003970 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10b      	bne.n	8003914 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	881a      	ldrh	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003908:	b292      	uxth	r2, r2
 800390a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	3302      	adds	r3, #2
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	e008      	b.n	8003926 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	781a      	ldrb	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	b292      	uxth	r2, r2
 800391e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	3301      	adds	r3, #1
 8003924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1c8      	bne.n	80038d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2200      	movs	r2, #0
 800394c:	2140      	movs	r1, #64	; 0x40
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fe36 	bl	80045c0 <UART_WaitOnFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d004      	beq.n	8003964 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2220      	movs	r2, #32
 800395e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e005      	b.n	8003970 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	e000      	b.n	8003970 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800396e:	2302      	movs	r3, #2
  }
}
 8003970:	4618      	mov	r0, r3
 8003972:	3720      	adds	r7, #32
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b0ba      	sub	sp, #232	; 0xe8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800399e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80039a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80039a6:	4013      	ands	r3, r2
 80039a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80039ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d115      	bne.n	80039e0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00f      	beq.n	80039e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d009      	beq.n	80039e0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 82ab 	beq.w	8003f2c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	4798      	blx	r3
      }
      return;
 80039de:	e2a5      	b.n	8003f2c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80039e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 8117 	beq.w	8003c18 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80039ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80039f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80039fa:	4b85      	ldr	r3, [pc, #532]	; (8003c10 <HAL_UART_IRQHandler+0x298>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 810a 	beq.w	8003c18 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d011      	beq.n	8003a34 <HAL_UART_IRQHandler+0xbc>
 8003a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00b      	beq.n	8003a34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2201      	movs	r2, #1
 8003a22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a2a:	f043 0201 	orr.w	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d011      	beq.n	8003a64 <HAL_UART_IRQHandler+0xec>
 8003a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00b      	beq.n	8003a64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2202      	movs	r2, #2
 8003a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a5a:	f043 0204 	orr.w	r2, r3, #4
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d011      	beq.n	8003a94 <HAL_UART_IRQHandler+0x11c>
 8003a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00b      	beq.n	8003a94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2204      	movs	r2, #4
 8003a82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a8a:	f043 0202 	orr.w	r2, r3, #2
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d017      	beq.n	8003ad0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d105      	bne.n	8003ab8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ab0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00b      	beq.n	8003ad0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2208      	movs	r2, #8
 8003abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac6:	f043 0208 	orr.w	r2, r3, #8
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d012      	beq.n	8003b02 <HAL_UART_IRQHandler+0x18a>
 8003adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ae0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00c      	beq.n	8003b02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003af0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 8211 	beq.w	8003f30 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00d      	beq.n	8003b36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d007      	beq.n	8003b36 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4a:	2b40      	cmp	r3, #64	; 0x40
 8003b4c:	d005      	beq.n	8003b5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d04f      	beq.n	8003bfa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fd97 	bl	800468e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6a:	2b40      	cmp	r3, #64	; 0x40
 8003b6c:	d141      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	3308      	adds	r3, #8
 8003b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b7c:	e853 3f00 	ldrex	r3, [r3]
 8003b80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3308      	adds	r3, #8
 8003b96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ba6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003baa:	e841 2300 	strex	r3, r2, [r1]
 8003bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1d9      	bne.n	8003b6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d013      	beq.n	8003bea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc6:	4a13      	ldr	r2, [pc, #76]	; (8003c14 <HAL_UART_IRQHandler+0x29c>)
 8003bc8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fd fa6f 	bl	80010b2 <HAL_DMA_Abort_IT>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d017      	beq.n	8003c0a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003be4:	4610      	mov	r0, r2
 8003be6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be8:	e00f      	b.n	8003c0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f9b4 	bl	8003f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf0:	e00b      	b.n	8003c0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f9b0 	bl	8003f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf8:	e007      	b.n	8003c0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f9ac 	bl	8003f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003c08:	e192      	b.n	8003f30 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0a:	bf00      	nop
    return;
 8003c0c:	e190      	b.n	8003f30 <HAL_UART_IRQHandler+0x5b8>
 8003c0e:	bf00      	nop
 8003c10:	04000120 	.word	0x04000120
 8003c14:	08004757 	.word	0x08004757

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	f040 814b 	bne.w	8003eb8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 8144 	beq.w	8003eb8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 813d 	beq.w	8003eb8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2210      	movs	r2, #16
 8003c44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c50:	2b40      	cmp	r3, #64	; 0x40
 8003c52:	f040 80b5 	bne.w	8003dc0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c62:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 8164 	beq.w	8003f34 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c76:	429a      	cmp	r2, r3
 8003c78:	f080 815c 	bcs.w	8003f34 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	f000 8086 	beq.w	8003d9e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c9e:	e853 3f00 	ldrex	r3, [r3]
 8003ca2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ca6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003caa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003cbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cc0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cc8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1da      	bne.n	8003c92 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3308      	adds	r3, #8
 8003ce2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ce6:	e853 3f00 	ldrex	r3, [r3]
 8003cea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003cec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3308      	adds	r3, #8
 8003cfc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d00:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d04:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d06:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d0c:	e841 2300 	strex	r3, r2, [r1]
 8003d10:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e1      	bne.n	8003cdc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3308      	adds	r3, #8
 8003d38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d3c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e3      	bne.n	8003d18 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d6e:	f023 0310 	bic.w	r3, r3, #16
 8003d72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d80:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d82:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e4      	bne.n	8003d5e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fd f951 	bl	8001040 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2202      	movs	r2, #2
 8003da2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	4619      	mov	r1, r3
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f8d7 	bl	8003f6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003dbe:	e0b9      	b.n	8003f34 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80ab 	beq.w	8003f38 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003de2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80a6 	beq.w	8003f38 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e10:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e4      	bne.n	8003dec <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3308      	adds	r3, #8
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	623b      	str	r3, [r7, #32]
   return(result);
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3308      	adds	r3, #8
 8003e42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e46:	633a      	str	r2, [r7, #48]	; 0x30
 8003e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e3      	bne.n	8003e22 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	e853 3f00 	ldrex	r3, [r3]
 8003e7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0310 	bic.w	r3, r3, #16
 8003e82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	69b9      	ldr	r1, [r7, #24]
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e4      	bne.n	8003e6e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003eae:	4619      	mov	r1, r3
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f85b 	bl	8003f6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003eb6:	e03f      	b.n	8003f38 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ebc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00e      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x56a>
 8003ec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d008      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ed8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fc7b 	bl	80047d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ee0:	e02d      	b.n	8003f3e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00e      	beq.n	8003f0c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d01c      	beq.n	8003f3c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	4798      	blx	r3
    }
    return;
 8003f0a:	e017      	b.n	8003f3c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d012      	beq.n	8003f3e <HAL_UART_IRQHandler+0x5c6>
 8003f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00c      	beq.n	8003f3e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fc2c 	bl	8004782 <UART_EndTransmit_IT>
    return;
 8003f2a:	e008      	b.n	8003f3e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003f2c:	bf00      	nop
 8003f2e:	e006      	b.n	8003f3e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003f30:	bf00      	nop
 8003f32:	e004      	b.n	8003f3e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003f34:	bf00      	nop
 8003f36:	e002      	b.n	8003f3e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003f38:	bf00      	nop
 8003f3a:	e000      	b.n	8003f3e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003f3c:	bf00      	nop
  }

}
 8003f3e:	37e8      	adds	r7, #232	; 0xe8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003fb2:	f023 030c 	bic.w	r3, r3, #12
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	6979      	ldr	r1, [r7, #20]
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4aa7      	ldr	r2, [pc, #668]	; (800429c <UART_SetConfig+0x318>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d120      	bne.n	8004046 <UART_SetConfig+0xc2>
 8004004:	4ba6      	ldr	r3, [pc, #664]	; (80042a0 <UART_SetConfig+0x31c>)
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	2b03      	cmp	r3, #3
 800400e:	d817      	bhi.n	8004040 <UART_SetConfig+0xbc>
 8004010:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <UART_SetConfig+0x94>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	08004029 	.word	0x08004029
 800401c:	08004035 	.word	0x08004035
 8004020:	0800403b 	.word	0x0800403b
 8004024:	0800402f 	.word	0x0800402f
 8004028:	2301      	movs	r3, #1
 800402a:	77fb      	strb	r3, [r7, #31]
 800402c:	e0b5      	b.n	800419a <UART_SetConfig+0x216>
 800402e:	2302      	movs	r3, #2
 8004030:	77fb      	strb	r3, [r7, #31]
 8004032:	e0b2      	b.n	800419a <UART_SetConfig+0x216>
 8004034:	2304      	movs	r3, #4
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e0af      	b.n	800419a <UART_SetConfig+0x216>
 800403a:	2308      	movs	r3, #8
 800403c:	77fb      	strb	r3, [r7, #31]
 800403e:	e0ac      	b.n	800419a <UART_SetConfig+0x216>
 8004040:	2310      	movs	r3, #16
 8004042:	77fb      	strb	r3, [r7, #31]
 8004044:	e0a9      	b.n	800419a <UART_SetConfig+0x216>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a96      	ldr	r2, [pc, #600]	; (80042a4 <UART_SetConfig+0x320>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d124      	bne.n	800409a <UART_SetConfig+0x116>
 8004050:	4b93      	ldr	r3, [pc, #588]	; (80042a0 <UART_SetConfig+0x31c>)
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004058:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800405c:	d011      	beq.n	8004082 <UART_SetConfig+0xfe>
 800405e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004062:	d817      	bhi.n	8004094 <UART_SetConfig+0x110>
 8004064:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004068:	d011      	beq.n	800408e <UART_SetConfig+0x10a>
 800406a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800406e:	d811      	bhi.n	8004094 <UART_SetConfig+0x110>
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <UART_SetConfig+0xf8>
 8004074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004078:	d006      	beq.n	8004088 <UART_SetConfig+0x104>
 800407a:	e00b      	b.n	8004094 <UART_SetConfig+0x110>
 800407c:	2300      	movs	r3, #0
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e08b      	b.n	800419a <UART_SetConfig+0x216>
 8004082:	2302      	movs	r3, #2
 8004084:	77fb      	strb	r3, [r7, #31]
 8004086:	e088      	b.n	800419a <UART_SetConfig+0x216>
 8004088:	2304      	movs	r3, #4
 800408a:	77fb      	strb	r3, [r7, #31]
 800408c:	e085      	b.n	800419a <UART_SetConfig+0x216>
 800408e:	2308      	movs	r3, #8
 8004090:	77fb      	strb	r3, [r7, #31]
 8004092:	e082      	b.n	800419a <UART_SetConfig+0x216>
 8004094:	2310      	movs	r3, #16
 8004096:	77fb      	strb	r3, [r7, #31]
 8004098:	e07f      	b.n	800419a <UART_SetConfig+0x216>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a82      	ldr	r2, [pc, #520]	; (80042a8 <UART_SetConfig+0x324>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d124      	bne.n	80040ee <UART_SetConfig+0x16a>
 80040a4:	4b7e      	ldr	r3, [pc, #504]	; (80042a0 <UART_SetConfig+0x31c>)
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80040ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040b0:	d011      	beq.n	80040d6 <UART_SetConfig+0x152>
 80040b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040b6:	d817      	bhi.n	80040e8 <UART_SetConfig+0x164>
 80040b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040bc:	d011      	beq.n	80040e2 <UART_SetConfig+0x15e>
 80040be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040c2:	d811      	bhi.n	80040e8 <UART_SetConfig+0x164>
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <UART_SetConfig+0x14c>
 80040c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040cc:	d006      	beq.n	80040dc <UART_SetConfig+0x158>
 80040ce:	e00b      	b.n	80040e8 <UART_SetConfig+0x164>
 80040d0:	2300      	movs	r3, #0
 80040d2:	77fb      	strb	r3, [r7, #31]
 80040d4:	e061      	b.n	800419a <UART_SetConfig+0x216>
 80040d6:	2302      	movs	r3, #2
 80040d8:	77fb      	strb	r3, [r7, #31]
 80040da:	e05e      	b.n	800419a <UART_SetConfig+0x216>
 80040dc:	2304      	movs	r3, #4
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e05b      	b.n	800419a <UART_SetConfig+0x216>
 80040e2:	2308      	movs	r3, #8
 80040e4:	77fb      	strb	r3, [r7, #31]
 80040e6:	e058      	b.n	800419a <UART_SetConfig+0x216>
 80040e8:	2310      	movs	r3, #16
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	e055      	b.n	800419a <UART_SetConfig+0x216>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a6e      	ldr	r2, [pc, #440]	; (80042ac <UART_SetConfig+0x328>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d124      	bne.n	8004142 <UART_SetConfig+0x1be>
 80040f8:	4b69      	ldr	r3, [pc, #420]	; (80042a0 <UART_SetConfig+0x31c>)
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004100:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004104:	d011      	beq.n	800412a <UART_SetConfig+0x1a6>
 8004106:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800410a:	d817      	bhi.n	800413c <UART_SetConfig+0x1b8>
 800410c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004110:	d011      	beq.n	8004136 <UART_SetConfig+0x1b2>
 8004112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004116:	d811      	bhi.n	800413c <UART_SetConfig+0x1b8>
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <UART_SetConfig+0x1a0>
 800411c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004120:	d006      	beq.n	8004130 <UART_SetConfig+0x1ac>
 8004122:	e00b      	b.n	800413c <UART_SetConfig+0x1b8>
 8004124:	2300      	movs	r3, #0
 8004126:	77fb      	strb	r3, [r7, #31]
 8004128:	e037      	b.n	800419a <UART_SetConfig+0x216>
 800412a:	2302      	movs	r3, #2
 800412c:	77fb      	strb	r3, [r7, #31]
 800412e:	e034      	b.n	800419a <UART_SetConfig+0x216>
 8004130:	2304      	movs	r3, #4
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e031      	b.n	800419a <UART_SetConfig+0x216>
 8004136:	2308      	movs	r3, #8
 8004138:	77fb      	strb	r3, [r7, #31]
 800413a:	e02e      	b.n	800419a <UART_SetConfig+0x216>
 800413c:	2310      	movs	r3, #16
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e02b      	b.n	800419a <UART_SetConfig+0x216>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a5a      	ldr	r2, [pc, #360]	; (80042b0 <UART_SetConfig+0x32c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d124      	bne.n	8004196 <UART_SetConfig+0x212>
 800414c:	4b54      	ldr	r3, [pc, #336]	; (80042a0 <UART_SetConfig+0x31c>)
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004154:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004158:	d011      	beq.n	800417e <UART_SetConfig+0x1fa>
 800415a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800415e:	d817      	bhi.n	8004190 <UART_SetConfig+0x20c>
 8004160:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004164:	d011      	beq.n	800418a <UART_SetConfig+0x206>
 8004166:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800416a:	d811      	bhi.n	8004190 <UART_SetConfig+0x20c>
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <UART_SetConfig+0x1f4>
 8004170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004174:	d006      	beq.n	8004184 <UART_SetConfig+0x200>
 8004176:	e00b      	b.n	8004190 <UART_SetConfig+0x20c>
 8004178:	2300      	movs	r3, #0
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e00d      	b.n	800419a <UART_SetConfig+0x216>
 800417e:	2302      	movs	r3, #2
 8004180:	77fb      	strb	r3, [r7, #31]
 8004182:	e00a      	b.n	800419a <UART_SetConfig+0x216>
 8004184:	2304      	movs	r3, #4
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e007      	b.n	800419a <UART_SetConfig+0x216>
 800418a:	2308      	movs	r3, #8
 800418c:	77fb      	strb	r3, [r7, #31]
 800418e:	e004      	b.n	800419a <UART_SetConfig+0x216>
 8004190:	2310      	movs	r3, #16
 8004192:	77fb      	strb	r3, [r7, #31]
 8004194:	e001      	b.n	800419a <UART_SetConfig+0x216>
 8004196:	2310      	movs	r3, #16
 8004198:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a2:	d15b      	bne.n	800425c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80041a4:	7ffb      	ldrb	r3, [r7, #31]
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d827      	bhi.n	80041fa <UART_SetConfig+0x276>
 80041aa:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <UART_SetConfig+0x22c>)
 80041ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b0:	080041d5 	.word	0x080041d5
 80041b4:	080041dd 	.word	0x080041dd
 80041b8:	080041e5 	.word	0x080041e5
 80041bc:	080041fb 	.word	0x080041fb
 80041c0:	080041eb 	.word	0x080041eb
 80041c4:	080041fb 	.word	0x080041fb
 80041c8:	080041fb 	.word	0x080041fb
 80041cc:	080041fb 	.word	0x080041fb
 80041d0:	080041f3 	.word	0x080041f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041d4:	f7fe fd66 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 80041d8:	61b8      	str	r0, [r7, #24]
        break;
 80041da:	e013      	b.n	8004204 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041dc:	f7fe fd84 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 80041e0:	61b8      	str	r0, [r7, #24]
        break;
 80041e2:	e00f      	b.n	8004204 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041e4:	4b33      	ldr	r3, [pc, #204]	; (80042b4 <UART_SetConfig+0x330>)
 80041e6:	61bb      	str	r3, [r7, #24]
        break;
 80041e8:	e00c      	b.n	8004204 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ea:	f7fe fce5 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 80041ee:	61b8      	str	r0, [r7, #24]
        break;
 80041f0:	e008      	b.n	8004204 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041f6:	61bb      	str	r3, [r7, #24]
        break;
 80041f8:	e004      	b.n	8004204 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	77bb      	strb	r3, [r7, #30]
        break;
 8004202:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8082 	beq.w	8004310 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	005a      	lsls	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	085b      	lsrs	r3, r3, #1
 8004216:	441a      	add	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004220:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2b0f      	cmp	r3, #15
 8004226:	d916      	bls.n	8004256 <UART_SetConfig+0x2d2>
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422e:	d212      	bcs.n	8004256 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	b29b      	uxth	r3, r3
 8004234:	f023 030f 	bic.w	r3, r3, #15
 8004238:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	085b      	lsrs	r3, r3, #1
 800423e:	b29b      	uxth	r3, r3
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	b29a      	uxth	r2, r3
 8004246:	89fb      	ldrh	r3, [r7, #14]
 8004248:	4313      	orrs	r3, r2
 800424a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	89fa      	ldrh	r2, [r7, #14]
 8004252:	60da      	str	r2, [r3, #12]
 8004254:	e05c      	b.n	8004310 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	77bb      	strb	r3, [r7, #30]
 800425a:	e059      	b.n	8004310 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800425c:	7ffb      	ldrb	r3, [r7, #31]
 800425e:	2b08      	cmp	r3, #8
 8004260:	d835      	bhi.n	80042ce <UART_SetConfig+0x34a>
 8004262:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <UART_SetConfig+0x2e4>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	0800428d 	.word	0x0800428d
 800426c:	08004295 	.word	0x08004295
 8004270:	080042b9 	.word	0x080042b9
 8004274:	080042cf 	.word	0x080042cf
 8004278:	080042bf 	.word	0x080042bf
 800427c:	080042cf 	.word	0x080042cf
 8004280:	080042cf 	.word	0x080042cf
 8004284:	080042cf 	.word	0x080042cf
 8004288:	080042c7 	.word	0x080042c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800428c:	f7fe fd0a 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 8004290:	61b8      	str	r0, [r7, #24]
        break;
 8004292:	e021      	b.n	80042d8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004294:	f7fe fd28 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 8004298:	61b8      	str	r0, [r7, #24]
        break;
 800429a:	e01d      	b.n	80042d8 <UART_SetConfig+0x354>
 800429c:	40013800 	.word	0x40013800
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40004400 	.word	0x40004400
 80042a8:	40004800 	.word	0x40004800
 80042ac:	40004c00 	.word	0x40004c00
 80042b0:	40005000 	.word	0x40005000
 80042b4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042b8:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <UART_SetConfig+0x3a4>)
 80042ba:	61bb      	str	r3, [r7, #24]
        break;
 80042bc:	e00c      	b.n	80042d8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042be:	f7fe fc7b 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 80042c2:	61b8      	str	r0, [r7, #24]
        break;
 80042c4:	e008      	b.n	80042d8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ca:	61bb      	str	r3, [r7, #24]
        break;
 80042cc:	e004      	b.n	80042d8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	77bb      	strb	r3, [r7, #30]
        break;
 80042d6:	bf00      	nop
    }

    if (pclk != 0U)
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d018      	beq.n	8004310 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	085a      	lsrs	r2, r3, #1
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	441a      	add	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2b0f      	cmp	r3, #15
 80042f6:	d909      	bls.n	800430c <UART_SetConfig+0x388>
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042fe:	d205      	bcs.n	800430c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	b29a      	uxth	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60da      	str	r2, [r3, #12]
 800430a:	e001      	b.n	8004310 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800431c:	7fbb      	ldrb	r3, [r7, #30]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3720      	adds	r7, #32
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	007a1200 	.word	0x007a1200

0800432c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01a      	beq.n	8004442 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442a:	d10a      	bne.n	8004442 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	605a      	str	r2, [r3, #4]
  }
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b098      	sub	sp, #96	; 0x60
 8004474:	af02      	add	r7, sp, #8
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004480:	f7fc fccc 	bl	8000e1c <HAL_GetTick>
 8004484:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b08      	cmp	r3, #8
 8004492:	d12e      	bne.n	80044f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004494:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800449c:	2200      	movs	r2, #0
 800449e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f88c 	bl	80045c0 <UART_WaitOnFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d021      	beq.n	80044f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044c2:	653b      	str	r3, [r7, #80]	; 0x50
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044cc:	647b      	str	r3, [r7, #68]	; 0x44
 80044ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e6      	bne.n	80044ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e062      	b.n	80045b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d149      	bne.n	8004594 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004500:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004508:	2200      	movs	r2, #0
 800450a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f856 	bl	80045c0 <UART_WaitOnFlagUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d03c      	beq.n	8004594 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	623b      	str	r3, [r7, #32]
   return(result);
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800452e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004538:	633b      	str	r3, [r7, #48]	; 0x30
 800453a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800453e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e6      	bne.n	800451a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3308      	adds	r3, #8
 8004552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	60fb      	str	r3, [r7, #12]
   return(result);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0301 	bic.w	r3, r3, #1
 8004562:	64bb      	str	r3, [r7, #72]	; 0x48
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3308      	adds	r3, #8
 800456a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800456c:	61fa      	str	r2, [r7, #28]
 800456e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	69b9      	ldr	r1, [r7, #24]
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	e841 2300 	strex	r3, r2, [r1]
 8004578:	617b      	str	r3, [r7, #20]
   return(result);
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e5      	bne.n	800454c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e011      	b.n	80045b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3758      	adds	r7, #88	; 0x58
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	603b      	str	r3, [r7, #0]
 80045cc:	4613      	mov	r3, r2
 80045ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d0:	e049      	b.n	8004666 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d8:	d045      	beq.n	8004666 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045da:	f7fc fc1f 	bl	8000e1c <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d302      	bcc.n	80045f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e048      	b.n	8004686 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d031      	beq.n	8004666 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	2b08      	cmp	r3, #8
 800460e:	d110      	bne.n	8004632 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2208      	movs	r2, #8
 8004616:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f838 	bl	800468e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2208      	movs	r2, #8
 8004622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e029      	b.n	8004686 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800463c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004640:	d111      	bne.n	8004666 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800464a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f81e 	bl	800468e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e00f      	b.n	8004686 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4013      	ands	r3, r2
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	429a      	cmp	r2, r3
 8004674:	bf0c      	ite	eq
 8004676:	2301      	moveq	r3, #1
 8004678:	2300      	movne	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	429a      	cmp	r2, r3
 8004682:	d0a6      	beq.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800468e:	b480      	push	{r7}
 8004690:	b095      	sub	sp, #84	; 0x54
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469e:	e853 3f00 	ldrex	r3, [r3]
 80046a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b4:	643b      	str	r3, [r7, #64]	; 0x40
 80046b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e6      	bne.n	8004696 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3308      	adds	r3, #8
 80046ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	e853 3f00 	ldrex	r3, [r3]
 80046d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f023 0301 	bic.w	r3, r3, #1
 80046de:	64bb      	str	r3, [r7, #72]	; 0x48
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3308      	adds	r3, #8
 80046e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e5      	bne.n	80046c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004700:	2b01      	cmp	r3, #1
 8004702:	d118      	bne.n	8004736 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	60bb      	str	r3, [r7, #8]
   return(result);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f023 0310 	bic.w	r3, r3, #16
 8004718:	647b      	str	r3, [r7, #68]	; 0x44
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004722:	61bb      	str	r3, [r7, #24]
 8004724:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6979      	ldr	r1, [r7, #20]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	613b      	str	r3, [r7, #16]
   return(result);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e6      	bne.n	8004704 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	669a      	str	r2, [r3, #104]	; 0x68
}
 800474a:	bf00      	nop
 800474c:	3754      	adds	r7, #84	; 0x54
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f7ff fbef 	bl	8003f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b088      	sub	sp, #32
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	60bb      	str	r3, [r7, #8]
   return(result);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800479e:	61fb      	str	r3, [r7, #28]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	461a      	mov	r2, r3
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	6979      	ldr	r1, [r7, #20]
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	613b      	str	r3, [r7, #16]
   return(result);
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e6      	bne.n	800478a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7ff fbbb 	bl	8003f44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ce:	bf00      	nop
 80047d0:	3720      	adds	r7, #32
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b085      	sub	sp, #20
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80047f2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80047f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	b29b      	uxth	r3, r3
 8004804:	43db      	mvns	r3, r3
 8004806:	b29b      	uxth	r3, r3
 8004808:	4013      	ands	r3, r2
 800480a:	b29a      	uxth	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004820:	b084      	sub	sp, #16
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	f107 0014 	add.w	r0, r7, #20
 800482e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	b004      	add	sp, #16
 8004860:	4770      	bx	lr

08004862 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f103 0208 	add.w	r2, r3, #8
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f04f 32ff 	mov.w	r2, #4294967295
 800487a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f103 0208 	add.w	r2, r3, #8
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f103 0208 	add.w	r2, r3, #8
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	601a      	str	r2, [r3, #0]
}
 80048f8:	bf00      	nop
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491a:	d103      	bne.n	8004924 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	e00c      	b.n	800493e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3308      	adds	r3, #8
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	e002      	b.n	8004932 <vListInsert+0x2e>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	429a      	cmp	r2, r3
 800493c:	d2f6      	bcs.n	800492c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	601a      	str	r2, [r3, #0]
}
 800496a:	bf00      	nop
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004976:	b480      	push	{r7}
 8004978:	b085      	sub	sp, #20
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6892      	ldr	r2, [r2, #8]
 800498c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6852      	ldr	r2, [r2, #4]
 8004996:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d103      	bne.n	80049aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689a      	ldr	r2, [r3, #8]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	1e5a      	subs	r2, r3, #1
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80049f6:	f001 fd55 	bl	80064a4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a02:	68f9      	ldr	r1, [r7, #12]
 8004a04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a06:	fb01 f303 	mul.w	r3, r1, r3
 8004a0a:	441a      	add	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a26:	3b01      	subs	r3, #1
 8004a28:	68f9      	ldr	r1, [r7, #12]
 8004a2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a2c:	fb01 f303 	mul.w	r3, r1, r3
 8004a30:	441a      	add	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	22ff      	movs	r2, #255	; 0xff
 8004a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	22ff      	movs	r2, #255	; 0xff
 8004a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d114      	bne.n	8004a76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d01a      	beq.n	8004a8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	3310      	adds	r3, #16
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 ffe9 	bl	8005a30 <xTaskRemoveFromEventList>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d012      	beq.n	8004a8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a64:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <xQueueGenericReset+0xcc>)
 8004a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	e009      	b.n	8004a8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	3310      	adds	r3, #16
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff fef1 	bl	8004862 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3324      	adds	r3, #36	; 0x24
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff feec 	bl	8004862 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a8a:	f001 fd3b 	bl	8006504 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a8e:	2301      	movs	r3, #1
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	e000ed04 	.word	0xe000ed04

08004a9c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08a      	sub	sp, #40	; 0x28
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	613b      	str	r3, [r7, #16]
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d102      	bne.n	8004ad2 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004acc:	2300      	movs	r3, #0
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	e004      	b.n	8004adc <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	fb02 f303 	mul.w	r3, r2, r3
 8004ada:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	3348      	adds	r3, #72	; 0x48
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f001 fdc1 	bl	8006668 <pvPortMalloc>
 8004ae6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00f      	beq.n	8004b0e <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	3348      	adds	r3, #72	; 0x48
 8004af2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004afc:	79fa      	ldrb	r2, [r7, #7]
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	4613      	mov	r3, r2
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f805 	bl	8004b18 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
	}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d103      	bne.n	8004b34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e002      	b.n	8004b3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b46:	2101      	movs	r1, #1
 8004b48:	69b8      	ldr	r0, [r7, #24]
 8004b4a:	f7ff ff3f 	bl	80049cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b4e:	bf00      	nop
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b082      	sub	sp, #8
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00e      	beq.n	8004b82 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004b76:	2300      	movs	r3, #0
 8004b78:	2200      	movs	r2, #0
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f81d 	bl	8004bbc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b086      	sub	sp, #24
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	4603      	mov	r3, r0
 8004b92:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004b94:	2301      	movs	r3, #1
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6939      	ldr	r1, [r7, #16]
 8004ba2:	6978      	ldr	r0, [r7, #20]
 8004ba4:	f7ff ff7a 	bl	8004a9c <xQueueGenericCreate>
 8004ba8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f7ff ffd3 	bl	8004b56 <prvInitialiseMutex>

		return pxNewQueue;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
	}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08e      	sub	sp, #56	; 0x38
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <xQueueGenericSend+0x32>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bea:	bf00      	nop
 8004bec:	e7fe      	b.n	8004bec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d103      	bne.n	8004bfc <xQueueGenericSend+0x40>
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <xQueueGenericSend+0x44>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <xQueueGenericSend+0x46>
 8004c00:	2300      	movs	r3, #0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10a      	bne.n	8004c1c <xQueueGenericSend+0x60>
	__asm volatile
 8004c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c18:	bf00      	nop
 8004c1a:	e7fe      	b.n	8004c1a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d103      	bne.n	8004c2a <xQueueGenericSend+0x6e>
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <xQueueGenericSend+0x72>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <xQueueGenericSend+0x74>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10a      	bne.n	8004c4a <xQueueGenericSend+0x8e>
	__asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	623b      	str	r3, [r7, #32]
}
 8004c46:	bf00      	nop
 8004c48:	e7fe      	b.n	8004c48 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c4a:	f001 f8b7 	bl	8005dbc <xTaskGetSchedulerState>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <xQueueGenericSend+0x9e>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <xQueueGenericSend+0xa2>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <xQueueGenericSend+0xa4>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10a      	bne.n	8004c7a <xQueueGenericSend+0xbe>
	__asm volatile
 8004c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c68:	f383 8811 	msr	BASEPRI, r3
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	61fb      	str	r3, [r7, #28]
}
 8004c76:	bf00      	nop
 8004c78:	e7fe      	b.n	8004c78 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c7a:	f001 fc13 	bl	80064a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d302      	bcc.n	8004c90 <xQueueGenericSend+0xd4>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d129      	bne.n	8004ce4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c96:	f000 f9b3 	bl	8005000 <prvCopyDataToQueue>
 8004c9a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d010      	beq.n	8004cc6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca6:	3324      	adds	r3, #36	; 0x24
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fec1 	bl	8005a30 <xTaskRemoveFromEventList>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d013      	beq.n	8004cdc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004cb4:	4b3f      	ldr	r3, [pc, #252]	; (8004db4 <xQueueGenericSend+0x1f8>)
 8004cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	e00a      	b.n	8004cdc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ccc:	4b39      	ldr	r3, [pc, #228]	; (8004db4 <xQueueGenericSend+0x1f8>)
 8004cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004cdc:	f001 fc12 	bl	8006504 <vPortExitCritical>
				return pdPASS;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e063      	b.n	8004dac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d103      	bne.n	8004cf2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cea:	f001 fc0b 	bl	8006504 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e05c      	b.n	8004dac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d106      	bne.n	8004d06 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cf8:	f107 0314 	add.w	r3, r7, #20
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fef9 	bl	8005af4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d02:	2301      	movs	r3, #1
 8004d04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d06:	f001 fbfd 	bl	8006504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d0a:	f000 fca3 	bl	8005654 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d0e:	f001 fbc9 	bl	80064a4 <vPortEnterCritical>
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d18:	b25b      	sxtb	r3, r3
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d103      	bne.n	8004d28 <xQueueGenericSend+0x16c>
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d2e:	b25b      	sxtb	r3, r3
 8004d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d34:	d103      	bne.n	8004d3e <xQueueGenericSend+0x182>
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d3e:	f001 fbe1 	bl	8006504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d42:	1d3a      	adds	r2, r7, #4
 8004d44:	f107 0314 	add.w	r3, r7, #20
 8004d48:	4611      	mov	r1, r2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fee8 	bl	8005b20 <xTaskCheckForTimeOut>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d124      	bne.n	8004da0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d58:	f000 fa24 	bl	80051a4 <prvIsQueueFull>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d018      	beq.n	8004d94 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	3310      	adds	r3, #16
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	4611      	mov	r1, r2
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fe3c 	bl	80059e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d72:	f000 f9af 	bl	80050d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d76:	f000 fc7b 	bl	8005670 <xTaskResumeAll>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f47f af7c 	bne.w	8004c7a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004d82:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <xQueueGenericSend+0x1f8>)
 8004d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	e772      	b.n	8004c7a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d96:	f000 f99d 	bl	80050d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d9a:	f000 fc69 	bl	8005670 <xTaskResumeAll>
 8004d9e:	e76c      	b.n	8004c7a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004da2:	f000 f997 	bl	80050d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004da6:	f000 fc63 	bl	8005670 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004daa:	2300      	movs	r3, #0
		}
	}
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3738      	adds	r7, #56	; 0x38
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	e000ed04 	.word	0xe000ed04

08004db8 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08e      	sub	sp, #56	; 0x38
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10a      	bne.n	8004dea <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	623b      	str	r3, [r7, #32]
}
 8004de6:	bf00      	nop
 8004de8:	e7fe      	b.n	8004de8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	61fb      	str	r3, [r7, #28]
}
 8004e04:	bf00      	nop
 8004e06:	e7fe      	b.n	8004e06 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e08:	f000 ffd8 	bl	8005dbc <xTaskGetSchedulerState>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d102      	bne.n	8004e18 <xQueueSemaphoreTake+0x60>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <xQueueSemaphoreTake+0x64>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <xQueueSemaphoreTake+0x66>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	61bb      	str	r3, [r7, #24]
}
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e38:	f001 fb34 	bl	80064a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e40:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d024      	beq.n	8004e92 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4a:	1e5a      	subs	r2, r3, #1
 8004e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d104      	bne.n	8004e62 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004e58:	f001 f97a 	bl	8006150 <pvTaskIncrementMutexHeldCount>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e60:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00f      	beq.n	8004e8a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6c:	3310      	adds	r3, #16
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fdde 	bl	8005a30 <xTaskRemoveFromEventList>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e7a:	4b54      	ldr	r3, [pc, #336]	; (8004fcc <xQueueSemaphoreTake+0x214>)
 8004e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e8a:	f001 fb3b 	bl	8006504 <vPortExitCritical>
				return pdPASS;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e097      	b.n	8004fc2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d111      	bne.n	8004ebc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	617b      	str	r3, [r7, #20]
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004eb4:	f001 fb26 	bl	8006504 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	e082      	b.n	8004fc2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ec2:	f107 030c 	add.w	r3, r7, #12
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fe14 	bl	8005af4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ed0:	f001 fb18 	bl	8006504 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ed4:	f000 fbbe 	bl	8005654 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ed8:	f001 fae4 	bl	80064a4 <vPortEnterCritical>
 8004edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ede:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ee2:	b25b      	sxtb	r3, r3
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee8:	d103      	bne.n	8004ef2 <xQueueSemaphoreTake+0x13a>
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ef8:	b25b      	sxtb	r3, r3
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efe:	d103      	bne.n	8004f08 <xQueueSemaphoreTake+0x150>
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f08:	f001 fafc 	bl	8006504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f0c:	463a      	mov	r2, r7
 8004f0e:	f107 030c 	add.w	r3, r7, #12
 8004f12:	4611      	mov	r1, r2
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fe03 	bl	8005b20 <xTaskCheckForTimeOut>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d132      	bne.n	8004f86 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f22:	f000 f929 	bl	8005178 <prvIsQueueEmpty>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d026      	beq.n	8004f7a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d109      	bne.n	8004f48 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004f34:	f001 fab6 	bl	80064a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 ff5b 	bl	8005df8 <xTaskPriorityInherit>
 8004f42:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004f44:	f001 fade 	bl	8006504 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4a:	3324      	adds	r3, #36	; 0x24
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	4611      	mov	r1, r2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fd49 	bl	80059e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f58:	f000 f8bc 	bl	80050d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f5c:	f000 fb88 	bl	8005670 <xTaskResumeAll>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f47f af68 	bne.w	8004e38 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004f68:	4b18      	ldr	r3, [pc, #96]	; (8004fcc <xQueueSemaphoreTake+0x214>)
 8004f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	e75e      	b.n	8004e38 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004f7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f7c:	f000 f8aa 	bl	80050d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f80:	f000 fb76 	bl	8005670 <xTaskResumeAll>
 8004f84:	e758      	b.n	8004e38 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004f86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f88:	f000 f8a4 	bl	80050d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f8c:	f000 fb70 	bl	8005670 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f92:	f000 f8f1 	bl	8005178 <prvIsQueueEmpty>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f43f af4d 	beq.w	8004e38 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00d      	beq.n	8004fc0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004fa4:	f001 fa7e 	bl	80064a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004fa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004faa:	f000 f811 	bl	8004fd0 <prvGetDisinheritPriorityAfterTimeout>
 8004fae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f001 f82a 	bl	8006010 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004fbc:	f001 faa2 	bl	8006504 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004fc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3738      	adds	r7, #56	; 0x38
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	e000ed04 	.word	0xe000ed04

08004fd0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d006      	beq.n	8004fee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f1c3 0307 	rsb	r3, r3, #7
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	e001      	b.n	8004ff2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
	}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10d      	bne.n	800503a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d14d      	bne.n	80050c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	4618      	mov	r0, r3
 800502c:	f000 ff6a 	bl	8005f04 <xTaskPriorityDisinherit>
 8005030:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	605a      	str	r2, [r3, #4]
 8005038:	e043      	b.n	80050c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d119      	bne.n	8005074 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6898      	ldr	r0, [r3, #8]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	461a      	mov	r2, r3
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	f001 fd90 	bl	8006b70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005058:	441a      	add	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	429a      	cmp	r2, r3
 8005068:	d32b      	bcc.n	80050c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	609a      	str	r2, [r3, #8]
 8005072:	e026      	b.n	80050c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	68d8      	ldr	r0, [r3, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	461a      	mov	r2, r3
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	f001 fd76 	bl	8006b70 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	425b      	negs	r3, r3
 800508e:	441a      	add	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d207      	bcs.n	80050b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	425b      	negs	r3, r3
 80050aa:	441a      	add	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d105      	bne.n	80050c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	3b01      	subs	r3, #1
 80050c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80050ca:	697b      	ldr	r3, [r7, #20]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050dc:	f001 f9e2 	bl	80064a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050e8:	e011      	b.n	800510e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d012      	beq.n	8005118 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3324      	adds	r3, #36	; 0x24
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fc9a 	bl	8005a30 <xTaskRemoveFromEventList>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005102:	f000 fd6f 	bl	8005be4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	3b01      	subs	r3, #1
 800510a:	b2db      	uxtb	r3, r3
 800510c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800510e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005112:	2b00      	cmp	r3, #0
 8005114:	dce9      	bgt.n	80050ea <prvUnlockQueue+0x16>
 8005116:	e000      	b.n	800511a <prvUnlockQueue+0x46>
					break;
 8005118:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	22ff      	movs	r2, #255	; 0xff
 800511e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005122:	f001 f9ef 	bl	8006504 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005126:	f001 f9bd 	bl	80064a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005130:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005132:	e011      	b.n	8005158 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d012      	beq.n	8005162 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3310      	adds	r3, #16
 8005140:	4618      	mov	r0, r3
 8005142:	f000 fc75 	bl	8005a30 <xTaskRemoveFromEventList>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800514c:	f000 fd4a 	bl	8005be4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005150:	7bbb      	ldrb	r3, [r7, #14]
 8005152:	3b01      	subs	r3, #1
 8005154:	b2db      	uxtb	r3, r3
 8005156:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005158:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800515c:	2b00      	cmp	r3, #0
 800515e:	dce9      	bgt.n	8005134 <prvUnlockQueue+0x60>
 8005160:	e000      	b.n	8005164 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005162:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	22ff      	movs	r2, #255	; 0xff
 8005168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800516c:	f001 f9ca 	bl	8006504 <vPortExitCritical>
}
 8005170:	bf00      	nop
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005180:	f001 f990 	bl	80064a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005188:	2b00      	cmp	r3, #0
 800518a:	d102      	bne.n	8005192 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800518c:	2301      	movs	r3, #1
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	e001      	b.n	8005196 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005196:	f001 f9b5 	bl	8006504 <vPortExitCritical>

	return xReturn;
 800519a:	68fb      	ldr	r3, [r7, #12]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051ac:	f001 f97a 	bl	80064a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d102      	bne.n	80051c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051bc:	2301      	movs	r3, #1
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	e001      	b.n	80051c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051c6:	f001 f99d 	bl	8006504 <vPortExitCritical>

	return xReturn;
 80051ca:	68fb      	ldr	r3, [r7, #12]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08e      	sub	sp, #56	; 0x38
 80051d8:	af04      	add	r7, sp, #16
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10a      	bne.n	80051fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	623b      	str	r3, [r7, #32]
}
 80051fa:	bf00      	nop
 80051fc:	e7fe      	b.n	80051fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10a      	bne.n	800521a <xTaskCreateStatic+0x46>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	61fb      	str	r3, [r7, #28]
}
 8005216:	bf00      	nop
 8005218:	e7fe      	b.n	8005218 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800521a:	23a0      	movs	r3, #160	; 0xa0
 800521c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2ba0      	cmp	r3, #160	; 0xa0
 8005222:	d00a      	beq.n	800523a <xTaskCreateStatic+0x66>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	61bb      	str	r3, [r7, #24]
}
 8005236:	bf00      	nop
 8005238:	e7fe      	b.n	8005238 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01e      	beq.n	800527e <xTaskCreateStatic+0xaa>
 8005240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005242:	2b00      	cmp	r3, #0
 8005244:	d01b      	beq.n	800527e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800524e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	2202      	movs	r2, #2
 8005254:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005258:	2300      	movs	r3, #0
 800525a:	9303      	str	r3, [sp, #12]
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	9302      	str	r3, [sp, #8]
 8005260:	f107 0314 	add.w	r3, r7, #20
 8005264:	9301      	str	r3, [sp, #4]
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f851 	bl	8005318 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005276:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005278:	f000 f8e4 	bl	8005444 <prvAddNewTaskToReadyList>
 800527c:	e001      	b.n	8005282 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800527e:	2300      	movs	r3, #0
 8005280:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005282:	697b      	ldr	r3, [r7, #20]
	}
 8005284:	4618      	mov	r0, r3
 8005286:	3728      	adds	r7, #40	; 0x28
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08c      	sub	sp, #48	; 0x30
 8005290:	af04      	add	r7, sp, #16
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	4613      	mov	r3, r2
 800529a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800529c:	88fb      	ldrh	r3, [r7, #6]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4618      	mov	r0, r3
 80052a2:	f001 f9e1 	bl	8006668 <pvPortMalloc>
 80052a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00e      	beq.n	80052cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80052ae:	20a0      	movs	r0, #160	; 0xa0
 80052b0:	f001 f9da 	bl	8006668 <pvPortMalloc>
 80052b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	631a      	str	r2, [r3, #48]	; 0x30
 80052c2:	e005      	b.n	80052d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052c4:	6978      	ldr	r0, [r7, #20]
 80052c6:	f001 fa93 	bl	80067f0 <vPortFree>
 80052ca:	e001      	b.n	80052d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d017      	beq.n	8005306 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052de:	88fa      	ldrh	r2, [r7, #6]
 80052e0:	2300      	movs	r3, #0
 80052e2:	9303      	str	r3, [sp, #12]
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	9302      	str	r3, [sp, #8]
 80052e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 f80f 	bl	8005318 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052fa:	69f8      	ldr	r0, [r7, #28]
 80052fc:	f000 f8a2 	bl	8005444 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005300:	2301      	movs	r3, #1
 8005302:	61bb      	str	r3, [r7, #24]
 8005304:	e002      	b.n	800530c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005306:	f04f 33ff 	mov.w	r3, #4294967295
 800530a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800530c:	69bb      	ldr	r3, [r7, #24]
	}
 800530e:	4618      	mov	r0, r3
 8005310:	3720      	adds	r7, #32
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005330:	3b01      	subs	r3, #1
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	f023 0307 	bic.w	r3, r3, #7
 800533e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <prvInitialiseNewTask+0x48>
	__asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	617b      	str	r3, [r7, #20]
}
 800535c:	bf00      	nop
 800535e:	e7fe      	b.n	800535e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005360:	2300      	movs	r3, #0
 8005362:	61fb      	str	r3, [r7, #28]
 8005364:	e012      	b.n	800538c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	4413      	add	r3, r2
 800536c:	7819      	ldrb	r1, [r3, #0]
 800536e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	4413      	add	r3, r2
 8005374:	3334      	adds	r3, #52	; 0x34
 8005376:	460a      	mov	r2, r1
 8005378:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	4413      	add	r3, r2
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d006      	beq.n	8005394 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	3301      	adds	r3, #1
 800538a:	61fb      	str	r3, [r7, #28]
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	2b0f      	cmp	r3, #15
 8005390:	d9e9      	bls.n	8005366 <prvInitialiseNewTask+0x4e>
 8005392:	e000      	b.n	8005396 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005394:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	2b06      	cmp	r3, #6
 80053a2:	d901      	bls.n	80053a8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053a4:	2306      	movs	r3, #6
 80053a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053b2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	2200      	movs	r2, #0
 80053b8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	3304      	adds	r3, #4
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff fa6f 	bl	80048a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	3318      	adds	r3, #24
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff fa6a 	bl	80048a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d6:	f1c3 0207 	rsb	r2, r3, #7
 80053da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	2200      	movs	r2, #0
 80053e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	334c      	adds	r3, #76	; 0x4c
 80053f8:	224c      	movs	r2, #76	; 0x4c
 80053fa:	2100      	movs	r1, #0
 80053fc:	4618      	mov	r0, r3
 80053fe:	f001 fb2d 	bl	8006a5c <memset>
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	4a0c      	ldr	r2, [pc, #48]	; (8005438 <prvInitialiseNewTask+0x120>)
 8005406:	651a      	str	r2, [r3, #80]	; 0x50
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	4a0c      	ldr	r2, [pc, #48]	; (800543c <prvInitialiseNewTask+0x124>)
 800540c:	655a      	str	r2, [r3, #84]	; 0x54
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005410:	4a0b      	ldr	r2, [pc, #44]	; (8005440 <prvInitialiseNewTask+0x128>)
 8005412:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	68f9      	ldr	r1, [r7, #12]
 8005418:	69b8      	ldr	r0, [r7, #24]
 800541a:	f000 ff13 	bl	8006244 <pxPortInitialiseStack>
 800541e:	4602      	mov	r2, r0
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800542e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005430:	bf00      	nop
 8005432:	3720      	adds	r7, #32
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	200014fc 	.word	0x200014fc
 800543c:	20001564 	.word	0x20001564
 8005440:	200015cc 	.word	0x200015cc

08005444 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800544c:	f001 f82a 	bl	80064a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005450:	4b2a      	ldr	r3, [pc, #168]	; (80054fc <prvAddNewTaskToReadyList+0xb8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3301      	adds	r3, #1
 8005456:	4a29      	ldr	r2, [pc, #164]	; (80054fc <prvAddNewTaskToReadyList+0xb8>)
 8005458:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800545a:	4b29      	ldr	r3, [pc, #164]	; (8005500 <prvAddNewTaskToReadyList+0xbc>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d109      	bne.n	8005476 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005462:	4a27      	ldr	r2, [pc, #156]	; (8005500 <prvAddNewTaskToReadyList+0xbc>)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005468:	4b24      	ldr	r3, [pc, #144]	; (80054fc <prvAddNewTaskToReadyList+0xb8>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d110      	bne.n	8005492 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005470:	f000 fbdc 	bl	8005c2c <prvInitialiseTaskLists>
 8005474:	e00d      	b.n	8005492 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005476:	4b23      	ldr	r3, [pc, #140]	; (8005504 <prvAddNewTaskToReadyList+0xc0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d109      	bne.n	8005492 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800547e:	4b20      	ldr	r3, [pc, #128]	; (8005500 <prvAddNewTaskToReadyList+0xbc>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005488:	429a      	cmp	r2, r3
 800548a:	d802      	bhi.n	8005492 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800548c:	4a1c      	ldr	r2, [pc, #112]	; (8005500 <prvAddNewTaskToReadyList+0xbc>)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005492:	4b1d      	ldr	r3, [pc, #116]	; (8005508 <prvAddNewTaskToReadyList+0xc4>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3301      	adds	r3, #1
 8005498:	4a1b      	ldr	r2, [pc, #108]	; (8005508 <prvAddNewTaskToReadyList+0xc4>)
 800549a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a0:	2201      	movs	r2, #1
 80054a2:	409a      	lsls	r2, r3
 80054a4:	4b19      	ldr	r3, [pc, #100]	; (800550c <prvAddNewTaskToReadyList+0xc8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	4a18      	ldr	r2, [pc, #96]	; (800550c <prvAddNewTaskToReadyList+0xc8>)
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4a15      	ldr	r2, [pc, #84]	; (8005510 <prvAddNewTaskToReadyList+0xcc>)
 80054bc:	441a      	add	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3304      	adds	r3, #4
 80054c2:	4619      	mov	r1, r3
 80054c4:	4610      	mov	r0, r2
 80054c6:	f7ff f9f9 	bl	80048bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054ca:	f001 f81b 	bl	8006504 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054ce:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <prvAddNewTaskToReadyList+0xc0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00e      	beq.n	80054f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054d6:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <prvAddNewTaskToReadyList+0xbc>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d207      	bcs.n	80054f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054e4:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <prvAddNewTaskToReadyList+0xd0>)
 80054e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054f4:	bf00      	nop
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	200008b0 	.word	0x200008b0
 8005500:	200007b0 	.word	0x200007b0
 8005504:	200008bc 	.word	0x200008bc
 8005508:	200008cc 	.word	0x200008cc
 800550c:	200008b8 	.word	0x200008b8
 8005510:	200007b4 	.word	0x200007b4
 8005514:	e000ed04 	.word	0xe000ed04

08005518 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005520:	2300      	movs	r3, #0
 8005522:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d017      	beq.n	800555a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800552a:	4b13      	ldr	r3, [pc, #76]	; (8005578 <vTaskDelay+0x60>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <vTaskDelay+0x30>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	60bb      	str	r3, [r7, #8]
}
 8005544:	bf00      	nop
 8005546:	e7fe      	b.n	8005546 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005548:	f000 f884 	bl	8005654 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800554c:	2100      	movs	r1, #0
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fe12 	bl	8006178 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005554:	f000 f88c 	bl	8005670 <xTaskResumeAll>
 8005558:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d107      	bne.n	8005570 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005560:	4b06      	ldr	r3, [pc, #24]	; (800557c <vTaskDelay+0x64>)
 8005562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005570:	bf00      	nop
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	200008d8 	.word	0x200008d8
 800557c:	e000ed04 	.word	0xe000ed04

08005580 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08a      	sub	sp, #40	; 0x28
 8005584:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005586:	2300      	movs	r3, #0
 8005588:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800558a:	2300      	movs	r3, #0
 800558c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800558e:	463a      	mov	r2, r7
 8005590:	1d39      	adds	r1, r7, #4
 8005592:	f107 0308 	add.w	r3, r7, #8
 8005596:	4618      	mov	r0, r3
 8005598:	f7fa fe72 	bl	8000280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800559c:	6839      	ldr	r1, [r7, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	9202      	str	r2, [sp, #8]
 80055a4:	9301      	str	r3, [sp, #4]
 80055a6:	2300      	movs	r3, #0
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	2300      	movs	r3, #0
 80055ac:	460a      	mov	r2, r1
 80055ae:	4921      	ldr	r1, [pc, #132]	; (8005634 <vTaskStartScheduler+0xb4>)
 80055b0:	4821      	ldr	r0, [pc, #132]	; (8005638 <vTaskStartScheduler+0xb8>)
 80055b2:	f7ff fe0f 	bl	80051d4 <xTaskCreateStatic>
 80055b6:	4603      	mov	r3, r0
 80055b8:	4a20      	ldr	r2, [pc, #128]	; (800563c <vTaskStartScheduler+0xbc>)
 80055ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055bc:	4b1f      	ldr	r3, [pc, #124]	; (800563c <vTaskStartScheduler+0xbc>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055c4:	2301      	movs	r3, #1
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	e001      	b.n	80055ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d11b      	bne.n	800560c <vTaskStartScheduler+0x8c>
	__asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	613b      	str	r3, [r7, #16]
}
 80055e6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055e8:	4b15      	ldr	r3, [pc, #84]	; (8005640 <vTaskStartScheduler+0xc0>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	334c      	adds	r3, #76	; 0x4c
 80055ee:	4a15      	ldr	r2, [pc, #84]	; (8005644 <vTaskStartScheduler+0xc4>)
 80055f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055f2:	4b15      	ldr	r3, [pc, #84]	; (8005648 <vTaskStartScheduler+0xc8>)
 80055f4:	f04f 32ff 	mov.w	r2, #4294967295
 80055f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055fa:	4b14      	ldr	r3, [pc, #80]	; (800564c <vTaskStartScheduler+0xcc>)
 80055fc:	2201      	movs	r2, #1
 80055fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005600:	4b13      	ldr	r3, [pc, #76]	; (8005650 <vTaskStartScheduler+0xd0>)
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005606:	f000 feab 	bl	8006360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800560a:	e00e      	b.n	800562a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d10a      	bne.n	800562a <vTaskStartScheduler+0xaa>
	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	60fb      	str	r3, [r7, #12]
}
 8005626:	bf00      	nop
 8005628:	e7fe      	b.n	8005628 <vTaskStartScheduler+0xa8>
}
 800562a:	bf00      	nop
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	080075bc 	.word	0x080075bc
 8005638:	08005bfd 	.word	0x08005bfd
 800563c:	200008d4 	.word	0x200008d4
 8005640:	200007b0 	.word	0x200007b0
 8005644:	2000005c 	.word	0x2000005c
 8005648:	200008d0 	.word	0x200008d0
 800564c:	200008bc 	.word	0x200008bc
 8005650:	200008b4 	.word	0x200008b4

08005654 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005658:	4b04      	ldr	r3, [pc, #16]	; (800566c <vTaskSuspendAll+0x18>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3301      	adds	r3, #1
 800565e:	4a03      	ldr	r2, [pc, #12]	; (800566c <vTaskSuspendAll+0x18>)
 8005660:	6013      	str	r3, [r2, #0]
}
 8005662:	bf00      	nop
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	200008d8 	.word	0x200008d8

08005670 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800567a:	2300      	movs	r3, #0
 800567c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800567e:	4b41      	ldr	r3, [pc, #260]	; (8005784 <xTaskResumeAll+0x114>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10a      	bne.n	800569c <xTaskResumeAll+0x2c>
	__asm volatile
 8005686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	603b      	str	r3, [r7, #0]
}
 8005698:	bf00      	nop
 800569a:	e7fe      	b.n	800569a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800569c:	f000 ff02 	bl	80064a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056a0:	4b38      	ldr	r3, [pc, #224]	; (8005784 <xTaskResumeAll+0x114>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	4a37      	ldr	r2, [pc, #220]	; (8005784 <xTaskResumeAll+0x114>)
 80056a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056aa:	4b36      	ldr	r3, [pc, #216]	; (8005784 <xTaskResumeAll+0x114>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d161      	bne.n	8005776 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056b2:	4b35      	ldr	r3, [pc, #212]	; (8005788 <xTaskResumeAll+0x118>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d05d      	beq.n	8005776 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056ba:	e02e      	b.n	800571a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80056bc:	4b33      	ldr	r3, [pc, #204]	; (800578c <xTaskResumeAll+0x11c>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3318      	adds	r3, #24
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff f954 	bl	8004976 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3304      	adds	r3, #4
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff f94f 	bl	8004976 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	2201      	movs	r2, #1
 80056de:	409a      	lsls	r2, r3
 80056e0:	4b2b      	ldr	r3, [pc, #172]	; (8005790 <xTaskResumeAll+0x120>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	4a2a      	ldr	r2, [pc, #168]	; (8005790 <xTaskResumeAll+0x120>)
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ee:	4613      	mov	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4a27      	ldr	r2, [pc, #156]	; (8005794 <xTaskResumeAll+0x124>)
 80056f8:	441a      	add	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3304      	adds	r3, #4
 80056fe:	4619      	mov	r1, r3
 8005700:	4610      	mov	r0, r2
 8005702:	f7ff f8db 	bl	80048bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570a:	4b23      	ldr	r3, [pc, #140]	; (8005798 <xTaskResumeAll+0x128>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	429a      	cmp	r2, r3
 8005712:	d302      	bcc.n	800571a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005714:	4b21      	ldr	r3, [pc, #132]	; (800579c <xTaskResumeAll+0x12c>)
 8005716:	2201      	movs	r2, #1
 8005718:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800571a:	4b1c      	ldr	r3, [pc, #112]	; (800578c <xTaskResumeAll+0x11c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1cc      	bne.n	80056bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005728:	f000 fb22 	bl	8005d70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800572c:	4b1c      	ldr	r3, [pc, #112]	; (80057a0 <xTaskResumeAll+0x130>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d010      	beq.n	800575a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005738:	f000 f836 	bl	80057a8 <xTaskIncrementTick>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005742:	4b16      	ldr	r3, [pc, #88]	; (800579c <xTaskResumeAll+0x12c>)
 8005744:	2201      	movs	r2, #1
 8005746:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3b01      	subs	r3, #1
 800574c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1f1      	bne.n	8005738 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005754:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <xTaskResumeAll+0x130>)
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800575a:	4b10      	ldr	r3, [pc, #64]	; (800579c <xTaskResumeAll+0x12c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d009      	beq.n	8005776 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005762:	2301      	movs	r3, #1
 8005764:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005766:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <xTaskResumeAll+0x134>)
 8005768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005776:	f000 fec5 	bl	8006504 <vPortExitCritical>

	return xAlreadyYielded;
 800577a:	68bb      	ldr	r3, [r7, #8]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	200008d8 	.word	0x200008d8
 8005788:	200008b0 	.word	0x200008b0
 800578c:	20000870 	.word	0x20000870
 8005790:	200008b8 	.word	0x200008b8
 8005794:	200007b4 	.word	0x200007b4
 8005798:	200007b0 	.word	0x200007b0
 800579c:	200008c4 	.word	0x200008c4
 80057a0:	200008c0 	.word	0x200008c0
 80057a4:	e000ed04 	.word	0xe000ed04

080057a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057ae:	2300      	movs	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057b2:	4b51      	ldr	r3, [pc, #324]	; (80058f8 <xTaskIncrementTick+0x150>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f040 808d 	bne.w	80058d6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057bc:	4b4f      	ldr	r3, [pc, #316]	; (80058fc <xTaskIncrementTick+0x154>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3301      	adds	r3, #1
 80057c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057c4:	4a4d      	ldr	r2, [pc, #308]	; (80058fc <xTaskIncrementTick+0x154>)
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d120      	bne.n	8005812 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80057d0:	4b4b      	ldr	r3, [pc, #300]	; (8005900 <xTaskIncrementTick+0x158>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	603b      	str	r3, [r7, #0]
}
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <xTaskIncrementTick+0x46>
 80057f0:	4b43      	ldr	r3, [pc, #268]	; (8005900 <xTaskIncrementTick+0x158>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	4b43      	ldr	r3, [pc, #268]	; (8005904 <xTaskIncrementTick+0x15c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a41      	ldr	r2, [pc, #260]	; (8005900 <xTaskIncrementTick+0x158>)
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	4a41      	ldr	r2, [pc, #260]	; (8005904 <xTaskIncrementTick+0x15c>)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	4b40      	ldr	r3, [pc, #256]	; (8005908 <xTaskIncrementTick+0x160>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3301      	adds	r3, #1
 800580a:	4a3f      	ldr	r2, [pc, #252]	; (8005908 <xTaskIncrementTick+0x160>)
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	f000 faaf 	bl	8005d70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005812:	4b3e      	ldr	r3, [pc, #248]	; (800590c <xTaskIncrementTick+0x164>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	429a      	cmp	r2, r3
 800581a:	d34d      	bcc.n	80058b8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800581c:	4b38      	ldr	r3, [pc, #224]	; (8005900 <xTaskIncrementTick+0x158>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <xTaskIncrementTick+0x82>
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <xTaskIncrementTick+0x84>
 800582a:	2300      	movs	r3, #0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005830:	4b36      	ldr	r3, [pc, #216]	; (800590c <xTaskIncrementTick+0x164>)
 8005832:	f04f 32ff 	mov.w	r2, #4294967295
 8005836:	601a      	str	r2, [r3, #0]
					break;
 8005838:	e03e      	b.n	80058b8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800583a:	4b31      	ldr	r3, [pc, #196]	; (8005900 <xTaskIncrementTick+0x158>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	429a      	cmp	r2, r3
 8005850:	d203      	bcs.n	800585a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005852:	4a2e      	ldr	r2, [pc, #184]	; (800590c <xTaskIncrementTick+0x164>)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6013      	str	r3, [r2, #0]
						break;
 8005858:	e02e      	b.n	80058b8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	3304      	adds	r3, #4
 800585e:	4618      	mov	r0, r3
 8005860:	f7ff f889 	bl	8004976 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005868:	2b00      	cmp	r3, #0
 800586a:	d004      	beq.n	8005876 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	3318      	adds	r3, #24
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff f880 	bl	8004976 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587a:	2201      	movs	r2, #1
 800587c:	409a      	lsls	r2, r3
 800587e:	4b24      	ldr	r3, [pc, #144]	; (8005910 <xTaskIncrementTick+0x168>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4313      	orrs	r3, r2
 8005884:	4a22      	ldr	r2, [pc, #136]	; (8005910 <xTaskIncrementTick+0x168>)
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <xTaskIncrementTick+0x16c>)
 8005896:	441a      	add	r2, r3
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	3304      	adds	r3, #4
 800589c:	4619      	mov	r1, r3
 800589e:	4610      	mov	r0, r2
 80058a0:	f7ff f80c 	bl	80048bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a8:	4b1b      	ldr	r3, [pc, #108]	; (8005918 <xTaskIncrementTick+0x170>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d3b4      	bcc.n	800581c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80058b2:	2301      	movs	r3, #1
 80058b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058b6:	e7b1      	b.n	800581c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058b8:	4b17      	ldr	r3, [pc, #92]	; (8005918 <xTaskIncrementTick+0x170>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058be:	4915      	ldr	r1, [pc, #84]	; (8005914 <xTaskIncrementTick+0x16c>)
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	440b      	add	r3, r1
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d907      	bls.n	80058e0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80058d0:	2301      	movs	r3, #1
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	e004      	b.n	80058e0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80058d6:	4b11      	ldr	r3, [pc, #68]	; (800591c <xTaskIncrementTick+0x174>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3301      	adds	r3, #1
 80058dc:	4a0f      	ldr	r2, [pc, #60]	; (800591c <xTaskIncrementTick+0x174>)
 80058de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80058e0:	4b0f      	ldr	r3, [pc, #60]	; (8005920 <xTaskIncrementTick+0x178>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80058e8:	2301      	movs	r3, #1
 80058ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80058ec:	697b      	ldr	r3, [r7, #20]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	200008d8 	.word	0x200008d8
 80058fc:	200008b4 	.word	0x200008b4
 8005900:	20000868 	.word	0x20000868
 8005904:	2000086c 	.word	0x2000086c
 8005908:	200008c8 	.word	0x200008c8
 800590c:	200008d0 	.word	0x200008d0
 8005910:	200008b8 	.word	0x200008b8
 8005914:	200007b4 	.word	0x200007b4
 8005918:	200007b0 	.word	0x200007b0
 800591c:	200008c0 	.word	0x200008c0
 8005920:	200008c4 	.word	0x200008c4

08005924 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800592a:	4b29      	ldr	r3, [pc, #164]	; (80059d0 <vTaskSwitchContext+0xac>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005932:	4b28      	ldr	r3, [pc, #160]	; (80059d4 <vTaskSwitchContext+0xb0>)
 8005934:	2201      	movs	r2, #1
 8005936:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005938:	e044      	b.n	80059c4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800593a:	4b26      	ldr	r3, [pc, #152]	; (80059d4 <vTaskSwitchContext+0xb0>)
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005940:	4b25      	ldr	r3, [pc, #148]	; (80059d8 <vTaskSwitchContext+0xb4>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	fab3 f383 	clz	r3, r3
 800594c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800594e:	7afb      	ldrb	r3, [r7, #11]
 8005950:	f1c3 031f 	rsb	r3, r3, #31
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	4921      	ldr	r1, [pc, #132]	; (80059dc <vTaskSwitchContext+0xb8>)
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	440b      	add	r3, r1
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10a      	bne.n	8005980 <vTaskSwitchContext+0x5c>
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	607b      	str	r3, [r7, #4]
}
 800597c:	bf00      	nop
 800597e:	e7fe      	b.n	800597e <vTaskSwitchContext+0x5a>
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	4613      	mov	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4a14      	ldr	r2, [pc, #80]	; (80059dc <vTaskSwitchContext+0xb8>)
 800598c:	4413      	add	r3, r2
 800598e:	613b      	str	r3, [r7, #16]
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	605a      	str	r2, [r3, #4]
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	3308      	adds	r3, #8
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d104      	bne.n	80059b0 <vTaskSwitchContext+0x8c>
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	605a      	str	r2, [r3, #4]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	4a0a      	ldr	r2, [pc, #40]	; (80059e0 <vTaskSwitchContext+0xbc>)
 80059b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059ba:	4b09      	ldr	r3, [pc, #36]	; (80059e0 <vTaskSwitchContext+0xbc>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	334c      	adds	r3, #76	; 0x4c
 80059c0:	4a08      	ldr	r2, [pc, #32]	; (80059e4 <vTaskSwitchContext+0xc0>)
 80059c2:	6013      	str	r3, [r2, #0]
}
 80059c4:	bf00      	nop
 80059c6:	371c      	adds	r7, #28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	200008d8 	.word	0x200008d8
 80059d4:	200008c4 	.word	0x200008c4
 80059d8:	200008b8 	.word	0x200008b8
 80059dc:	200007b4 	.word	0x200007b4
 80059e0:	200007b0 	.word	0x200007b0
 80059e4:	2000005c 	.word	0x2000005c

080059e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	60fb      	str	r3, [r7, #12]
}
 8005a0a:	bf00      	nop
 8005a0c:	e7fe      	b.n	8005a0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a0e:	4b07      	ldr	r3, [pc, #28]	; (8005a2c <vTaskPlaceOnEventList+0x44>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3318      	adds	r3, #24
 8005a14:	4619      	mov	r1, r3
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fe ff74 	bl	8004904 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	6838      	ldr	r0, [r7, #0]
 8005a20:	f000 fbaa 	bl	8006178 <prvAddCurrentTaskToDelayedList>
}
 8005a24:	bf00      	nop
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	200007b0 	.word	0x200007b0

08005a30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10a      	bne.n	8005a5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	60fb      	str	r3, [r7, #12]
}
 8005a58:	bf00      	nop
 8005a5a:	e7fe      	b.n	8005a5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	3318      	adds	r3, #24
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fe ff88 	bl	8004976 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a66:	4b1d      	ldr	r3, [pc, #116]	; (8005adc <xTaskRemoveFromEventList+0xac>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d11c      	bne.n	8005aa8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	3304      	adds	r3, #4
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fe ff7f 	bl	8004976 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	409a      	lsls	r2, r3
 8005a80:	4b17      	ldr	r3, [pc, #92]	; (8005ae0 <xTaskRemoveFromEventList+0xb0>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	4a16      	ldr	r2, [pc, #88]	; (8005ae0 <xTaskRemoveFromEventList+0xb0>)
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4a13      	ldr	r2, [pc, #76]	; (8005ae4 <xTaskRemoveFromEventList+0xb4>)
 8005a98:	441a      	add	r2, r3
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	f7fe ff0b 	bl	80048bc <vListInsertEnd>
 8005aa6:	e005      	b.n	8005ab4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	3318      	adds	r3, #24
 8005aac:	4619      	mov	r1, r3
 8005aae:	480e      	ldr	r0, [pc, #56]	; (8005ae8 <xTaskRemoveFromEventList+0xb8>)
 8005ab0:	f7fe ff04 	bl	80048bc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab8:	4b0c      	ldr	r3, [pc, #48]	; (8005aec <xTaskRemoveFromEventList+0xbc>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d905      	bls.n	8005ace <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ac6:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <xTaskRemoveFromEventList+0xc0>)
 8005ac8:	2201      	movs	r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	e001      	b.n	8005ad2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005ad2:	697b      	ldr	r3, [r7, #20]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	200008d8 	.word	0x200008d8
 8005ae0:	200008b8 	.word	0x200008b8
 8005ae4:	200007b4 	.word	0x200007b4
 8005ae8:	20000870 	.word	0x20000870
 8005aec:	200007b0 	.word	0x200007b0
 8005af0:	200008c4 	.word	0x200008c4

08005af4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005afc:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <vTaskInternalSetTimeOutState+0x24>)
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b04:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <vTaskInternalSetTimeOutState+0x28>)
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	605a      	str	r2, [r3, #4]
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	200008c8 	.word	0x200008c8
 8005b1c:	200008b4 	.word	0x200008b4

08005b20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b088      	sub	sp, #32
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	613b      	str	r3, [r7, #16]
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10a      	bne.n	8005b62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	60fb      	str	r3, [r7, #12]
}
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005b62:	f000 fc9f 	bl	80064a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b66:	4b1d      	ldr	r3, [pc, #116]	; (8005bdc <xTaskCheckForTimeOut+0xbc>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7e:	d102      	bne.n	8005b86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	61fb      	str	r3, [r7, #28]
 8005b84:	e023      	b.n	8005bce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4b15      	ldr	r3, [pc, #84]	; (8005be0 <xTaskCheckForTimeOut+0xc0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d007      	beq.n	8005ba2 <xTaskCheckForTimeOut+0x82>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d302      	bcc.n	8005ba2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	61fb      	str	r3, [r7, #28]
 8005ba0:	e015      	b.n	8005bce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d20b      	bcs.n	8005bc4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	1ad2      	subs	r2, r2, r3
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff ff9b 	bl	8005af4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61fb      	str	r3, [r7, #28]
 8005bc2:	e004      	b.n	8005bce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005bce:	f000 fc99 	bl	8006504 <vPortExitCritical>

	return xReturn;
 8005bd2:	69fb      	ldr	r3, [r7, #28]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3720      	adds	r7, #32
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	200008b4 	.word	0x200008b4
 8005be0:	200008c8 	.word	0x200008c8

08005be4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005be8:	4b03      	ldr	r3, [pc, #12]	; (8005bf8 <vTaskMissedYield+0x14>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	601a      	str	r2, [r3, #0]
}
 8005bee:	bf00      	nop
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	200008c4 	.word	0x200008c4

08005bfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c04:	f000 f852 	bl	8005cac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c08:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <prvIdleTask+0x28>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d9f9      	bls.n	8005c04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c10:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <prvIdleTask+0x2c>)
 8005c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c20:	e7f0      	b.n	8005c04 <prvIdleTask+0x8>
 8005c22:	bf00      	nop
 8005c24:	200007b4 	.word	0x200007b4
 8005c28:	e000ed04 	.word	0xe000ed04

08005c2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c32:	2300      	movs	r3, #0
 8005c34:	607b      	str	r3, [r7, #4]
 8005c36:	e00c      	b.n	8005c52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4a12      	ldr	r2, [pc, #72]	; (8005c8c <prvInitialiseTaskLists+0x60>)
 8005c44:	4413      	add	r3, r2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fe fe0b 	bl	8004862 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	607b      	str	r3, [r7, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b06      	cmp	r3, #6
 8005c56:	d9ef      	bls.n	8005c38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c58:	480d      	ldr	r0, [pc, #52]	; (8005c90 <prvInitialiseTaskLists+0x64>)
 8005c5a:	f7fe fe02 	bl	8004862 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c5e:	480d      	ldr	r0, [pc, #52]	; (8005c94 <prvInitialiseTaskLists+0x68>)
 8005c60:	f7fe fdff 	bl	8004862 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c64:	480c      	ldr	r0, [pc, #48]	; (8005c98 <prvInitialiseTaskLists+0x6c>)
 8005c66:	f7fe fdfc 	bl	8004862 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c6a:	480c      	ldr	r0, [pc, #48]	; (8005c9c <prvInitialiseTaskLists+0x70>)
 8005c6c:	f7fe fdf9 	bl	8004862 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c70:	480b      	ldr	r0, [pc, #44]	; (8005ca0 <prvInitialiseTaskLists+0x74>)
 8005c72:	f7fe fdf6 	bl	8004862 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c76:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <prvInitialiseTaskLists+0x78>)
 8005c78:	4a05      	ldr	r2, [pc, #20]	; (8005c90 <prvInitialiseTaskLists+0x64>)
 8005c7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ca8 <prvInitialiseTaskLists+0x7c>)
 8005c7e:	4a05      	ldr	r2, [pc, #20]	; (8005c94 <prvInitialiseTaskLists+0x68>)
 8005c80:	601a      	str	r2, [r3, #0]
}
 8005c82:	bf00      	nop
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	200007b4 	.word	0x200007b4
 8005c90:	20000840 	.word	0x20000840
 8005c94:	20000854 	.word	0x20000854
 8005c98:	20000870 	.word	0x20000870
 8005c9c:	20000884 	.word	0x20000884
 8005ca0:	2000089c 	.word	0x2000089c
 8005ca4:	20000868 	.word	0x20000868
 8005ca8:	2000086c 	.word	0x2000086c

08005cac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cb2:	e019      	b.n	8005ce8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005cb4:	f000 fbf6 	bl	80064a4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005cb8:	4b10      	ldr	r3, [pc, #64]	; (8005cfc <prvCheckTasksWaitingTermination+0x50>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fe fe56 	bl	8004976 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005cca:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <prvCheckTasksWaitingTermination+0x54>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	4a0b      	ldr	r2, [pc, #44]	; (8005d00 <prvCheckTasksWaitingTermination+0x54>)
 8005cd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cd4:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <prvCheckTasksWaitingTermination+0x58>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	4a0a      	ldr	r2, [pc, #40]	; (8005d04 <prvCheckTasksWaitingTermination+0x58>)
 8005cdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cde:	f000 fc11 	bl	8006504 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f810 	bl	8005d08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ce8:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <prvCheckTasksWaitingTermination+0x58>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e1      	bne.n	8005cb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cf0:	bf00      	nop
 8005cf2:	bf00      	nop
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	20000884 	.word	0x20000884
 8005d00:	200008b0 	.word	0x200008b0
 8005d04:	20000898 	.word	0x20000898

08005d08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	334c      	adds	r3, #76	; 0x4c
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 fea9 	bl	8006a6c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d108      	bne.n	8005d36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 fd61 	bl	80067f0 <vPortFree>
				vPortFree( pxTCB );
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fd5e 	bl	80067f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d34:	e018      	b.n	8005d68 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d103      	bne.n	8005d48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fd55 	bl	80067f0 <vPortFree>
	}
 8005d46:	e00f      	b.n	8005d68 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d00a      	beq.n	8005d68 <prvDeleteTCB+0x60>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	60fb      	str	r3, [r7, #12]
}
 8005d64:	bf00      	nop
 8005d66:	e7fe      	b.n	8005d66 <prvDeleteTCB+0x5e>
	}
 8005d68:	bf00      	nop
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d76:	4b0f      	ldr	r3, [pc, #60]	; (8005db4 <prvResetNextTaskUnblockTime+0x44>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <prvResetNextTaskUnblockTime+0x14>
 8005d80:	2301      	movs	r3, #1
 8005d82:	e000      	b.n	8005d86 <prvResetNextTaskUnblockTime+0x16>
 8005d84:	2300      	movs	r3, #0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d004      	beq.n	8005d94 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d8a:	4b0b      	ldr	r3, [pc, #44]	; (8005db8 <prvResetNextTaskUnblockTime+0x48>)
 8005d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d90:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d92:	e008      	b.n	8005da6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d94:	4b07      	ldr	r3, [pc, #28]	; (8005db4 <prvResetNextTaskUnblockTime+0x44>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	4a05      	ldr	r2, [pc, #20]	; (8005db8 <prvResetNextTaskUnblockTime+0x48>)
 8005da4:	6013      	str	r3, [r2, #0]
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	20000868 	.word	0x20000868
 8005db8:	200008d0 	.word	0x200008d0

08005dbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005dc2:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <xTaskGetSchedulerState+0x34>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d102      	bne.n	8005dd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	607b      	str	r3, [r7, #4]
 8005dce:	e008      	b.n	8005de2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dd0:	4b08      	ldr	r3, [pc, #32]	; (8005df4 <xTaskGetSchedulerState+0x38>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d102      	bne.n	8005dde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005dd8:	2302      	movs	r3, #2
 8005dda:	607b      	str	r3, [r7, #4]
 8005ddc:	e001      	b.n	8005de2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005dde:	2300      	movs	r3, #0
 8005de0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005de2:	687b      	ldr	r3, [r7, #4]
	}
 8005de4:	4618      	mov	r0, r3
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	200008bc 	.word	0x200008bc
 8005df4:	200008d8 	.word	0x200008d8

08005df8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005e04:	2300      	movs	r3, #0
 8005e06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d06e      	beq.n	8005eec <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e12:	4b39      	ldr	r3, [pc, #228]	; (8005ef8 <xTaskPriorityInherit+0x100>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d25e      	bcs.n	8005eda <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	db06      	blt.n	8005e32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e24:	4b34      	ldr	r3, [pc, #208]	; (8005ef8 <xTaskPriorityInherit+0x100>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2a:	f1c3 0207 	rsb	r2, r3, #7
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	6959      	ldr	r1, [r3, #20]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4a2e      	ldr	r2, [pc, #184]	; (8005efc <xTaskPriorityInherit+0x104>)
 8005e44:	4413      	add	r3, r2
 8005e46:	4299      	cmp	r1, r3
 8005e48:	d101      	bne.n	8005e4e <xTaskPriorityInherit+0x56>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e000      	b.n	8005e50 <xTaskPriorityInherit+0x58>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d03a      	beq.n	8005eca <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	3304      	adds	r3, #4
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fe fd8c 	bl	8004976 <uxListRemove>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d115      	bne.n	8005e90 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	4924      	ldr	r1, [pc, #144]	; (8005efc <xTaskPriorityInherit+0x104>)
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	440b      	add	r3, r1
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10a      	bne.n	8005e90 <xTaskPriorityInherit+0x98>
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7e:	2201      	movs	r2, #1
 8005e80:	fa02 f303 	lsl.w	r3, r2, r3
 8005e84:	43da      	mvns	r2, r3
 8005e86:	4b1e      	ldr	r3, [pc, #120]	; (8005f00 <xTaskPriorityInherit+0x108>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	4a1c      	ldr	r2, [pc, #112]	; (8005f00 <xTaskPriorityInherit+0x108>)
 8005e8e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e90:	4b19      	ldr	r3, [pc, #100]	; (8005ef8 <xTaskPriorityInherit+0x100>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	409a      	lsls	r2, r3
 8005ea2:	4b17      	ldr	r3, [pc, #92]	; (8005f00 <xTaskPriorityInherit+0x108>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	4a15      	ldr	r2, [pc, #84]	; (8005f00 <xTaskPriorityInherit+0x108>)
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4a10      	ldr	r2, [pc, #64]	; (8005efc <xTaskPriorityInherit+0x104>)
 8005eba:	441a      	add	r2, r3
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	f7fe fcfa 	bl	80048bc <vListInsertEnd>
 8005ec8:	e004      	b.n	8005ed4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005eca:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <xTaskPriorityInherit+0x100>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	e008      	b.n	8005eec <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ede:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <xTaskPriorityInherit+0x100>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d201      	bcs.n	8005eec <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005eec:	68fb      	ldr	r3, [r7, #12]
	}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	200007b0 	.word	0x200007b0
 8005efc:	200007b4 	.word	0x200007b4
 8005f00:	200008b8 	.word	0x200008b8

08005f04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f10:	2300      	movs	r3, #0
 8005f12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d06e      	beq.n	8005ff8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f1a:	4b3a      	ldr	r3, [pc, #232]	; (8006004 <xTaskPriorityDisinherit+0x100>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d00a      	beq.n	8005f3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	60fb      	str	r3, [r7, #12]
}
 8005f36:	bf00      	nop
 8005f38:	e7fe      	b.n	8005f38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	60bb      	str	r3, [r7, #8]
}
 8005f54:	bf00      	nop
 8005f56:	e7fe      	b.n	8005f56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f5c:	1e5a      	subs	r2, r3, #1
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d044      	beq.n	8005ff8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d140      	bne.n	8005ff8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fe fcfb 	bl	8004976 <uxListRemove>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d115      	bne.n	8005fb2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8a:	491f      	ldr	r1, [pc, #124]	; (8006008 <xTaskPriorityDisinherit+0x104>)
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	440b      	add	r3, r1
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <xTaskPriorityDisinherit+0xae>
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa6:	43da      	mvns	r2, r3
 8005fa8:	4b18      	ldr	r3, [pc, #96]	; (800600c <xTaskPriorityDisinherit+0x108>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4013      	ands	r3, r2
 8005fae:	4a17      	ldr	r2, [pc, #92]	; (800600c <xTaskPriorityDisinherit+0x108>)
 8005fb0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbe:	f1c3 0207 	rsb	r2, r3, #7
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fca:	2201      	movs	r2, #1
 8005fcc:	409a      	lsls	r2, r3
 8005fce:	4b0f      	ldr	r3, [pc, #60]	; (800600c <xTaskPriorityDisinherit+0x108>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	4a0d      	ldr	r2, [pc, #52]	; (800600c <xTaskPriorityDisinherit+0x108>)
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4a08      	ldr	r2, [pc, #32]	; (8006008 <xTaskPriorityDisinherit+0x104>)
 8005fe6:	441a      	add	r2, r3
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4619      	mov	r1, r3
 8005fee:	4610      	mov	r0, r2
 8005ff0:	f7fe fc64 	bl	80048bc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ff8:	697b      	ldr	r3, [r7, #20]
	}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	200007b0 	.word	0x200007b0
 8006008:	200007b4 	.word	0x200007b4
 800600c:	200008b8 	.word	0x200008b8

08006010 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800601e:	2301      	movs	r3, #1
 8006020:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 8088 	beq.w	800613a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10a      	bne.n	8006048 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	60fb      	str	r3, [r7, #12]
}
 8006044:	bf00      	nop
 8006046:	e7fe      	b.n	8006046 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	429a      	cmp	r2, r3
 8006050:	d902      	bls.n	8006058 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	61fb      	str	r3, [r7, #28]
 8006056:	e002      	b.n	800605e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	429a      	cmp	r2, r3
 8006066:	d068      	beq.n	800613a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	429a      	cmp	r2, r3
 8006070:	d163      	bne.n	800613a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006072:	4b34      	ldr	r3, [pc, #208]	; (8006144 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	429a      	cmp	r2, r3
 800607a:	d10a      	bne.n	8006092 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	60bb      	str	r3, [r7, #8]
}
 800608e:	bf00      	nop
 8006090:	e7fe      	b.n	8006090 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	db04      	blt.n	80060b0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	f1c3 0207 	rsb	r2, r3, #7
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	6959      	ldr	r1, [r3, #20]
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4613      	mov	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4a22      	ldr	r2, [pc, #136]	; (8006148 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80060c0:	4413      	add	r3, r2
 80060c2:	4299      	cmp	r1, r3
 80060c4:	d101      	bne.n	80060ca <vTaskPriorityDisinheritAfterTimeout+0xba>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80060ca:	2300      	movs	r3, #0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d034      	beq.n	800613a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fe fc4e 	bl	8004976 <uxListRemove>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d115      	bne.n	800610c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e4:	4918      	ldr	r1, [pc, #96]	; (8006148 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80060e6:	4613      	mov	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	440b      	add	r3, r1
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10a      	bne.n	800610c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	2201      	movs	r2, #1
 80060fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006100:	43da      	mvns	r2, r3
 8006102:	4b12      	ldr	r3, [pc, #72]	; (800614c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4013      	ands	r3, r2
 8006108:	4a10      	ldr	r2, [pc, #64]	; (800614c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800610a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	2201      	movs	r2, #1
 8006112:	409a      	lsls	r2, r3
 8006114:	4b0d      	ldr	r3, [pc, #52]	; (800614c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4313      	orrs	r3, r2
 800611a:	4a0c      	ldr	r2, [pc, #48]	; (800614c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800611c:	6013      	str	r3, [r2, #0]
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006122:	4613      	mov	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4a07      	ldr	r2, [pc, #28]	; (8006148 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800612c:	441a      	add	r2, r3
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	3304      	adds	r3, #4
 8006132:	4619      	mov	r1, r3
 8006134:	4610      	mov	r0, r2
 8006136:	f7fe fbc1 	bl	80048bc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800613a:	bf00      	nop
 800613c:	3720      	adds	r7, #32
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	200007b0 	.word	0x200007b0
 8006148:	200007b4 	.word	0x200007b4
 800614c:	200008b8 	.word	0x200008b8

08006150 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006154:	4b07      	ldr	r3, [pc, #28]	; (8006174 <pvTaskIncrementMutexHeldCount+0x24>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d004      	beq.n	8006166 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800615c:	4b05      	ldr	r3, [pc, #20]	; (8006174 <pvTaskIncrementMutexHeldCount+0x24>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006162:	3201      	adds	r2, #1
 8006164:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006166:	4b03      	ldr	r3, [pc, #12]	; (8006174 <pvTaskIncrementMutexHeldCount+0x24>)
 8006168:	681b      	ldr	r3, [r3, #0]
	}
 800616a:	4618      	mov	r0, r3
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	200007b0 	.word	0x200007b0

08006178 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006182:	4b29      	ldr	r3, [pc, #164]	; (8006228 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006188:	4b28      	ldr	r3, [pc, #160]	; (800622c <prvAddCurrentTaskToDelayedList+0xb4>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3304      	adds	r3, #4
 800618e:	4618      	mov	r0, r3
 8006190:	f7fe fbf1 	bl	8004976 <uxListRemove>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10b      	bne.n	80061b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800619a:	4b24      	ldr	r3, [pc, #144]	; (800622c <prvAddCurrentTaskToDelayedList+0xb4>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	2201      	movs	r2, #1
 80061a2:	fa02 f303 	lsl.w	r3, r2, r3
 80061a6:	43da      	mvns	r2, r3
 80061a8:	4b21      	ldr	r3, [pc, #132]	; (8006230 <prvAddCurrentTaskToDelayedList+0xb8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4013      	ands	r3, r2
 80061ae:	4a20      	ldr	r2, [pc, #128]	; (8006230 <prvAddCurrentTaskToDelayedList+0xb8>)
 80061b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b8:	d10a      	bne.n	80061d0 <prvAddCurrentTaskToDelayedList+0x58>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d007      	beq.n	80061d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061c0:	4b1a      	ldr	r3, [pc, #104]	; (800622c <prvAddCurrentTaskToDelayedList+0xb4>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3304      	adds	r3, #4
 80061c6:	4619      	mov	r1, r3
 80061c8:	481a      	ldr	r0, [pc, #104]	; (8006234 <prvAddCurrentTaskToDelayedList+0xbc>)
 80061ca:	f7fe fb77 	bl	80048bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061ce:	e026      	b.n	800621e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4413      	add	r3, r2
 80061d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061d8:	4b14      	ldr	r3, [pc, #80]	; (800622c <prvAddCurrentTaskToDelayedList+0xb4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d209      	bcs.n	80061fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061e8:	4b13      	ldr	r3, [pc, #76]	; (8006238 <prvAddCurrentTaskToDelayedList+0xc0>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	4b0f      	ldr	r3, [pc, #60]	; (800622c <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3304      	adds	r3, #4
 80061f2:	4619      	mov	r1, r3
 80061f4:	4610      	mov	r0, r2
 80061f6:	f7fe fb85 	bl	8004904 <vListInsert>
}
 80061fa:	e010      	b.n	800621e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061fc:	4b0f      	ldr	r3, [pc, #60]	; (800623c <prvAddCurrentTaskToDelayedList+0xc4>)
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	4b0a      	ldr	r3, [pc, #40]	; (800622c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3304      	adds	r3, #4
 8006206:	4619      	mov	r1, r3
 8006208:	4610      	mov	r0, r2
 800620a:	f7fe fb7b 	bl	8004904 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800620e:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	429a      	cmp	r2, r3
 8006216:	d202      	bcs.n	800621e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006218:	4a09      	ldr	r2, [pc, #36]	; (8006240 <prvAddCurrentTaskToDelayedList+0xc8>)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	6013      	str	r3, [r2, #0]
}
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	200008b4 	.word	0x200008b4
 800622c:	200007b0 	.word	0x200007b0
 8006230:	200008b8 	.word	0x200008b8
 8006234:	2000089c 	.word	0x2000089c
 8006238:	2000086c 	.word	0x2000086c
 800623c:	20000868 	.word	0x20000868
 8006240:	200008d0 	.word	0x200008d0

08006244 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	3b04      	subs	r3, #4
 8006254:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800625c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3b04      	subs	r3, #4
 8006262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f023 0201 	bic.w	r2, r3, #1
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3b04      	subs	r3, #4
 8006272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006274:	4a0c      	ldr	r2, [pc, #48]	; (80062a8 <pxPortInitialiseStack+0x64>)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3b14      	subs	r3, #20
 800627e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3b04      	subs	r3, #4
 800628a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f06f 0202 	mvn.w	r2, #2
 8006292:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3b20      	subs	r3, #32
 8006298:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800629a:	68fb      	ldr	r3, [r7, #12]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	080062ad 	.word	0x080062ad

080062ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062b6:	4b12      	ldr	r3, [pc, #72]	; (8006300 <prvTaskExitError+0x54>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062be:	d00a      	beq.n	80062d6 <prvTaskExitError+0x2a>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	60fb      	str	r3, [r7, #12]
}
 80062d2:	bf00      	nop
 80062d4:	e7fe      	b.n	80062d4 <prvTaskExitError+0x28>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	60bb      	str	r3, [r7, #8]
}
 80062e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062ea:	bf00      	nop
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0fc      	beq.n	80062ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062f2:	bf00      	nop
 80062f4:	bf00      	nop
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	2000000c 	.word	0x2000000c
	...

08006310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006310:	4b07      	ldr	r3, [pc, #28]	; (8006330 <pxCurrentTCBConst2>)
 8006312:	6819      	ldr	r1, [r3, #0]
 8006314:	6808      	ldr	r0, [r1, #0]
 8006316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631a:	f380 8809 	msr	PSP, r0
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f04f 0000 	mov.w	r0, #0
 8006326:	f380 8811 	msr	BASEPRI, r0
 800632a:	4770      	bx	lr
 800632c:	f3af 8000 	nop.w

08006330 <pxCurrentTCBConst2>:
 8006330:	200007b0 	.word	0x200007b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop

08006338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006338:	4808      	ldr	r0, [pc, #32]	; (800635c <prvPortStartFirstTask+0x24>)
 800633a:	6800      	ldr	r0, [r0, #0]
 800633c:	6800      	ldr	r0, [r0, #0]
 800633e:	f380 8808 	msr	MSP, r0
 8006342:	f04f 0000 	mov.w	r0, #0
 8006346:	f380 8814 	msr	CONTROL, r0
 800634a:	b662      	cpsie	i
 800634c:	b661      	cpsie	f
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	df00      	svc	0
 8006358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800635a:	bf00      	nop
 800635c:	e000ed08 	.word	0xe000ed08

08006360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006366:	4b46      	ldr	r3, [pc, #280]	; (8006480 <xPortStartScheduler+0x120>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a46      	ldr	r2, [pc, #280]	; (8006484 <xPortStartScheduler+0x124>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d10a      	bne.n	8006386 <xPortStartScheduler+0x26>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	613b      	str	r3, [r7, #16]
}
 8006382:	bf00      	nop
 8006384:	e7fe      	b.n	8006384 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006386:	4b3e      	ldr	r3, [pc, #248]	; (8006480 <xPortStartScheduler+0x120>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a3f      	ldr	r2, [pc, #252]	; (8006488 <xPortStartScheduler+0x128>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d10a      	bne.n	80063a6 <xPortStartScheduler+0x46>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	60fb      	str	r3, [r7, #12]
}
 80063a2:	bf00      	nop
 80063a4:	e7fe      	b.n	80063a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063a6:	4b39      	ldr	r3, [pc, #228]	; (800648c <xPortStartScheduler+0x12c>)
 80063a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	22ff      	movs	r2, #255	; 0xff
 80063b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063c0:	78fb      	ldrb	r3, [r7, #3]
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	4b31      	ldr	r3, [pc, #196]	; (8006490 <xPortStartScheduler+0x130>)
 80063cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063ce:	4b31      	ldr	r3, [pc, #196]	; (8006494 <xPortStartScheduler+0x134>)
 80063d0:	2207      	movs	r2, #7
 80063d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063d4:	e009      	b.n	80063ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80063d6:	4b2f      	ldr	r3, [pc, #188]	; (8006494 <xPortStartScheduler+0x134>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3b01      	subs	r3, #1
 80063dc:	4a2d      	ldr	r2, [pc, #180]	; (8006494 <xPortStartScheduler+0x134>)
 80063de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063ea:	78fb      	ldrb	r3, [r7, #3]
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f2:	2b80      	cmp	r3, #128	; 0x80
 80063f4:	d0ef      	beq.n	80063d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063f6:	4b27      	ldr	r3, [pc, #156]	; (8006494 <xPortStartScheduler+0x134>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f1c3 0307 	rsb	r3, r3, #7
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d00a      	beq.n	8006418 <xPortStartScheduler+0xb8>
	__asm volatile
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	60bb      	str	r3, [r7, #8]
}
 8006414:	bf00      	nop
 8006416:	e7fe      	b.n	8006416 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006418:	4b1e      	ldr	r3, [pc, #120]	; (8006494 <xPortStartScheduler+0x134>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	021b      	lsls	r3, r3, #8
 800641e:	4a1d      	ldr	r2, [pc, #116]	; (8006494 <xPortStartScheduler+0x134>)
 8006420:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006422:	4b1c      	ldr	r3, [pc, #112]	; (8006494 <xPortStartScheduler+0x134>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800642a:	4a1a      	ldr	r2, [pc, #104]	; (8006494 <xPortStartScheduler+0x134>)
 800642c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	b2da      	uxtb	r2, r3
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006436:	4b18      	ldr	r3, [pc, #96]	; (8006498 <xPortStartScheduler+0x138>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a17      	ldr	r2, [pc, #92]	; (8006498 <xPortStartScheduler+0x138>)
 800643c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006440:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006442:	4b15      	ldr	r3, [pc, #84]	; (8006498 <xPortStartScheduler+0x138>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a14      	ldr	r2, [pc, #80]	; (8006498 <xPortStartScheduler+0x138>)
 8006448:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800644c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800644e:	f000 f8dd 	bl	800660c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006452:	4b12      	ldr	r3, [pc, #72]	; (800649c <xPortStartScheduler+0x13c>)
 8006454:	2200      	movs	r2, #0
 8006456:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006458:	f000 f8fc 	bl	8006654 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800645c:	4b10      	ldr	r3, [pc, #64]	; (80064a0 <xPortStartScheduler+0x140>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a0f      	ldr	r2, [pc, #60]	; (80064a0 <xPortStartScheduler+0x140>)
 8006462:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006466:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006468:	f7ff ff66 	bl	8006338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800646c:	f7ff fa5a 	bl	8005924 <vTaskSwitchContext>
	prvTaskExitError();
 8006470:	f7ff ff1c 	bl	80062ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	e000ed00 	.word	0xe000ed00
 8006484:	410fc271 	.word	0x410fc271
 8006488:	410fc270 	.word	0x410fc270
 800648c:	e000e400 	.word	0xe000e400
 8006490:	200008dc 	.word	0x200008dc
 8006494:	200008e0 	.word	0x200008e0
 8006498:	e000ed20 	.word	0xe000ed20
 800649c:	2000000c 	.word	0x2000000c
 80064a0:	e000ef34 	.word	0xe000ef34

080064a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	607b      	str	r3, [r7, #4]
}
 80064bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064be:	4b0f      	ldr	r3, [pc, #60]	; (80064fc <vPortEnterCritical+0x58>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3301      	adds	r3, #1
 80064c4:	4a0d      	ldr	r2, [pc, #52]	; (80064fc <vPortEnterCritical+0x58>)
 80064c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064c8:	4b0c      	ldr	r3, [pc, #48]	; (80064fc <vPortEnterCritical+0x58>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d10f      	bne.n	80064f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064d0:	4b0b      	ldr	r3, [pc, #44]	; (8006500 <vPortEnterCritical+0x5c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	603b      	str	r3, [r7, #0]
}
 80064ec:	bf00      	nop
 80064ee:	e7fe      	b.n	80064ee <vPortEnterCritical+0x4a>
	}
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	2000000c 	.word	0x2000000c
 8006500:	e000ed04 	.word	0xe000ed04

08006504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800650a:	4b12      	ldr	r3, [pc, #72]	; (8006554 <vPortExitCritical+0x50>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10a      	bne.n	8006528 <vPortExitCritical+0x24>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	607b      	str	r3, [r7, #4]
}
 8006524:	bf00      	nop
 8006526:	e7fe      	b.n	8006526 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006528:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <vPortExitCritical+0x50>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3b01      	subs	r3, #1
 800652e:	4a09      	ldr	r2, [pc, #36]	; (8006554 <vPortExitCritical+0x50>)
 8006530:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006532:	4b08      	ldr	r3, [pc, #32]	; (8006554 <vPortExitCritical+0x50>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d105      	bne.n	8006546 <vPortExitCritical+0x42>
 800653a:	2300      	movs	r3, #0
 800653c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006544:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	2000000c 	.word	0x2000000c
	...

08006560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006560:	f3ef 8009 	mrs	r0, PSP
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	4b15      	ldr	r3, [pc, #84]	; (80065c0 <pxCurrentTCBConst>)
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	f01e 0f10 	tst.w	lr, #16
 8006570:	bf08      	it	eq
 8006572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657a:	6010      	str	r0, [r2, #0]
 800657c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006584:	f380 8811 	msr	BASEPRI, r0
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f7ff f9c8 	bl	8005924 <vTaskSwitchContext>
 8006594:	f04f 0000 	mov.w	r0, #0
 8006598:	f380 8811 	msr	BASEPRI, r0
 800659c:	bc09      	pop	{r0, r3}
 800659e:	6819      	ldr	r1, [r3, #0]
 80065a0:	6808      	ldr	r0, [r1, #0]
 80065a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a6:	f01e 0f10 	tst.w	lr, #16
 80065aa:	bf08      	it	eq
 80065ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065b0:	f380 8809 	msr	PSP, r0
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	f3af 8000 	nop.w

080065c0 <pxCurrentTCBConst>:
 80065c0:	200007b0 	.word	0x200007b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop

080065c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	607b      	str	r3, [r7, #4]
}
 80065e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065e2:	f7ff f8e1 	bl	80057a8 <xTaskIncrementTick>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065ec:	4b06      	ldr	r3, [pc, #24]	; (8006608 <SysTick_Handler+0x40>)
 80065ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	2300      	movs	r3, #0
 80065f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	f383 8811 	msr	BASEPRI, r3
}
 80065fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006600:	bf00      	nop
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	e000ed04 	.word	0xe000ed04

0800660c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800660c:	b480      	push	{r7}
 800660e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006610:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <vPortSetupTimerInterrupt+0x34>)
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006616:	4b0b      	ldr	r3, [pc, #44]	; (8006644 <vPortSetupTimerInterrupt+0x38>)
 8006618:	2200      	movs	r2, #0
 800661a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800661c:	4b0a      	ldr	r3, [pc, #40]	; (8006648 <vPortSetupTimerInterrupt+0x3c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a0a      	ldr	r2, [pc, #40]	; (800664c <vPortSetupTimerInterrupt+0x40>)
 8006622:	fba2 2303 	umull	r2, r3, r2, r3
 8006626:	099b      	lsrs	r3, r3, #6
 8006628:	4a09      	ldr	r2, [pc, #36]	; (8006650 <vPortSetupTimerInterrupt+0x44>)
 800662a:	3b01      	subs	r3, #1
 800662c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800662e:	4b04      	ldr	r3, [pc, #16]	; (8006640 <vPortSetupTimerInterrupt+0x34>)
 8006630:	2207      	movs	r2, #7
 8006632:	601a      	str	r2, [r3, #0]
}
 8006634:	bf00      	nop
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	e000e010 	.word	0xe000e010
 8006644:	e000e018 	.word	0xe000e018
 8006648:	20000000 	.word	0x20000000
 800664c:	10624dd3 	.word	0x10624dd3
 8006650:	e000e014 	.word	0xe000e014

08006654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006654:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006664 <vPortEnableVFP+0x10>
 8006658:	6801      	ldr	r1, [r0, #0]
 800665a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800665e:	6001      	str	r1, [r0, #0]
 8006660:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006662:	bf00      	nop
 8006664:	e000ed88 	.word	0xe000ed88

08006668 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08a      	sub	sp, #40	; 0x28
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006670:	2300      	movs	r3, #0
 8006672:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006674:	f7fe ffee 	bl	8005654 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006678:	4b58      	ldr	r3, [pc, #352]	; (80067dc <pvPortMalloc+0x174>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006680:	f000 f910 	bl	80068a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006684:	4b56      	ldr	r3, [pc, #344]	; (80067e0 <pvPortMalloc+0x178>)
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4013      	ands	r3, r2
 800668c:	2b00      	cmp	r3, #0
 800668e:	f040 808e 	bne.w	80067ae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01d      	beq.n	80066d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006698:	2208      	movs	r2, #8
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4413      	add	r3, r2
 800669e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f003 0307 	and.w	r3, r3, #7
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d014      	beq.n	80066d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f023 0307 	bic.w	r3, r3, #7
 80066b0:	3308      	adds	r3, #8
 80066b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00a      	beq.n	80066d4 <pvPortMalloc+0x6c>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	617b      	str	r3, [r7, #20]
}
 80066d0:	bf00      	nop
 80066d2:	e7fe      	b.n	80066d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d069      	beq.n	80067ae <pvPortMalloc+0x146>
 80066da:	4b42      	ldr	r3, [pc, #264]	; (80067e4 <pvPortMalloc+0x17c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d864      	bhi.n	80067ae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066e4:	4b40      	ldr	r3, [pc, #256]	; (80067e8 <pvPortMalloc+0x180>)
 80066e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066e8:	4b3f      	ldr	r3, [pc, #252]	; (80067e8 <pvPortMalloc+0x180>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066ee:	e004      	b.n	80066fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	429a      	cmp	r2, r3
 8006702:	d903      	bls.n	800670c <pvPortMalloc+0xa4>
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1f1      	bne.n	80066f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800670c:	4b33      	ldr	r3, [pc, #204]	; (80067dc <pvPortMalloc+0x174>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006712:	429a      	cmp	r2, r3
 8006714:	d04b      	beq.n	80067ae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2208      	movs	r2, #8
 800671c:	4413      	add	r3, r2
 800671e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	1ad2      	subs	r2, r2, r3
 8006730:	2308      	movs	r3, #8
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	429a      	cmp	r2, r3
 8006736:	d91f      	bls.n	8006778 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4413      	add	r3, r2
 800673e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <pvPortMalloc+0xf8>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	613b      	str	r3, [r7, #16]
}
 800675c:	bf00      	nop
 800675e:	e7fe      	b.n	800675e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	1ad2      	subs	r2, r2, r3
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006772:	69b8      	ldr	r0, [r7, #24]
 8006774:	f000 f8f8 	bl	8006968 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006778:	4b1a      	ldr	r3, [pc, #104]	; (80067e4 <pvPortMalloc+0x17c>)
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	4a18      	ldr	r2, [pc, #96]	; (80067e4 <pvPortMalloc+0x17c>)
 8006784:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006786:	4b17      	ldr	r3, [pc, #92]	; (80067e4 <pvPortMalloc+0x17c>)
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	4b18      	ldr	r3, [pc, #96]	; (80067ec <pvPortMalloc+0x184>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d203      	bcs.n	800679a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006792:	4b14      	ldr	r3, [pc, #80]	; (80067e4 <pvPortMalloc+0x17c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a15      	ldr	r2, [pc, #84]	; (80067ec <pvPortMalloc+0x184>)
 8006798:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <pvPortMalloc+0x178>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067ae:	f7fe ff5f 	bl	8005670 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <pvPortMalloc+0x16a>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	60fb      	str	r3, [r7, #12]
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <pvPortMalloc+0x168>
	return pvReturn;
 80067d2:	69fb      	ldr	r3, [r7, #28]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3728      	adds	r7, #40	; 0x28
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	200014ec 	.word	0x200014ec
 80067e0:	200014f8 	.word	0x200014f8
 80067e4:	200014f0 	.word	0x200014f0
 80067e8:	200014e4 	.word	0x200014e4
 80067ec:	200014f4 	.word	0x200014f4

080067f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d048      	beq.n	8006894 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006802:	2308      	movs	r3, #8
 8006804:	425b      	negs	r3, r3
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	4413      	add	r3, r2
 800680a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	4b21      	ldr	r3, [pc, #132]	; (800689c <vPortFree+0xac>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4013      	ands	r3, r2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10a      	bne.n	8006834 <vPortFree+0x44>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	60fb      	str	r3, [r7, #12]
}
 8006830:	bf00      	nop
 8006832:	e7fe      	b.n	8006832 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00a      	beq.n	8006852 <vPortFree+0x62>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	60bb      	str	r3, [r7, #8]
}
 800684e:	bf00      	nop
 8006850:	e7fe      	b.n	8006850 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	4b11      	ldr	r3, [pc, #68]	; (800689c <vPortFree+0xac>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4013      	ands	r3, r2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d019      	beq.n	8006894 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d115      	bne.n	8006894 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	4b0b      	ldr	r3, [pc, #44]	; (800689c <vPortFree+0xac>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	43db      	mvns	r3, r3
 8006872:	401a      	ands	r2, r3
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006878:	f7fe feec 	bl	8005654 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <vPortFree+0xb0>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4413      	add	r3, r2
 8006886:	4a06      	ldr	r2, [pc, #24]	; (80068a0 <vPortFree+0xb0>)
 8006888:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800688a:	6938      	ldr	r0, [r7, #16]
 800688c:	f000 f86c 	bl	8006968 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006890:	f7fe feee 	bl	8005670 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006894:	bf00      	nop
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	200014f8 	.word	0x200014f8
 80068a0:	200014f0 	.word	0x200014f0

080068a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80068ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068b0:	4b27      	ldr	r3, [pc, #156]	; (8006950 <prvHeapInit+0xac>)
 80068b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00c      	beq.n	80068d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3307      	adds	r3, #7
 80068c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 0307 	bic.w	r3, r3, #7
 80068ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	4a1f      	ldr	r2, [pc, #124]	; (8006950 <prvHeapInit+0xac>)
 80068d4:	4413      	add	r3, r2
 80068d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068dc:	4a1d      	ldr	r2, [pc, #116]	; (8006954 <prvHeapInit+0xb0>)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068e2:	4b1c      	ldr	r3, [pc, #112]	; (8006954 <prvHeapInit+0xb0>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	4413      	add	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068f0:	2208      	movs	r2, #8
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	1a9b      	subs	r3, r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0307 	bic.w	r3, r3, #7
 80068fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4a15      	ldr	r2, [pc, #84]	; (8006958 <prvHeapInit+0xb4>)
 8006904:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006906:	4b14      	ldr	r3, [pc, #80]	; (8006958 <prvHeapInit+0xb4>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2200      	movs	r2, #0
 800690c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800690e:	4b12      	ldr	r3, [pc, #72]	; (8006958 <prvHeapInit+0xb4>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2200      	movs	r2, #0
 8006914:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	1ad2      	subs	r2, r2, r3
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006924:	4b0c      	ldr	r3, [pc, #48]	; (8006958 <prvHeapInit+0xb4>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	4a0a      	ldr	r2, [pc, #40]	; (800695c <prvHeapInit+0xb8>)
 8006932:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	4a09      	ldr	r2, [pc, #36]	; (8006960 <prvHeapInit+0xbc>)
 800693a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800693c:	4b09      	ldr	r3, [pc, #36]	; (8006964 <prvHeapInit+0xc0>)
 800693e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006942:	601a      	str	r2, [r3, #0]
}
 8006944:	bf00      	nop
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	200008e4 	.word	0x200008e4
 8006954:	200014e4 	.word	0x200014e4
 8006958:	200014ec 	.word	0x200014ec
 800695c:	200014f4 	.word	0x200014f4
 8006960:	200014f0 	.word	0x200014f0
 8006964:	200014f8 	.word	0x200014f8

08006968 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006970:	4b28      	ldr	r3, [pc, #160]	; (8006a14 <prvInsertBlockIntoFreeList+0xac>)
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	e002      	b.n	800697c <prvInsertBlockIntoFreeList+0x14>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	429a      	cmp	r2, r3
 8006984:	d8f7      	bhi.n	8006976 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	4413      	add	r3, r2
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	429a      	cmp	r2, r3
 8006996:	d108      	bne.n	80069aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	441a      	add	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	441a      	add	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d118      	bne.n	80069f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	4b15      	ldr	r3, [pc, #84]	; (8006a18 <prvInsertBlockIntoFreeList+0xb0>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d00d      	beq.n	80069e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	441a      	add	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	e008      	b.n	80069f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069e6:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <prvInsertBlockIntoFreeList+0xb0>)
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	601a      	str	r2, [r3, #0]
 80069ee:	e003      	b.n	80069f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d002      	beq.n	8006a06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a06:	bf00      	nop
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	200014e4 	.word	0x200014e4
 8006a18:	200014ec 	.word	0x200014ec

08006a1c <siprintf>:
 8006a1c:	b40e      	push	{r1, r2, r3}
 8006a1e:	b500      	push	{lr}
 8006a20:	b09c      	sub	sp, #112	; 0x70
 8006a22:	ab1d      	add	r3, sp, #116	; 0x74
 8006a24:	9002      	str	r0, [sp, #8]
 8006a26:	9006      	str	r0, [sp, #24]
 8006a28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a2c:	4809      	ldr	r0, [pc, #36]	; (8006a54 <siprintf+0x38>)
 8006a2e:	9107      	str	r1, [sp, #28]
 8006a30:	9104      	str	r1, [sp, #16]
 8006a32:	4909      	ldr	r1, [pc, #36]	; (8006a58 <siprintf+0x3c>)
 8006a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a38:	9105      	str	r1, [sp, #20]
 8006a3a:	6800      	ldr	r0, [r0, #0]
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	a902      	add	r1, sp, #8
 8006a40:	f000 f9f6 	bl	8006e30 <_svfiprintf_r>
 8006a44:	9b02      	ldr	r3, [sp, #8]
 8006a46:	2200      	movs	r2, #0
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	b01c      	add	sp, #112	; 0x70
 8006a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a50:	b003      	add	sp, #12
 8006a52:	4770      	bx	lr
 8006a54:	2000005c 	.word	0x2000005c
 8006a58:	ffff0208 	.word	0xffff0208

08006a5c <memset>:
 8006a5c:	4402      	add	r2, r0
 8006a5e:	4603      	mov	r3, r0
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d100      	bne.n	8006a66 <memset+0xa>
 8006a64:	4770      	bx	lr
 8006a66:	f803 1b01 	strb.w	r1, [r3], #1
 8006a6a:	e7f9      	b.n	8006a60 <memset+0x4>

08006a6c <_reclaim_reent>:
 8006a6c:	4b29      	ldr	r3, [pc, #164]	; (8006b14 <_reclaim_reent+0xa8>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4283      	cmp	r3, r0
 8006a72:	b570      	push	{r4, r5, r6, lr}
 8006a74:	4604      	mov	r4, r0
 8006a76:	d04b      	beq.n	8006b10 <_reclaim_reent+0xa4>
 8006a78:	69c3      	ldr	r3, [r0, #28]
 8006a7a:	b143      	cbz	r3, 8006a8e <_reclaim_reent+0x22>
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d144      	bne.n	8006b0c <_reclaim_reent+0xa0>
 8006a82:	69e3      	ldr	r3, [r4, #28]
 8006a84:	6819      	ldr	r1, [r3, #0]
 8006a86:	b111      	cbz	r1, 8006a8e <_reclaim_reent+0x22>
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f000 f87f 	bl	8006b8c <_free_r>
 8006a8e:	6961      	ldr	r1, [r4, #20]
 8006a90:	b111      	cbz	r1, 8006a98 <_reclaim_reent+0x2c>
 8006a92:	4620      	mov	r0, r4
 8006a94:	f000 f87a 	bl	8006b8c <_free_r>
 8006a98:	69e1      	ldr	r1, [r4, #28]
 8006a9a:	b111      	cbz	r1, 8006aa2 <_reclaim_reent+0x36>
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f000 f875 	bl	8006b8c <_free_r>
 8006aa2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006aa4:	b111      	cbz	r1, 8006aac <_reclaim_reent+0x40>
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f000 f870 	bl	8006b8c <_free_r>
 8006aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aae:	b111      	cbz	r1, 8006ab6 <_reclaim_reent+0x4a>
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f000 f86b 	bl	8006b8c <_free_r>
 8006ab6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006ab8:	b111      	cbz	r1, 8006ac0 <_reclaim_reent+0x54>
 8006aba:	4620      	mov	r0, r4
 8006abc:	f000 f866 	bl	8006b8c <_free_r>
 8006ac0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006ac2:	b111      	cbz	r1, 8006aca <_reclaim_reent+0x5e>
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f000 f861 	bl	8006b8c <_free_r>
 8006aca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006acc:	b111      	cbz	r1, 8006ad4 <_reclaim_reent+0x68>
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f000 f85c 	bl	8006b8c <_free_r>
 8006ad4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006ad6:	b111      	cbz	r1, 8006ade <_reclaim_reent+0x72>
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f000 f857 	bl	8006b8c <_free_r>
 8006ade:	6a23      	ldr	r3, [r4, #32]
 8006ae0:	b1b3      	cbz	r3, 8006b10 <_reclaim_reent+0xa4>
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006ae8:	4718      	bx	r3
 8006aea:	5949      	ldr	r1, [r1, r5]
 8006aec:	b941      	cbnz	r1, 8006b00 <_reclaim_reent+0x94>
 8006aee:	3504      	adds	r5, #4
 8006af0:	69e3      	ldr	r3, [r4, #28]
 8006af2:	2d80      	cmp	r5, #128	; 0x80
 8006af4:	68d9      	ldr	r1, [r3, #12]
 8006af6:	d1f8      	bne.n	8006aea <_reclaim_reent+0x7e>
 8006af8:	4620      	mov	r0, r4
 8006afa:	f000 f847 	bl	8006b8c <_free_r>
 8006afe:	e7c0      	b.n	8006a82 <_reclaim_reent+0x16>
 8006b00:	680e      	ldr	r6, [r1, #0]
 8006b02:	4620      	mov	r0, r4
 8006b04:	f000 f842 	bl	8006b8c <_free_r>
 8006b08:	4631      	mov	r1, r6
 8006b0a:	e7ef      	b.n	8006aec <_reclaim_reent+0x80>
 8006b0c:	2500      	movs	r5, #0
 8006b0e:	e7ef      	b.n	8006af0 <_reclaim_reent+0x84>
 8006b10:	bd70      	pop	{r4, r5, r6, pc}
 8006b12:	bf00      	nop
 8006b14:	2000005c 	.word	0x2000005c

08006b18 <__errno>:
 8006b18:	4b01      	ldr	r3, [pc, #4]	; (8006b20 <__errno+0x8>)
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	2000005c 	.word	0x2000005c

08006b24 <__libc_init_array>:
 8006b24:	b570      	push	{r4, r5, r6, lr}
 8006b26:	4d0d      	ldr	r5, [pc, #52]	; (8006b5c <__libc_init_array+0x38>)
 8006b28:	4c0d      	ldr	r4, [pc, #52]	; (8006b60 <__libc_init_array+0x3c>)
 8006b2a:	1b64      	subs	r4, r4, r5
 8006b2c:	10a4      	asrs	r4, r4, #2
 8006b2e:	2600      	movs	r6, #0
 8006b30:	42a6      	cmp	r6, r4
 8006b32:	d109      	bne.n	8006b48 <__libc_init_array+0x24>
 8006b34:	4d0b      	ldr	r5, [pc, #44]	; (8006b64 <__libc_init_array+0x40>)
 8006b36:	4c0c      	ldr	r4, [pc, #48]	; (8006b68 <__libc_init_array+0x44>)
 8006b38:	f000 fc6a 	bl	8007410 <_init>
 8006b3c:	1b64      	subs	r4, r4, r5
 8006b3e:	10a4      	asrs	r4, r4, #2
 8006b40:	2600      	movs	r6, #0
 8006b42:	42a6      	cmp	r6, r4
 8006b44:	d105      	bne.n	8006b52 <__libc_init_array+0x2e>
 8006b46:	bd70      	pop	{r4, r5, r6, pc}
 8006b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b4c:	4798      	blx	r3
 8006b4e:	3601      	adds	r6, #1
 8006b50:	e7ee      	b.n	8006b30 <__libc_init_array+0xc>
 8006b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b56:	4798      	blx	r3
 8006b58:	3601      	adds	r6, #1
 8006b5a:	e7f2      	b.n	8006b42 <__libc_init_array+0x1e>
 8006b5c:	08007630 	.word	0x08007630
 8006b60:	08007630 	.word	0x08007630
 8006b64:	08007630 	.word	0x08007630
 8006b68:	08007634 	.word	0x08007634

08006b6c <__retarget_lock_acquire_recursive>:
 8006b6c:	4770      	bx	lr

08006b6e <__retarget_lock_release_recursive>:
 8006b6e:	4770      	bx	lr

08006b70 <memcpy>:
 8006b70:	440a      	add	r2, r1
 8006b72:	4291      	cmp	r1, r2
 8006b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b78:	d100      	bne.n	8006b7c <memcpy+0xc>
 8006b7a:	4770      	bx	lr
 8006b7c:	b510      	push	{r4, lr}
 8006b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b86:	4291      	cmp	r1, r2
 8006b88:	d1f9      	bne.n	8006b7e <memcpy+0xe>
 8006b8a:	bd10      	pop	{r4, pc}

08006b8c <_free_r>:
 8006b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b8e:	2900      	cmp	r1, #0
 8006b90:	d044      	beq.n	8006c1c <_free_r+0x90>
 8006b92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b96:	9001      	str	r0, [sp, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b9e:	bfb8      	it	lt
 8006ba0:	18e4      	addlt	r4, r4, r3
 8006ba2:	f000 f8df 	bl	8006d64 <__malloc_lock>
 8006ba6:	4a1e      	ldr	r2, [pc, #120]	; (8006c20 <_free_r+0x94>)
 8006ba8:	9801      	ldr	r0, [sp, #4]
 8006baa:	6813      	ldr	r3, [r2, #0]
 8006bac:	b933      	cbnz	r3, 8006bbc <_free_r+0x30>
 8006bae:	6063      	str	r3, [r4, #4]
 8006bb0:	6014      	str	r4, [r2, #0]
 8006bb2:	b003      	add	sp, #12
 8006bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bb8:	f000 b8da 	b.w	8006d70 <__malloc_unlock>
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	d908      	bls.n	8006bd2 <_free_r+0x46>
 8006bc0:	6825      	ldr	r5, [r4, #0]
 8006bc2:	1961      	adds	r1, r4, r5
 8006bc4:	428b      	cmp	r3, r1
 8006bc6:	bf01      	itttt	eq
 8006bc8:	6819      	ldreq	r1, [r3, #0]
 8006bca:	685b      	ldreq	r3, [r3, #4]
 8006bcc:	1949      	addeq	r1, r1, r5
 8006bce:	6021      	streq	r1, [r4, #0]
 8006bd0:	e7ed      	b.n	8006bae <_free_r+0x22>
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	b10b      	cbz	r3, 8006bdc <_free_r+0x50>
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	d9fa      	bls.n	8006bd2 <_free_r+0x46>
 8006bdc:	6811      	ldr	r1, [r2, #0]
 8006bde:	1855      	adds	r5, r2, r1
 8006be0:	42a5      	cmp	r5, r4
 8006be2:	d10b      	bne.n	8006bfc <_free_r+0x70>
 8006be4:	6824      	ldr	r4, [r4, #0]
 8006be6:	4421      	add	r1, r4
 8006be8:	1854      	adds	r4, r2, r1
 8006bea:	42a3      	cmp	r3, r4
 8006bec:	6011      	str	r1, [r2, #0]
 8006bee:	d1e0      	bne.n	8006bb2 <_free_r+0x26>
 8006bf0:	681c      	ldr	r4, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	6053      	str	r3, [r2, #4]
 8006bf6:	440c      	add	r4, r1
 8006bf8:	6014      	str	r4, [r2, #0]
 8006bfa:	e7da      	b.n	8006bb2 <_free_r+0x26>
 8006bfc:	d902      	bls.n	8006c04 <_free_r+0x78>
 8006bfe:	230c      	movs	r3, #12
 8006c00:	6003      	str	r3, [r0, #0]
 8006c02:	e7d6      	b.n	8006bb2 <_free_r+0x26>
 8006c04:	6825      	ldr	r5, [r4, #0]
 8006c06:	1961      	adds	r1, r4, r5
 8006c08:	428b      	cmp	r3, r1
 8006c0a:	bf04      	itt	eq
 8006c0c:	6819      	ldreq	r1, [r3, #0]
 8006c0e:	685b      	ldreq	r3, [r3, #4]
 8006c10:	6063      	str	r3, [r4, #4]
 8006c12:	bf04      	itt	eq
 8006c14:	1949      	addeq	r1, r1, r5
 8006c16:	6021      	streq	r1, [r4, #0]
 8006c18:	6054      	str	r4, [r2, #4]
 8006c1a:	e7ca      	b.n	8006bb2 <_free_r+0x26>
 8006c1c:	b003      	add	sp, #12
 8006c1e:	bd30      	pop	{r4, r5, pc}
 8006c20:	2000163c 	.word	0x2000163c

08006c24 <sbrk_aligned>:
 8006c24:	b570      	push	{r4, r5, r6, lr}
 8006c26:	4e0e      	ldr	r6, [pc, #56]	; (8006c60 <sbrk_aligned+0x3c>)
 8006c28:	460c      	mov	r4, r1
 8006c2a:	6831      	ldr	r1, [r6, #0]
 8006c2c:	4605      	mov	r5, r0
 8006c2e:	b911      	cbnz	r1, 8006c36 <sbrk_aligned+0x12>
 8006c30:	f000 fba6 	bl	8007380 <_sbrk_r>
 8006c34:	6030      	str	r0, [r6, #0]
 8006c36:	4621      	mov	r1, r4
 8006c38:	4628      	mov	r0, r5
 8006c3a:	f000 fba1 	bl	8007380 <_sbrk_r>
 8006c3e:	1c43      	adds	r3, r0, #1
 8006c40:	d00a      	beq.n	8006c58 <sbrk_aligned+0x34>
 8006c42:	1cc4      	adds	r4, r0, #3
 8006c44:	f024 0403 	bic.w	r4, r4, #3
 8006c48:	42a0      	cmp	r0, r4
 8006c4a:	d007      	beq.n	8006c5c <sbrk_aligned+0x38>
 8006c4c:	1a21      	subs	r1, r4, r0
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f000 fb96 	bl	8007380 <_sbrk_r>
 8006c54:	3001      	adds	r0, #1
 8006c56:	d101      	bne.n	8006c5c <sbrk_aligned+0x38>
 8006c58:	f04f 34ff 	mov.w	r4, #4294967295
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}
 8006c60:	20001640 	.word	0x20001640

08006c64 <_malloc_r>:
 8006c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c68:	1ccd      	adds	r5, r1, #3
 8006c6a:	f025 0503 	bic.w	r5, r5, #3
 8006c6e:	3508      	adds	r5, #8
 8006c70:	2d0c      	cmp	r5, #12
 8006c72:	bf38      	it	cc
 8006c74:	250c      	movcc	r5, #12
 8006c76:	2d00      	cmp	r5, #0
 8006c78:	4607      	mov	r7, r0
 8006c7a:	db01      	blt.n	8006c80 <_malloc_r+0x1c>
 8006c7c:	42a9      	cmp	r1, r5
 8006c7e:	d905      	bls.n	8006c8c <_malloc_r+0x28>
 8006c80:	230c      	movs	r3, #12
 8006c82:	603b      	str	r3, [r7, #0]
 8006c84:	2600      	movs	r6, #0
 8006c86:	4630      	mov	r0, r6
 8006c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d60 <_malloc_r+0xfc>
 8006c90:	f000 f868 	bl	8006d64 <__malloc_lock>
 8006c94:	f8d8 3000 	ldr.w	r3, [r8]
 8006c98:	461c      	mov	r4, r3
 8006c9a:	bb5c      	cbnz	r4, 8006cf4 <_malloc_r+0x90>
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	f7ff ffc0 	bl	8006c24 <sbrk_aligned>
 8006ca4:	1c43      	adds	r3, r0, #1
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	d155      	bne.n	8006d56 <_malloc_r+0xf2>
 8006caa:	f8d8 4000 	ldr.w	r4, [r8]
 8006cae:	4626      	mov	r6, r4
 8006cb0:	2e00      	cmp	r6, #0
 8006cb2:	d145      	bne.n	8006d40 <_malloc_r+0xdc>
 8006cb4:	2c00      	cmp	r4, #0
 8006cb6:	d048      	beq.n	8006d4a <_malloc_r+0xe6>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	4631      	mov	r1, r6
 8006cbc:	4638      	mov	r0, r7
 8006cbe:	eb04 0903 	add.w	r9, r4, r3
 8006cc2:	f000 fb5d 	bl	8007380 <_sbrk_r>
 8006cc6:	4581      	cmp	r9, r0
 8006cc8:	d13f      	bne.n	8006d4a <_malloc_r+0xe6>
 8006cca:	6821      	ldr	r1, [r4, #0]
 8006ccc:	1a6d      	subs	r5, r5, r1
 8006cce:	4629      	mov	r1, r5
 8006cd0:	4638      	mov	r0, r7
 8006cd2:	f7ff ffa7 	bl	8006c24 <sbrk_aligned>
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	d037      	beq.n	8006d4a <_malloc_r+0xe6>
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	442b      	add	r3, r5
 8006cde:	6023      	str	r3, [r4, #0]
 8006ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d038      	beq.n	8006d5a <_malloc_r+0xf6>
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	42a2      	cmp	r2, r4
 8006cec:	d12b      	bne.n	8006d46 <_malloc_r+0xe2>
 8006cee:	2200      	movs	r2, #0
 8006cf0:	605a      	str	r2, [r3, #4]
 8006cf2:	e00f      	b.n	8006d14 <_malloc_r+0xb0>
 8006cf4:	6822      	ldr	r2, [r4, #0]
 8006cf6:	1b52      	subs	r2, r2, r5
 8006cf8:	d41f      	bmi.n	8006d3a <_malloc_r+0xd6>
 8006cfa:	2a0b      	cmp	r2, #11
 8006cfc:	d917      	bls.n	8006d2e <_malloc_r+0xca>
 8006cfe:	1961      	adds	r1, r4, r5
 8006d00:	42a3      	cmp	r3, r4
 8006d02:	6025      	str	r5, [r4, #0]
 8006d04:	bf18      	it	ne
 8006d06:	6059      	strne	r1, [r3, #4]
 8006d08:	6863      	ldr	r3, [r4, #4]
 8006d0a:	bf08      	it	eq
 8006d0c:	f8c8 1000 	streq.w	r1, [r8]
 8006d10:	5162      	str	r2, [r4, r5]
 8006d12:	604b      	str	r3, [r1, #4]
 8006d14:	4638      	mov	r0, r7
 8006d16:	f104 060b 	add.w	r6, r4, #11
 8006d1a:	f000 f829 	bl	8006d70 <__malloc_unlock>
 8006d1e:	f026 0607 	bic.w	r6, r6, #7
 8006d22:	1d23      	adds	r3, r4, #4
 8006d24:	1af2      	subs	r2, r6, r3
 8006d26:	d0ae      	beq.n	8006c86 <_malloc_r+0x22>
 8006d28:	1b9b      	subs	r3, r3, r6
 8006d2a:	50a3      	str	r3, [r4, r2]
 8006d2c:	e7ab      	b.n	8006c86 <_malloc_r+0x22>
 8006d2e:	42a3      	cmp	r3, r4
 8006d30:	6862      	ldr	r2, [r4, #4]
 8006d32:	d1dd      	bne.n	8006cf0 <_malloc_r+0x8c>
 8006d34:	f8c8 2000 	str.w	r2, [r8]
 8006d38:	e7ec      	b.n	8006d14 <_malloc_r+0xb0>
 8006d3a:	4623      	mov	r3, r4
 8006d3c:	6864      	ldr	r4, [r4, #4]
 8006d3e:	e7ac      	b.n	8006c9a <_malloc_r+0x36>
 8006d40:	4634      	mov	r4, r6
 8006d42:	6876      	ldr	r6, [r6, #4]
 8006d44:	e7b4      	b.n	8006cb0 <_malloc_r+0x4c>
 8006d46:	4613      	mov	r3, r2
 8006d48:	e7cc      	b.n	8006ce4 <_malloc_r+0x80>
 8006d4a:	230c      	movs	r3, #12
 8006d4c:	603b      	str	r3, [r7, #0]
 8006d4e:	4638      	mov	r0, r7
 8006d50:	f000 f80e 	bl	8006d70 <__malloc_unlock>
 8006d54:	e797      	b.n	8006c86 <_malloc_r+0x22>
 8006d56:	6025      	str	r5, [r4, #0]
 8006d58:	e7dc      	b.n	8006d14 <_malloc_r+0xb0>
 8006d5a:	605b      	str	r3, [r3, #4]
 8006d5c:	deff      	udf	#255	; 0xff
 8006d5e:	bf00      	nop
 8006d60:	2000163c 	.word	0x2000163c

08006d64 <__malloc_lock>:
 8006d64:	4801      	ldr	r0, [pc, #4]	; (8006d6c <__malloc_lock+0x8>)
 8006d66:	f7ff bf01 	b.w	8006b6c <__retarget_lock_acquire_recursive>
 8006d6a:	bf00      	nop
 8006d6c:	20001638 	.word	0x20001638

08006d70 <__malloc_unlock>:
 8006d70:	4801      	ldr	r0, [pc, #4]	; (8006d78 <__malloc_unlock+0x8>)
 8006d72:	f7ff befc 	b.w	8006b6e <__retarget_lock_release_recursive>
 8006d76:	bf00      	nop
 8006d78:	20001638 	.word	0x20001638

08006d7c <__ssputs_r>:
 8006d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d80:	688e      	ldr	r6, [r1, #8]
 8006d82:	461f      	mov	r7, r3
 8006d84:	42be      	cmp	r6, r7
 8006d86:	680b      	ldr	r3, [r1, #0]
 8006d88:	4682      	mov	sl, r0
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	4690      	mov	r8, r2
 8006d8e:	d82c      	bhi.n	8006dea <__ssputs_r+0x6e>
 8006d90:	898a      	ldrh	r2, [r1, #12]
 8006d92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d96:	d026      	beq.n	8006de6 <__ssputs_r+0x6a>
 8006d98:	6965      	ldr	r5, [r4, #20]
 8006d9a:	6909      	ldr	r1, [r1, #16]
 8006d9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006da0:	eba3 0901 	sub.w	r9, r3, r1
 8006da4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006da8:	1c7b      	adds	r3, r7, #1
 8006daa:	444b      	add	r3, r9
 8006dac:	106d      	asrs	r5, r5, #1
 8006dae:	429d      	cmp	r5, r3
 8006db0:	bf38      	it	cc
 8006db2:	461d      	movcc	r5, r3
 8006db4:	0553      	lsls	r3, r2, #21
 8006db6:	d527      	bpl.n	8006e08 <__ssputs_r+0x8c>
 8006db8:	4629      	mov	r1, r5
 8006dba:	f7ff ff53 	bl	8006c64 <_malloc_r>
 8006dbe:	4606      	mov	r6, r0
 8006dc0:	b360      	cbz	r0, 8006e1c <__ssputs_r+0xa0>
 8006dc2:	6921      	ldr	r1, [r4, #16]
 8006dc4:	464a      	mov	r2, r9
 8006dc6:	f7ff fed3 	bl	8006b70 <memcpy>
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd4:	81a3      	strh	r3, [r4, #12]
 8006dd6:	6126      	str	r6, [r4, #16]
 8006dd8:	6165      	str	r5, [r4, #20]
 8006dda:	444e      	add	r6, r9
 8006ddc:	eba5 0509 	sub.w	r5, r5, r9
 8006de0:	6026      	str	r6, [r4, #0]
 8006de2:	60a5      	str	r5, [r4, #8]
 8006de4:	463e      	mov	r6, r7
 8006de6:	42be      	cmp	r6, r7
 8006de8:	d900      	bls.n	8006dec <__ssputs_r+0x70>
 8006dea:	463e      	mov	r6, r7
 8006dec:	6820      	ldr	r0, [r4, #0]
 8006dee:	4632      	mov	r2, r6
 8006df0:	4641      	mov	r1, r8
 8006df2:	f000 faab 	bl	800734c <memmove>
 8006df6:	68a3      	ldr	r3, [r4, #8]
 8006df8:	1b9b      	subs	r3, r3, r6
 8006dfa:	60a3      	str	r3, [r4, #8]
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	4433      	add	r3, r6
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	2000      	movs	r0, #0
 8006e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e08:	462a      	mov	r2, r5
 8006e0a:	f000 fac9 	bl	80073a0 <_realloc_r>
 8006e0e:	4606      	mov	r6, r0
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d1e0      	bne.n	8006dd6 <__ssputs_r+0x5a>
 8006e14:	6921      	ldr	r1, [r4, #16]
 8006e16:	4650      	mov	r0, sl
 8006e18:	f7ff feb8 	bl	8006b8c <_free_r>
 8006e1c:	230c      	movs	r3, #12
 8006e1e:	f8ca 3000 	str.w	r3, [sl]
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e28:	81a3      	strh	r3, [r4, #12]
 8006e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2e:	e7e9      	b.n	8006e04 <__ssputs_r+0x88>

08006e30 <_svfiprintf_r>:
 8006e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e34:	4698      	mov	r8, r3
 8006e36:	898b      	ldrh	r3, [r1, #12]
 8006e38:	061b      	lsls	r3, r3, #24
 8006e3a:	b09d      	sub	sp, #116	; 0x74
 8006e3c:	4607      	mov	r7, r0
 8006e3e:	460d      	mov	r5, r1
 8006e40:	4614      	mov	r4, r2
 8006e42:	d50e      	bpl.n	8006e62 <_svfiprintf_r+0x32>
 8006e44:	690b      	ldr	r3, [r1, #16]
 8006e46:	b963      	cbnz	r3, 8006e62 <_svfiprintf_r+0x32>
 8006e48:	2140      	movs	r1, #64	; 0x40
 8006e4a:	f7ff ff0b 	bl	8006c64 <_malloc_r>
 8006e4e:	6028      	str	r0, [r5, #0]
 8006e50:	6128      	str	r0, [r5, #16]
 8006e52:	b920      	cbnz	r0, 8006e5e <_svfiprintf_r+0x2e>
 8006e54:	230c      	movs	r3, #12
 8006e56:	603b      	str	r3, [r7, #0]
 8006e58:	f04f 30ff 	mov.w	r0, #4294967295
 8006e5c:	e0d0      	b.n	8007000 <_svfiprintf_r+0x1d0>
 8006e5e:	2340      	movs	r3, #64	; 0x40
 8006e60:	616b      	str	r3, [r5, #20]
 8006e62:	2300      	movs	r3, #0
 8006e64:	9309      	str	r3, [sp, #36]	; 0x24
 8006e66:	2320      	movs	r3, #32
 8006e68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e70:	2330      	movs	r3, #48	; 0x30
 8006e72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007018 <_svfiprintf_r+0x1e8>
 8006e76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e7a:	f04f 0901 	mov.w	r9, #1
 8006e7e:	4623      	mov	r3, r4
 8006e80:	469a      	mov	sl, r3
 8006e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e86:	b10a      	cbz	r2, 8006e8c <_svfiprintf_r+0x5c>
 8006e88:	2a25      	cmp	r2, #37	; 0x25
 8006e8a:	d1f9      	bne.n	8006e80 <_svfiprintf_r+0x50>
 8006e8c:	ebba 0b04 	subs.w	fp, sl, r4
 8006e90:	d00b      	beq.n	8006eaa <_svfiprintf_r+0x7a>
 8006e92:	465b      	mov	r3, fp
 8006e94:	4622      	mov	r2, r4
 8006e96:	4629      	mov	r1, r5
 8006e98:	4638      	mov	r0, r7
 8006e9a:	f7ff ff6f 	bl	8006d7c <__ssputs_r>
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	f000 80a9 	beq.w	8006ff6 <_svfiprintf_r+0x1c6>
 8006ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ea6:	445a      	add	r2, fp
 8006ea8:	9209      	str	r2, [sp, #36]	; 0x24
 8006eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 80a1 	beq.w	8006ff6 <_svfiprintf_r+0x1c6>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ebe:	f10a 0a01 	add.w	sl, sl, #1
 8006ec2:	9304      	str	r3, [sp, #16]
 8006ec4:	9307      	str	r3, [sp, #28]
 8006ec6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006eca:	931a      	str	r3, [sp, #104]	; 0x68
 8006ecc:	4654      	mov	r4, sl
 8006ece:	2205      	movs	r2, #5
 8006ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed4:	4850      	ldr	r0, [pc, #320]	; (8007018 <_svfiprintf_r+0x1e8>)
 8006ed6:	f7f9 f983 	bl	80001e0 <memchr>
 8006eda:	9a04      	ldr	r2, [sp, #16]
 8006edc:	b9d8      	cbnz	r0, 8006f16 <_svfiprintf_r+0xe6>
 8006ede:	06d0      	lsls	r0, r2, #27
 8006ee0:	bf44      	itt	mi
 8006ee2:	2320      	movmi	r3, #32
 8006ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ee8:	0711      	lsls	r1, r2, #28
 8006eea:	bf44      	itt	mi
 8006eec:	232b      	movmi	r3, #43	; 0x2b
 8006eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ef8:	d015      	beq.n	8006f26 <_svfiprintf_r+0xf6>
 8006efa:	9a07      	ldr	r2, [sp, #28]
 8006efc:	4654      	mov	r4, sl
 8006efe:	2000      	movs	r0, #0
 8006f00:	f04f 0c0a 	mov.w	ip, #10
 8006f04:	4621      	mov	r1, r4
 8006f06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f0a:	3b30      	subs	r3, #48	; 0x30
 8006f0c:	2b09      	cmp	r3, #9
 8006f0e:	d94d      	bls.n	8006fac <_svfiprintf_r+0x17c>
 8006f10:	b1b0      	cbz	r0, 8006f40 <_svfiprintf_r+0x110>
 8006f12:	9207      	str	r2, [sp, #28]
 8006f14:	e014      	b.n	8006f40 <_svfiprintf_r+0x110>
 8006f16:	eba0 0308 	sub.w	r3, r0, r8
 8006f1a:	fa09 f303 	lsl.w	r3, r9, r3
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	9304      	str	r3, [sp, #16]
 8006f22:	46a2      	mov	sl, r4
 8006f24:	e7d2      	b.n	8006ecc <_svfiprintf_r+0x9c>
 8006f26:	9b03      	ldr	r3, [sp, #12]
 8006f28:	1d19      	adds	r1, r3, #4
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	9103      	str	r1, [sp, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bfbb      	ittet	lt
 8006f32:	425b      	neglt	r3, r3
 8006f34:	f042 0202 	orrlt.w	r2, r2, #2
 8006f38:	9307      	strge	r3, [sp, #28]
 8006f3a:	9307      	strlt	r3, [sp, #28]
 8006f3c:	bfb8      	it	lt
 8006f3e:	9204      	strlt	r2, [sp, #16]
 8006f40:	7823      	ldrb	r3, [r4, #0]
 8006f42:	2b2e      	cmp	r3, #46	; 0x2e
 8006f44:	d10c      	bne.n	8006f60 <_svfiprintf_r+0x130>
 8006f46:	7863      	ldrb	r3, [r4, #1]
 8006f48:	2b2a      	cmp	r3, #42	; 0x2a
 8006f4a:	d134      	bne.n	8006fb6 <_svfiprintf_r+0x186>
 8006f4c:	9b03      	ldr	r3, [sp, #12]
 8006f4e:	1d1a      	adds	r2, r3, #4
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	9203      	str	r2, [sp, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	bfb8      	it	lt
 8006f58:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f5c:	3402      	adds	r4, #2
 8006f5e:	9305      	str	r3, [sp, #20]
 8006f60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007028 <_svfiprintf_r+0x1f8>
 8006f64:	7821      	ldrb	r1, [r4, #0]
 8006f66:	2203      	movs	r2, #3
 8006f68:	4650      	mov	r0, sl
 8006f6a:	f7f9 f939 	bl	80001e0 <memchr>
 8006f6e:	b138      	cbz	r0, 8006f80 <_svfiprintf_r+0x150>
 8006f70:	9b04      	ldr	r3, [sp, #16]
 8006f72:	eba0 000a 	sub.w	r0, r0, sl
 8006f76:	2240      	movs	r2, #64	; 0x40
 8006f78:	4082      	lsls	r2, r0
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	3401      	adds	r4, #1
 8006f7e:	9304      	str	r3, [sp, #16]
 8006f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f84:	4825      	ldr	r0, [pc, #148]	; (800701c <_svfiprintf_r+0x1ec>)
 8006f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f8a:	2206      	movs	r2, #6
 8006f8c:	f7f9 f928 	bl	80001e0 <memchr>
 8006f90:	2800      	cmp	r0, #0
 8006f92:	d038      	beq.n	8007006 <_svfiprintf_r+0x1d6>
 8006f94:	4b22      	ldr	r3, [pc, #136]	; (8007020 <_svfiprintf_r+0x1f0>)
 8006f96:	bb1b      	cbnz	r3, 8006fe0 <_svfiprintf_r+0x1b0>
 8006f98:	9b03      	ldr	r3, [sp, #12]
 8006f9a:	3307      	adds	r3, #7
 8006f9c:	f023 0307 	bic.w	r3, r3, #7
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	9303      	str	r3, [sp, #12]
 8006fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa6:	4433      	add	r3, r6
 8006fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8006faa:	e768      	b.n	8006e7e <_svfiprintf_r+0x4e>
 8006fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fb0:	460c      	mov	r4, r1
 8006fb2:	2001      	movs	r0, #1
 8006fb4:	e7a6      	b.n	8006f04 <_svfiprintf_r+0xd4>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	3401      	adds	r4, #1
 8006fba:	9305      	str	r3, [sp, #20]
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	f04f 0c0a 	mov.w	ip, #10
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fc8:	3a30      	subs	r2, #48	; 0x30
 8006fca:	2a09      	cmp	r2, #9
 8006fcc:	d903      	bls.n	8006fd6 <_svfiprintf_r+0x1a6>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0c6      	beq.n	8006f60 <_svfiprintf_r+0x130>
 8006fd2:	9105      	str	r1, [sp, #20]
 8006fd4:	e7c4      	b.n	8006f60 <_svfiprintf_r+0x130>
 8006fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fda:	4604      	mov	r4, r0
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e7f0      	b.n	8006fc2 <_svfiprintf_r+0x192>
 8006fe0:	ab03      	add	r3, sp, #12
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	462a      	mov	r2, r5
 8006fe6:	4b0f      	ldr	r3, [pc, #60]	; (8007024 <_svfiprintf_r+0x1f4>)
 8006fe8:	a904      	add	r1, sp, #16
 8006fea:	4638      	mov	r0, r7
 8006fec:	f3af 8000 	nop.w
 8006ff0:	1c42      	adds	r2, r0, #1
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	d1d6      	bne.n	8006fa4 <_svfiprintf_r+0x174>
 8006ff6:	89ab      	ldrh	r3, [r5, #12]
 8006ff8:	065b      	lsls	r3, r3, #25
 8006ffa:	f53f af2d 	bmi.w	8006e58 <_svfiprintf_r+0x28>
 8006ffe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007000:	b01d      	add	sp, #116	; 0x74
 8007002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007006:	ab03      	add	r3, sp, #12
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	462a      	mov	r2, r5
 800700c:	4b05      	ldr	r3, [pc, #20]	; (8007024 <_svfiprintf_r+0x1f4>)
 800700e:	a904      	add	r1, sp, #16
 8007010:	4638      	mov	r0, r7
 8007012:	f000 f879 	bl	8007108 <_printf_i>
 8007016:	e7eb      	b.n	8006ff0 <_svfiprintf_r+0x1c0>
 8007018:	080075fc 	.word	0x080075fc
 800701c:	08007606 	.word	0x08007606
 8007020:	00000000 	.word	0x00000000
 8007024:	08006d7d 	.word	0x08006d7d
 8007028:	08007602 	.word	0x08007602

0800702c <_printf_common>:
 800702c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007030:	4616      	mov	r6, r2
 8007032:	4699      	mov	r9, r3
 8007034:	688a      	ldr	r2, [r1, #8]
 8007036:	690b      	ldr	r3, [r1, #16]
 8007038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800703c:	4293      	cmp	r3, r2
 800703e:	bfb8      	it	lt
 8007040:	4613      	movlt	r3, r2
 8007042:	6033      	str	r3, [r6, #0]
 8007044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007048:	4607      	mov	r7, r0
 800704a:	460c      	mov	r4, r1
 800704c:	b10a      	cbz	r2, 8007052 <_printf_common+0x26>
 800704e:	3301      	adds	r3, #1
 8007050:	6033      	str	r3, [r6, #0]
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	0699      	lsls	r1, r3, #26
 8007056:	bf42      	ittt	mi
 8007058:	6833      	ldrmi	r3, [r6, #0]
 800705a:	3302      	addmi	r3, #2
 800705c:	6033      	strmi	r3, [r6, #0]
 800705e:	6825      	ldr	r5, [r4, #0]
 8007060:	f015 0506 	ands.w	r5, r5, #6
 8007064:	d106      	bne.n	8007074 <_printf_common+0x48>
 8007066:	f104 0a19 	add.w	sl, r4, #25
 800706a:	68e3      	ldr	r3, [r4, #12]
 800706c:	6832      	ldr	r2, [r6, #0]
 800706e:	1a9b      	subs	r3, r3, r2
 8007070:	42ab      	cmp	r3, r5
 8007072:	dc26      	bgt.n	80070c2 <_printf_common+0x96>
 8007074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007078:	1e13      	subs	r3, r2, #0
 800707a:	6822      	ldr	r2, [r4, #0]
 800707c:	bf18      	it	ne
 800707e:	2301      	movne	r3, #1
 8007080:	0692      	lsls	r2, r2, #26
 8007082:	d42b      	bmi.n	80070dc <_printf_common+0xb0>
 8007084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007088:	4649      	mov	r1, r9
 800708a:	4638      	mov	r0, r7
 800708c:	47c0      	blx	r8
 800708e:	3001      	adds	r0, #1
 8007090:	d01e      	beq.n	80070d0 <_printf_common+0xa4>
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	6922      	ldr	r2, [r4, #16]
 8007096:	f003 0306 	and.w	r3, r3, #6
 800709a:	2b04      	cmp	r3, #4
 800709c:	bf02      	ittt	eq
 800709e:	68e5      	ldreq	r5, [r4, #12]
 80070a0:	6833      	ldreq	r3, [r6, #0]
 80070a2:	1aed      	subeq	r5, r5, r3
 80070a4:	68a3      	ldr	r3, [r4, #8]
 80070a6:	bf0c      	ite	eq
 80070a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070ac:	2500      	movne	r5, #0
 80070ae:	4293      	cmp	r3, r2
 80070b0:	bfc4      	itt	gt
 80070b2:	1a9b      	subgt	r3, r3, r2
 80070b4:	18ed      	addgt	r5, r5, r3
 80070b6:	2600      	movs	r6, #0
 80070b8:	341a      	adds	r4, #26
 80070ba:	42b5      	cmp	r5, r6
 80070bc:	d11a      	bne.n	80070f4 <_printf_common+0xc8>
 80070be:	2000      	movs	r0, #0
 80070c0:	e008      	b.n	80070d4 <_printf_common+0xa8>
 80070c2:	2301      	movs	r3, #1
 80070c4:	4652      	mov	r2, sl
 80070c6:	4649      	mov	r1, r9
 80070c8:	4638      	mov	r0, r7
 80070ca:	47c0      	blx	r8
 80070cc:	3001      	adds	r0, #1
 80070ce:	d103      	bne.n	80070d8 <_printf_common+0xac>
 80070d0:	f04f 30ff 	mov.w	r0, #4294967295
 80070d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d8:	3501      	adds	r5, #1
 80070da:	e7c6      	b.n	800706a <_printf_common+0x3e>
 80070dc:	18e1      	adds	r1, r4, r3
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	2030      	movs	r0, #48	; 0x30
 80070e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070e6:	4422      	add	r2, r4
 80070e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070f0:	3302      	adds	r3, #2
 80070f2:	e7c7      	b.n	8007084 <_printf_common+0x58>
 80070f4:	2301      	movs	r3, #1
 80070f6:	4622      	mov	r2, r4
 80070f8:	4649      	mov	r1, r9
 80070fa:	4638      	mov	r0, r7
 80070fc:	47c0      	blx	r8
 80070fe:	3001      	adds	r0, #1
 8007100:	d0e6      	beq.n	80070d0 <_printf_common+0xa4>
 8007102:	3601      	adds	r6, #1
 8007104:	e7d9      	b.n	80070ba <_printf_common+0x8e>
	...

08007108 <_printf_i>:
 8007108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800710c:	7e0f      	ldrb	r7, [r1, #24]
 800710e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007110:	2f78      	cmp	r7, #120	; 0x78
 8007112:	4691      	mov	r9, r2
 8007114:	4680      	mov	r8, r0
 8007116:	460c      	mov	r4, r1
 8007118:	469a      	mov	sl, r3
 800711a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800711e:	d807      	bhi.n	8007130 <_printf_i+0x28>
 8007120:	2f62      	cmp	r7, #98	; 0x62
 8007122:	d80a      	bhi.n	800713a <_printf_i+0x32>
 8007124:	2f00      	cmp	r7, #0
 8007126:	f000 80d4 	beq.w	80072d2 <_printf_i+0x1ca>
 800712a:	2f58      	cmp	r7, #88	; 0x58
 800712c:	f000 80c0 	beq.w	80072b0 <_printf_i+0x1a8>
 8007130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007138:	e03a      	b.n	80071b0 <_printf_i+0xa8>
 800713a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800713e:	2b15      	cmp	r3, #21
 8007140:	d8f6      	bhi.n	8007130 <_printf_i+0x28>
 8007142:	a101      	add	r1, pc, #4	; (adr r1, 8007148 <_printf_i+0x40>)
 8007144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007148:	080071a1 	.word	0x080071a1
 800714c:	080071b5 	.word	0x080071b5
 8007150:	08007131 	.word	0x08007131
 8007154:	08007131 	.word	0x08007131
 8007158:	08007131 	.word	0x08007131
 800715c:	08007131 	.word	0x08007131
 8007160:	080071b5 	.word	0x080071b5
 8007164:	08007131 	.word	0x08007131
 8007168:	08007131 	.word	0x08007131
 800716c:	08007131 	.word	0x08007131
 8007170:	08007131 	.word	0x08007131
 8007174:	080072b9 	.word	0x080072b9
 8007178:	080071e1 	.word	0x080071e1
 800717c:	08007273 	.word	0x08007273
 8007180:	08007131 	.word	0x08007131
 8007184:	08007131 	.word	0x08007131
 8007188:	080072db 	.word	0x080072db
 800718c:	08007131 	.word	0x08007131
 8007190:	080071e1 	.word	0x080071e1
 8007194:	08007131 	.word	0x08007131
 8007198:	08007131 	.word	0x08007131
 800719c:	0800727b 	.word	0x0800727b
 80071a0:	682b      	ldr	r3, [r5, #0]
 80071a2:	1d1a      	adds	r2, r3, #4
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	602a      	str	r2, [r5, #0]
 80071a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071b0:	2301      	movs	r3, #1
 80071b2:	e09f      	b.n	80072f4 <_printf_i+0x1ec>
 80071b4:	6820      	ldr	r0, [r4, #0]
 80071b6:	682b      	ldr	r3, [r5, #0]
 80071b8:	0607      	lsls	r7, r0, #24
 80071ba:	f103 0104 	add.w	r1, r3, #4
 80071be:	6029      	str	r1, [r5, #0]
 80071c0:	d501      	bpl.n	80071c6 <_printf_i+0xbe>
 80071c2:	681e      	ldr	r6, [r3, #0]
 80071c4:	e003      	b.n	80071ce <_printf_i+0xc6>
 80071c6:	0646      	lsls	r6, r0, #25
 80071c8:	d5fb      	bpl.n	80071c2 <_printf_i+0xba>
 80071ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80071ce:	2e00      	cmp	r6, #0
 80071d0:	da03      	bge.n	80071da <_printf_i+0xd2>
 80071d2:	232d      	movs	r3, #45	; 0x2d
 80071d4:	4276      	negs	r6, r6
 80071d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071da:	485a      	ldr	r0, [pc, #360]	; (8007344 <_printf_i+0x23c>)
 80071dc:	230a      	movs	r3, #10
 80071de:	e012      	b.n	8007206 <_printf_i+0xfe>
 80071e0:	682b      	ldr	r3, [r5, #0]
 80071e2:	6820      	ldr	r0, [r4, #0]
 80071e4:	1d19      	adds	r1, r3, #4
 80071e6:	6029      	str	r1, [r5, #0]
 80071e8:	0605      	lsls	r5, r0, #24
 80071ea:	d501      	bpl.n	80071f0 <_printf_i+0xe8>
 80071ec:	681e      	ldr	r6, [r3, #0]
 80071ee:	e002      	b.n	80071f6 <_printf_i+0xee>
 80071f0:	0641      	lsls	r1, r0, #25
 80071f2:	d5fb      	bpl.n	80071ec <_printf_i+0xe4>
 80071f4:	881e      	ldrh	r6, [r3, #0]
 80071f6:	4853      	ldr	r0, [pc, #332]	; (8007344 <_printf_i+0x23c>)
 80071f8:	2f6f      	cmp	r7, #111	; 0x6f
 80071fa:	bf0c      	ite	eq
 80071fc:	2308      	moveq	r3, #8
 80071fe:	230a      	movne	r3, #10
 8007200:	2100      	movs	r1, #0
 8007202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007206:	6865      	ldr	r5, [r4, #4]
 8007208:	60a5      	str	r5, [r4, #8]
 800720a:	2d00      	cmp	r5, #0
 800720c:	bfa2      	ittt	ge
 800720e:	6821      	ldrge	r1, [r4, #0]
 8007210:	f021 0104 	bicge.w	r1, r1, #4
 8007214:	6021      	strge	r1, [r4, #0]
 8007216:	b90e      	cbnz	r6, 800721c <_printf_i+0x114>
 8007218:	2d00      	cmp	r5, #0
 800721a:	d04b      	beq.n	80072b4 <_printf_i+0x1ac>
 800721c:	4615      	mov	r5, r2
 800721e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007222:	fb03 6711 	mls	r7, r3, r1, r6
 8007226:	5dc7      	ldrb	r7, [r0, r7]
 8007228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800722c:	4637      	mov	r7, r6
 800722e:	42bb      	cmp	r3, r7
 8007230:	460e      	mov	r6, r1
 8007232:	d9f4      	bls.n	800721e <_printf_i+0x116>
 8007234:	2b08      	cmp	r3, #8
 8007236:	d10b      	bne.n	8007250 <_printf_i+0x148>
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	07de      	lsls	r6, r3, #31
 800723c:	d508      	bpl.n	8007250 <_printf_i+0x148>
 800723e:	6923      	ldr	r3, [r4, #16]
 8007240:	6861      	ldr	r1, [r4, #4]
 8007242:	4299      	cmp	r1, r3
 8007244:	bfde      	ittt	le
 8007246:	2330      	movle	r3, #48	; 0x30
 8007248:	f805 3c01 	strble.w	r3, [r5, #-1]
 800724c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007250:	1b52      	subs	r2, r2, r5
 8007252:	6122      	str	r2, [r4, #16]
 8007254:	f8cd a000 	str.w	sl, [sp]
 8007258:	464b      	mov	r3, r9
 800725a:	aa03      	add	r2, sp, #12
 800725c:	4621      	mov	r1, r4
 800725e:	4640      	mov	r0, r8
 8007260:	f7ff fee4 	bl	800702c <_printf_common>
 8007264:	3001      	adds	r0, #1
 8007266:	d14a      	bne.n	80072fe <_printf_i+0x1f6>
 8007268:	f04f 30ff 	mov.w	r0, #4294967295
 800726c:	b004      	add	sp, #16
 800726e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	f043 0320 	orr.w	r3, r3, #32
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	4833      	ldr	r0, [pc, #204]	; (8007348 <_printf_i+0x240>)
 800727c:	2778      	movs	r7, #120	; 0x78
 800727e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	6829      	ldr	r1, [r5, #0]
 8007286:	061f      	lsls	r7, r3, #24
 8007288:	f851 6b04 	ldr.w	r6, [r1], #4
 800728c:	d402      	bmi.n	8007294 <_printf_i+0x18c>
 800728e:	065f      	lsls	r7, r3, #25
 8007290:	bf48      	it	mi
 8007292:	b2b6      	uxthmi	r6, r6
 8007294:	07df      	lsls	r7, r3, #31
 8007296:	bf48      	it	mi
 8007298:	f043 0320 	orrmi.w	r3, r3, #32
 800729c:	6029      	str	r1, [r5, #0]
 800729e:	bf48      	it	mi
 80072a0:	6023      	strmi	r3, [r4, #0]
 80072a2:	b91e      	cbnz	r6, 80072ac <_printf_i+0x1a4>
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	f023 0320 	bic.w	r3, r3, #32
 80072aa:	6023      	str	r3, [r4, #0]
 80072ac:	2310      	movs	r3, #16
 80072ae:	e7a7      	b.n	8007200 <_printf_i+0xf8>
 80072b0:	4824      	ldr	r0, [pc, #144]	; (8007344 <_printf_i+0x23c>)
 80072b2:	e7e4      	b.n	800727e <_printf_i+0x176>
 80072b4:	4615      	mov	r5, r2
 80072b6:	e7bd      	b.n	8007234 <_printf_i+0x12c>
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	6826      	ldr	r6, [r4, #0]
 80072bc:	6961      	ldr	r1, [r4, #20]
 80072be:	1d18      	adds	r0, r3, #4
 80072c0:	6028      	str	r0, [r5, #0]
 80072c2:	0635      	lsls	r5, r6, #24
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	d501      	bpl.n	80072cc <_printf_i+0x1c4>
 80072c8:	6019      	str	r1, [r3, #0]
 80072ca:	e002      	b.n	80072d2 <_printf_i+0x1ca>
 80072cc:	0670      	lsls	r0, r6, #25
 80072ce:	d5fb      	bpl.n	80072c8 <_printf_i+0x1c0>
 80072d0:	8019      	strh	r1, [r3, #0]
 80072d2:	2300      	movs	r3, #0
 80072d4:	6123      	str	r3, [r4, #16]
 80072d6:	4615      	mov	r5, r2
 80072d8:	e7bc      	b.n	8007254 <_printf_i+0x14c>
 80072da:	682b      	ldr	r3, [r5, #0]
 80072dc:	1d1a      	adds	r2, r3, #4
 80072de:	602a      	str	r2, [r5, #0]
 80072e0:	681d      	ldr	r5, [r3, #0]
 80072e2:	6862      	ldr	r2, [r4, #4]
 80072e4:	2100      	movs	r1, #0
 80072e6:	4628      	mov	r0, r5
 80072e8:	f7f8 ff7a 	bl	80001e0 <memchr>
 80072ec:	b108      	cbz	r0, 80072f2 <_printf_i+0x1ea>
 80072ee:	1b40      	subs	r0, r0, r5
 80072f0:	6060      	str	r0, [r4, #4]
 80072f2:	6863      	ldr	r3, [r4, #4]
 80072f4:	6123      	str	r3, [r4, #16]
 80072f6:	2300      	movs	r3, #0
 80072f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072fc:	e7aa      	b.n	8007254 <_printf_i+0x14c>
 80072fe:	6923      	ldr	r3, [r4, #16]
 8007300:	462a      	mov	r2, r5
 8007302:	4649      	mov	r1, r9
 8007304:	4640      	mov	r0, r8
 8007306:	47d0      	blx	sl
 8007308:	3001      	adds	r0, #1
 800730a:	d0ad      	beq.n	8007268 <_printf_i+0x160>
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	079b      	lsls	r3, r3, #30
 8007310:	d413      	bmi.n	800733a <_printf_i+0x232>
 8007312:	68e0      	ldr	r0, [r4, #12]
 8007314:	9b03      	ldr	r3, [sp, #12]
 8007316:	4298      	cmp	r0, r3
 8007318:	bfb8      	it	lt
 800731a:	4618      	movlt	r0, r3
 800731c:	e7a6      	b.n	800726c <_printf_i+0x164>
 800731e:	2301      	movs	r3, #1
 8007320:	4632      	mov	r2, r6
 8007322:	4649      	mov	r1, r9
 8007324:	4640      	mov	r0, r8
 8007326:	47d0      	blx	sl
 8007328:	3001      	adds	r0, #1
 800732a:	d09d      	beq.n	8007268 <_printf_i+0x160>
 800732c:	3501      	adds	r5, #1
 800732e:	68e3      	ldr	r3, [r4, #12]
 8007330:	9903      	ldr	r1, [sp, #12]
 8007332:	1a5b      	subs	r3, r3, r1
 8007334:	42ab      	cmp	r3, r5
 8007336:	dcf2      	bgt.n	800731e <_printf_i+0x216>
 8007338:	e7eb      	b.n	8007312 <_printf_i+0x20a>
 800733a:	2500      	movs	r5, #0
 800733c:	f104 0619 	add.w	r6, r4, #25
 8007340:	e7f5      	b.n	800732e <_printf_i+0x226>
 8007342:	bf00      	nop
 8007344:	0800760d 	.word	0x0800760d
 8007348:	0800761e 	.word	0x0800761e

0800734c <memmove>:
 800734c:	4288      	cmp	r0, r1
 800734e:	b510      	push	{r4, lr}
 8007350:	eb01 0402 	add.w	r4, r1, r2
 8007354:	d902      	bls.n	800735c <memmove+0x10>
 8007356:	4284      	cmp	r4, r0
 8007358:	4623      	mov	r3, r4
 800735a:	d807      	bhi.n	800736c <memmove+0x20>
 800735c:	1e43      	subs	r3, r0, #1
 800735e:	42a1      	cmp	r1, r4
 8007360:	d008      	beq.n	8007374 <memmove+0x28>
 8007362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800736a:	e7f8      	b.n	800735e <memmove+0x12>
 800736c:	4402      	add	r2, r0
 800736e:	4601      	mov	r1, r0
 8007370:	428a      	cmp	r2, r1
 8007372:	d100      	bne.n	8007376 <memmove+0x2a>
 8007374:	bd10      	pop	{r4, pc}
 8007376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800737a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800737e:	e7f7      	b.n	8007370 <memmove+0x24>

08007380 <_sbrk_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4d06      	ldr	r5, [pc, #24]	; (800739c <_sbrk_r+0x1c>)
 8007384:	2300      	movs	r3, #0
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	602b      	str	r3, [r5, #0]
 800738c:	f7f9 fcaa 	bl	8000ce4 <_sbrk>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d102      	bne.n	800739a <_sbrk_r+0x1a>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	b103      	cbz	r3, 800739a <_sbrk_r+0x1a>
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	20001634 	.word	0x20001634

080073a0 <_realloc_r>:
 80073a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a4:	4680      	mov	r8, r0
 80073a6:	4614      	mov	r4, r2
 80073a8:	460e      	mov	r6, r1
 80073aa:	b921      	cbnz	r1, 80073b6 <_realloc_r+0x16>
 80073ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073b0:	4611      	mov	r1, r2
 80073b2:	f7ff bc57 	b.w	8006c64 <_malloc_r>
 80073b6:	b92a      	cbnz	r2, 80073c4 <_realloc_r+0x24>
 80073b8:	f7ff fbe8 	bl	8006b8c <_free_r>
 80073bc:	4625      	mov	r5, r4
 80073be:	4628      	mov	r0, r5
 80073c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c4:	f000 f81b 	bl	80073fe <_malloc_usable_size_r>
 80073c8:	4284      	cmp	r4, r0
 80073ca:	4607      	mov	r7, r0
 80073cc:	d802      	bhi.n	80073d4 <_realloc_r+0x34>
 80073ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073d2:	d812      	bhi.n	80073fa <_realloc_r+0x5a>
 80073d4:	4621      	mov	r1, r4
 80073d6:	4640      	mov	r0, r8
 80073d8:	f7ff fc44 	bl	8006c64 <_malloc_r>
 80073dc:	4605      	mov	r5, r0
 80073de:	2800      	cmp	r0, #0
 80073e0:	d0ed      	beq.n	80073be <_realloc_r+0x1e>
 80073e2:	42bc      	cmp	r4, r7
 80073e4:	4622      	mov	r2, r4
 80073e6:	4631      	mov	r1, r6
 80073e8:	bf28      	it	cs
 80073ea:	463a      	movcs	r2, r7
 80073ec:	f7ff fbc0 	bl	8006b70 <memcpy>
 80073f0:	4631      	mov	r1, r6
 80073f2:	4640      	mov	r0, r8
 80073f4:	f7ff fbca 	bl	8006b8c <_free_r>
 80073f8:	e7e1      	b.n	80073be <_realloc_r+0x1e>
 80073fa:	4635      	mov	r5, r6
 80073fc:	e7df      	b.n	80073be <_realloc_r+0x1e>

080073fe <_malloc_usable_size_r>:
 80073fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007402:	1f18      	subs	r0, r3, #4
 8007404:	2b00      	cmp	r3, #0
 8007406:	bfbc      	itt	lt
 8007408:	580b      	ldrlt	r3, [r1, r0]
 800740a:	18c0      	addlt	r0, r0, r3
 800740c:	4770      	bx	lr
	...

08007410 <_init>:
 8007410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007412:	bf00      	nop
 8007414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007416:	bc08      	pop	{r3}
 8007418:	469e      	mov	lr, r3
 800741a:	4770      	bx	lr

0800741c <_fini>:
 800741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741e:	bf00      	nop
 8007420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007422:	bc08      	pop	{r3}
 8007424:	469e      	mov	lr, r3
 8007426:	4770      	bx	lr
